// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: zed.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	ErrorCode_Internal                         ErrorCode = 0
	ErrorCode_NoSuchChannel                    ErrorCode = 1
	ErrorCode_Disconnected                     ErrorCode = 2
	ErrorCode_SignedOut                        ErrorCode = 3
	ErrorCode_UpgradeRequired                  ErrorCode = 4
	ErrorCode_Forbidden                        ErrorCode = 5
	ErrorCode_NeedsCla                         ErrorCode = 7
	ErrorCode_NotARootChannel                  ErrorCode = 8
	ErrorCode_BadPublicNesting                 ErrorCode = 9
	ErrorCode_CircularNesting                  ErrorCode = 10
	ErrorCode_WrongMoveTarget                  ErrorCode = 11
	ErrorCode_UnsharedItem                     ErrorCode = 12
	ErrorCode_NoSuchProject                    ErrorCode = 13
	ErrorCode_DevServerProjectPathDoesNotExist ErrorCode = 16
	ErrorCode_RemoteUpgradeRequired            ErrorCode = 17
	ErrorCode_RateLimitExceeded                ErrorCode = 18
	ErrorCode_CommitFailed                     ErrorCode = 19
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "Internal",
		1:  "NoSuchChannel",
		2:  "Disconnected",
		3:  "SignedOut",
		4:  "UpgradeRequired",
		5:  "Forbidden",
		7:  "NeedsCla",
		8:  "NotARootChannel",
		9:  "BadPublicNesting",
		10: "CircularNesting",
		11: "WrongMoveTarget",
		12: "UnsharedItem",
		13: "NoSuchProject",
		16: "DevServerProjectPathDoesNotExist",
		17: "RemoteUpgradeRequired",
		18: "RateLimitExceeded",
		19: "CommitFailed",
	}
	ErrorCode_value = map[string]int32{
		"Internal":                         0,
		"NoSuchChannel":                    1,
		"Disconnected":                     2,
		"SignedOut":                        3,
		"UpgradeRequired":                  4,
		"Forbidden":                        5,
		"NeedsCla":                         7,
		"NotARootChannel":                  8,
		"BadPublicNesting":                 9,
		"CircularNesting":                  10,
		"WrongMoveTarget":                  11,
		"UnsharedItem":                     12,
		"NoSuchProject":                    13,
		"DevServerProjectPathDoesNotExist": 16,
		"RemoteUpgradeRequired":            17,
		"RateLimitExceeded":                18,
		"CommitFailed":                     19,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_zed_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_zed_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_zed_proto_rawDescGZIP(), []int{0}
}

type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RespondingTo     *uint32 `protobuf:"varint,2,opt,name=responding_to,json=respondingTo,proto3,oneof" json:"responding_to,omitempty"`
	OriginalSenderId *PeerId `protobuf:"bytes,3,opt,name=original_sender_id,json=originalSenderId,proto3,oneof" json:"original_sender_id,omitempty"`
	AckId            *uint32 `protobuf:"varint,266,opt,name=ack_id,json=ackId,proto3,oneof" json:"ack_id,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*Envelope_Hello
	//	*Envelope_Ack
	//	*Envelope_Error
	//	*Envelope_Ping
	//	*Envelope_Test
	//	*Envelope_EndStream
	//	*Envelope_CreateRoom
	//	*Envelope_CreateRoomResponse
	//	*Envelope_JoinRoom
	//	*Envelope_JoinRoomResponse
	//	*Envelope_RejoinRoom
	//	*Envelope_RejoinRoomResponse
	//	*Envelope_LeaveRoom
	//	*Envelope_Call
	//	*Envelope_IncomingCall
	//	*Envelope_CallCanceled
	//	*Envelope_CancelCall
	//	*Envelope_DeclineCall
	//	*Envelope_UpdateParticipantLocation
	//	*Envelope_RoomUpdated
	//	*Envelope_ShareProject
	//	*Envelope_ShareProjectResponse
	//	*Envelope_UnshareProject
	//	*Envelope_JoinProject
	//	*Envelope_JoinProjectResponse
	//	*Envelope_LeaveProject
	//	*Envelope_AddProjectCollaborator
	//	*Envelope_UpdateProjectCollaborator
	//	*Envelope_RemoveProjectCollaborator
	//	*Envelope_GetDefinition
	//	*Envelope_GetDefinitionResponse
	//	*Envelope_GetDeclaration
	//	*Envelope_GetDeclarationResponse
	//	*Envelope_GetTypeDefinition
	//	*Envelope_GetTypeDefinitionResponse
	//	*Envelope_GetReferences
	//	*Envelope_GetReferencesResponse
	//	*Envelope_GetDocumentHighlights
	//	*Envelope_GetDocumentHighlightsResponse
	//	*Envelope_GetProjectSymbols
	//	*Envelope_GetProjectSymbolsResponse
	//	*Envelope_OpenBufferForSymbol
	//	*Envelope_OpenBufferForSymbolResponse
	//	*Envelope_UpdateProject
	//	*Envelope_UpdateWorktree
	//	*Envelope_CreateProjectEntry
	//	*Envelope_RenameProjectEntry
	//	*Envelope_CopyProjectEntry
	//	*Envelope_DeleteProjectEntry
	//	*Envelope_ProjectEntryResponse
	//	*Envelope_ExpandProjectEntry
	//	*Envelope_ExpandProjectEntryResponse
	//	*Envelope_ExpandAllForProjectEntry
	//	*Envelope_ExpandAllForProjectEntryResponse
	//	*Envelope_UpdateDiagnosticSummary
	//	*Envelope_StartLanguageServer
	//	*Envelope_UpdateLanguageServer
	//	*Envelope_OpenBufferById
	//	*Envelope_OpenBufferByPath
	//	*Envelope_OpenBufferResponse
	//	*Envelope_CreateBufferForPeer
	//	*Envelope_UpdateBuffer
	//	*Envelope_UpdateBufferFile
	//	*Envelope_SaveBuffer
	//	*Envelope_BufferSaved
	//	*Envelope_BufferReloaded
	//	*Envelope_ReloadBuffers
	//	*Envelope_ReloadBuffersResponse
	//	*Envelope_SynchronizeBuffers
	//	*Envelope_SynchronizeBuffersResponse
	//	*Envelope_FormatBuffers
	//	*Envelope_FormatBuffersResponse
	//	*Envelope_GetCompletions
	//	*Envelope_GetCompletionsResponse
	//	*Envelope_ResolveCompletionDocumentation
	//	*Envelope_ResolveCompletionDocumentationResponse
	//	*Envelope_ApplyCompletionAdditionalEdits
	//	*Envelope_ApplyCompletionAdditionalEditsResponse
	//	*Envelope_GetCodeActions
	//	*Envelope_GetCodeActionsResponse
	//	*Envelope_GetHover
	//	*Envelope_GetHoverResponse
	//	*Envelope_ApplyCodeAction
	//	*Envelope_ApplyCodeActionResponse
	//	*Envelope_PrepareRename
	//	*Envelope_PrepareRenameResponse
	//	*Envelope_PerformRename
	//	*Envelope_PerformRenameResponse
	//	*Envelope_UpdateContacts
	//	*Envelope_UpdateInviteInfo
	//	*Envelope_ShowContacts
	//	*Envelope_GetUsers
	//	*Envelope_FuzzySearchUsers
	//	*Envelope_UsersResponse
	//	*Envelope_RequestContact
	//	*Envelope_RespondToContactRequest
	//	*Envelope_RemoveContact
	//	*Envelope_Follow
	//	*Envelope_FollowResponse
	//	*Envelope_UpdateFollowers
	//	*Envelope_Unfollow
	//	*Envelope_GetPrivateUserInfo
	//	*Envelope_GetPrivateUserInfoResponse
	//	*Envelope_UpdateUserPlan
	//	*Envelope_UpdateDiffBases
	//	*Envelope_AcceptTermsOfService
	//	*Envelope_AcceptTermsOfServiceResponse
	//	*Envelope_OnTypeFormatting
	//	*Envelope_OnTypeFormattingResponse
	//	*Envelope_UpdateWorktreeSettings
	//	*Envelope_InlayHints
	//	*Envelope_InlayHintsResponse
	//	*Envelope_ResolveInlayHint
	//	*Envelope_ResolveInlayHintResponse
	//	*Envelope_RefreshInlayHints
	//	*Envelope_CreateChannel
	//	*Envelope_CreateChannelResponse
	//	*Envelope_InviteChannelMember
	//	*Envelope_RemoveChannelMember
	//	*Envelope_RespondToChannelInvite
	//	*Envelope_UpdateChannels
	//	*Envelope_JoinChannel
	//	*Envelope_DeleteChannel
	//	*Envelope_GetChannelMembers
	//	*Envelope_GetChannelMembersResponse
	//	*Envelope_SetChannelMemberRole
	//	*Envelope_RenameChannel
	//	*Envelope_RenameChannelResponse
	//	*Envelope_SubscribeToChannels
	//	*Envelope_JoinChannelBuffer
	//	*Envelope_JoinChannelBufferResponse
	//	*Envelope_UpdateChannelBuffer
	//	*Envelope_LeaveChannelBuffer
	//	*Envelope_UpdateChannelBufferCollaborators
	//	*Envelope_RejoinChannelBuffers
	//	*Envelope_RejoinChannelBuffersResponse
	//	*Envelope_AckBufferOperation
	//	*Envelope_JoinChannelChat
	//	*Envelope_JoinChannelChatResponse
	//	*Envelope_LeaveChannelChat
	//	*Envelope_SendChannelMessage
	//	*Envelope_SendChannelMessageResponse
	//	*Envelope_ChannelMessageSent
	//	*Envelope_GetChannelMessages
	//	*Envelope_GetChannelMessagesResponse
	//	*Envelope_RemoveChannelMessage
	//	*Envelope_AckChannelMessage
	//	*Envelope_GetChannelMessagesById
	//	*Envelope_MoveChannel
	//	*Envelope_SetChannelVisibility
	//	*Envelope_AddNotification
	//	*Envelope_GetNotifications
	//	*Envelope_GetNotificationsResponse
	//	*Envelope_DeleteNotification
	//	*Envelope_MarkNotificationRead
	//	*Envelope_LspExtExpandMacro
	//	*Envelope_LspExtExpandMacroResponse
	//	*Envelope_SetRoomParticipantRole
	//	*Envelope_UpdateUserChannels
	//	*Envelope_GetImplementation
	//	*Envelope_GetImplementationResponse
	//	*Envelope_UpdateChannelMessage
	//	*Envelope_ChannelMessageUpdate
	//	*Envelope_BlameBuffer
	//	*Envelope_BlameBufferResponse
	//	*Envelope_UpdateNotification
	//	*Envelope_MultiLspQuery
	//	*Envelope_MultiLspQueryResponse
	//	*Envelope_RestartLanguageServers
	//	*Envelope_RejoinRemoteProjects
	//	*Envelope_RejoinRemoteProjectsResponse
	//	*Envelope_OpenNewBuffer
	//	*Envelope_GetSupermavenApiKey
	//	*Envelope_GetSupermavenApiKeyResponse
	//	*Envelope_TaskContextForLocation
	//	*Envelope_TaskContext
	//	*Envelope_LinkedEditingRange
	//	*Envelope_LinkedEditingRangeResponse
	//	*Envelope_AdvertiseContexts
	//	*Envelope_OpenContext
	//	*Envelope_OpenContextResponse
	//	*Envelope_CreateContext
	//	*Envelope_CreateContextResponse
	//	*Envelope_UpdateContext
	//	*Envelope_SynchronizeContexts
	//	*Envelope_SynchronizeContextsResponse
	//	*Envelope_GetSignatureHelp
	//	*Envelope_GetSignatureHelpResponse
	//	*Envelope_ListRemoteDirectory
	//	*Envelope_ListRemoteDirectoryResponse
	//	*Envelope_AddWorktree
	//	*Envelope_AddWorktreeResponse
	//	*Envelope_GetLlmToken
	//	*Envelope_GetLlmTokenResponse
	//	*Envelope_RefreshLlmToken
	//	*Envelope_LspExtSwitchSourceHeader
	//	*Envelope_LspExtSwitchSourceHeaderResponse
	//	*Envelope_FindSearchCandidates
	//	*Envelope_FindSearchCandidatesResponse
	//	*Envelope_CloseBuffer
	//	*Envelope_ShutdownRemoteServer
	//	*Envelope_RemoveWorktree
	//	*Envelope_LanguageServerLog
	//	*Envelope_Toast
	//	*Envelope_HideToast
	//	*Envelope_OpenServerSettings
	//	*Envelope_GetPermalinkToLine
	//	*Envelope_GetPermalinkToLineResponse
	//	*Envelope_FlushBufferedMessages
	//	*Envelope_LanguageServerPromptRequest
	//	*Envelope_LanguageServerPromptResponse
	//	*Envelope_GitBranchesResponse
	//	*Envelope_UpdateGitBranch
	//	*Envelope_ListToolchains
	//	*Envelope_ListToolchainsResponse
	//	*Envelope_ActivateToolchain
	//	*Envelope_ActiveToolchain
	//	*Envelope_ActiveToolchainResponse
	//	*Envelope_GetPathMetadata
	//	*Envelope_GetPathMetadataResponse
	//	*Envelope_GetPanicFiles
	//	*Envelope_GetPanicFilesResponse
	//	*Envelope_CancelLanguageServerWork
	//	*Envelope_LspExtOpenDocs
	//	*Envelope_LspExtOpenDocsResponse
	//	*Envelope_SyncExtensions
	//	*Envelope_SyncExtensionsResponse
	//	*Envelope_InstallExtension
	//	*Envelope_OpenUnstagedDiff
	//	*Envelope_OpenUnstagedDiffResponse
	//	*Envelope_RegisterBufferWithLanguageServers
	//	*Envelope_Stage
	//	*Envelope_Unstage
	//	*Envelope_Commit
	//	*Envelope_OpenCommitMessageBuffer
	//	*Envelope_OpenUncommittedDiff
	//	*Envelope_OpenUncommittedDiffResponse
	//	*Envelope_SetIndexText
	//	*Envelope_GitShow
	//	*Envelope_GitReset
	//	*Envelope_GitCommitDetails
	//	*Envelope_GitCheckoutFiles
	//	*Envelope_Push
	//	*Envelope_Fetch
	//	*Envelope_GetRemotes
	//	*Envelope_GetRemotesResponse
	//	*Envelope_Pull
	//	*Envelope_ApplyCodeActionKind
	//	*Envelope_ApplyCodeActionKindResponse
	//	*Envelope_RemoteMessageResponse
	//	*Envelope_GitGetBranches
	//	*Envelope_GitCreateBranch
	//	*Envelope_GitChangeBranch
	//	*Envelope_CheckForPushedCommits
	//	*Envelope_CheckForPushedCommitsResponse
	//	*Envelope_AskPassRequest
	//	*Envelope_AskPassResponse
	//	*Envelope_GitDiff
	//	*Envelope_GitDiffResponse
	//	*Envelope_GitInit
	//	*Envelope_CodeLens
	//	*Envelope_GetCodeLens_
	//	*Envelope_GetCodeLensResponse
	//	*Envelope_RefreshCodeLens
	//	*Envelope_ToggleBreakpoint
	//	*Envelope_BreakpointsForFile
	//	*Envelope_UpdateRepository
	//	*Envelope_RemoveRepository
	//	*Envelope_GetDocumentSymbols
	//	*Envelope_GetDocumentSymbolsResponse
	//	*Envelope_LanguageServerIdForName
	//	*Envelope_LanguageServerIdForNameResponse
	//	*Envelope_LoadCommitDiff
	//	*Envelope_LoadCommitDiffResponse
	//	*Envelope_StopLanguageServers
	//	*Envelope_LspExtRunnables
	//	*Envelope_LspExtRunnablesResponse
	//	*Envelope_GetDebugAdapterBinary
	//	*Envelope_DebugAdapterBinary_
	//	*Envelope_RunDebugLocators
	//	*Envelope_DebugRequest
	//	*Envelope_LspExtGoToParentModule
	//	*Envelope_LspExtGoToParentModuleResponse
	//	*Envelope_LspExtCancelFlycheck
	//	*Envelope_LspExtRunFlycheck
	//	*Envelope_LspExtClearFlycheck
	//	*Envelope_LogToDebugConsole
	Payload isEnvelope_Payload `protobuf_oneof:"payload"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_zed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_zed_proto_rawDescGZIP(), []int{0}
}

func (x *Envelope) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Envelope) GetRespondingTo() uint32 {
	if x != nil && x.RespondingTo != nil {
		return *x.RespondingTo
	}
	return 0
}

func (x *Envelope) GetOriginalSenderId() *PeerId {
	if x != nil {
		return x.OriginalSenderId
	}
	return nil
}

func (x *Envelope) GetAckId() uint32 {
	if x != nil && x.AckId != nil {
		return *x.AckId
	}
	return 0
}

func (m *Envelope) GetPayload() isEnvelope_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Envelope) GetHello() *Hello {
	if x, ok := x.GetPayload().(*Envelope_Hello); ok {
		return x.Hello
	}
	return nil
}

func (x *Envelope) GetAck() *Ack {
	if x, ok := x.GetPayload().(*Envelope_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *Envelope) GetError() *Error {
	if x, ok := x.GetPayload().(*Envelope_Error); ok {
		return x.Error
	}
	return nil
}

func (x *Envelope) GetPing() *Ping {
	if x, ok := x.GetPayload().(*Envelope_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *Envelope) GetTest() *Test {
	if x, ok := x.GetPayload().(*Envelope_Test); ok {
		return x.Test
	}
	return nil
}

func (x *Envelope) GetEndStream() *EndStream {
	if x, ok := x.GetPayload().(*Envelope_EndStream); ok {
		return x.EndStream
	}
	return nil
}

func (x *Envelope) GetCreateRoom() *CreateRoom {
	if x, ok := x.GetPayload().(*Envelope_CreateRoom); ok {
		return x.CreateRoom
	}
	return nil
}

func (x *Envelope) GetCreateRoomResponse() *CreateRoomResponse {
	if x, ok := x.GetPayload().(*Envelope_CreateRoomResponse); ok {
		return x.CreateRoomResponse
	}
	return nil
}

func (x *Envelope) GetJoinRoom() *JoinRoom {
	if x, ok := x.GetPayload().(*Envelope_JoinRoom); ok {
		return x.JoinRoom
	}
	return nil
}

func (x *Envelope) GetJoinRoomResponse() *JoinRoomResponse {
	if x, ok := x.GetPayload().(*Envelope_JoinRoomResponse); ok {
		return x.JoinRoomResponse
	}
	return nil
}

func (x *Envelope) GetRejoinRoom() *RejoinRoom {
	if x, ok := x.GetPayload().(*Envelope_RejoinRoom); ok {
		return x.RejoinRoom
	}
	return nil
}

func (x *Envelope) GetRejoinRoomResponse() *RejoinRoomResponse {
	if x, ok := x.GetPayload().(*Envelope_RejoinRoomResponse); ok {
		return x.RejoinRoomResponse
	}
	return nil
}

func (x *Envelope) GetLeaveRoom() *LeaveRoom {
	if x, ok := x.GetPayload().(*Envelope_LeaveRoom); ok {
		return x.LeaveRoom
	}
	return nil
}

func (x *Envelope) GetCall() *Call {
	if x, ok := x.GetPayload().(*Envelope_Call); ok {
		return x.Call
	}
	return nil
}

func (x *Envelope) GetIncomingCall() *IncomingCall {
	if x, ok := x.GetPayload().(*Envelope_IncomingCall); ok {
		return x.IncomingCall
	}
	return nil
}

func (x *Envelope) GetCallCanceled() *CallCanceled {
	if x, ok := x.GetPayload().(*Envelope_CallCanceled); ok {
		return x.CallCanceled
	}
	return nil
}

func (x *Envelope) GetCancelCall() *CancelCall {
	if x, ok := x.GetPayload().(*Envelope_CancelCall); ok {
		return x.CancelCall
	}
	return nil
}

func (x *Envelope) GetDeclineCall() *DeclineCall {
	if x, ok := x.GetPayload().(*Envelope_DeclineCall); ok {
		return x.DeclineCall
	}
	return nil
}

func (x *Envelope) GetUpdateParticipantLocation() *UpdateParticipantLocation {
	if x, ok := x.GetPayload().(*Envelope_UpdateParticipantLocation); ok {
		return x.UpdateParticipantLocation
	}
	return nil
}

func (x *Envelope) GetRoomUpdated() *RoomUpdated {
	if x, ok := x.GetPayload().(*Envelope_RoomUpdated); ok {
		return x.RoomUpdated
	}
	return nil
}

func (x *Envelope) GetShareProject() *ShareProject {
	if x, ok := x.GetPayload().(*Envelope_ShareProject); ok {
		return x.ShareProject
	}
	return nil
}

func (x *Envelope) GetShareProjectResponse() *ShareProjectResponse {
	if x, ok := x.GetPayload().(*Envelope_ShareProjectResponse); ok {
		return x.ShareProjectResponse
	}
	return nil
}

func (x *Envelope) GetUnshareProject() *UnshareProject {
	if x, ok := x.GetPayload().(*Envelope_UnshareProject); ok {
		return x.UnshareProject
	}
	return nil
}

func (x *Envelope) GetJoinProject() *JoinProject {
	if x, ok := x.GetPayload().(*Envelope_JoinProject); ok {
		return x.JoinProject
	}
	return nil
}

func (x *Envelope) GetJoinProjectResponse() *JoinProjectResponse {
	if x, ok := x.GetPayload().(*Envelope_JoinProjectResponse); ok {
		return x.JoinProjectResponse
	}
	return nil
}

func (x *Envelope) GetLeaveProject() *LeaveProject {
	if x, ok := x.GetPayload().(*Envelope_LeaveProject); ok {
		return x.LeaveProject
	}
	return nil
}

func (x *Envelope) GetAddProjectCollaborator() *AddProjectCollaborator {
	if x, ok := x.GetPayload().(*Envelope_AddProjectCollaborator); ok {
		return x.AddProjectCollaborator
	}
	return nil
}

func (x *Envelope) GetUpdateProjectCollaborator() *UpdateProjectCollaborator {
	if x, ok := x.GetPayload().(*Envelope_UpdateProjectCollaborator); ok {
		return x.UpdateProjectCollaborator
	}
	return nil
}

func (x *Envelope) GetRemoveProjectCollaborator() *RemoveProjectCollaborator {
	if x, ok := x.GetPayload().(*Envelope_RemoveProjectCollaborator); ok {
		return x.RemoveProjectCollaborator
	}
	return nil
}

func (x *Envelope) GetGetDefinition() *GetDefinition {
	if x, ok := x.GetPayload().(*Envelope_GetDefinition); ok {
		return x.GetDefinition
	}
	return nil
}

func (x *Envelope) GetGetDefinitionResponse() *GetDefinitionResponse {
	if x, ok := x.GetPayload().(*Envelope_GetDefinitionResponse); ok {
		return x.GetDefinitionResponse
	}
	return nil
}

func (x *Envelope) GetGetDeclaration() *GetDeclaration {
	if x, ok := x.GetPayload().(*Envelope_GetDeclaration); ok {
		return x.GetDeclaration
	}
	return nil
}

func (x *Envelope) GetGetDeclarationResponse() *GetDeclarationResponse {
	if x, ok := x.GetPayload().(*Envelope_GetDeclarationResponse); ok {
		return x.GetDeclarationResponse
	}
	return nil
}

func (x *Envelope) GetGetTypeDefinition() *GetTypeDefinition {
	if x, ok := x.GetPayload().(*Envelope_GetTypeDefinition); ok {
		return x.GetTypeDefinition
	}
	return nil
}

func (x *Envelope) GetGetTypeDefinitionResponse() *GetTypeDefinitionResponse {
	if x, ok := x.GetPayload().(*Envelope_GetTypeDefinitionResponse); ok {
		return x.GetTypeDefinitionResponse
	}
	return nil
}

func (x *Envelope) GetGetReferences() *GetReferences {
	if x, ok := x.GetPayload().(*Envelope_GetReferences); ok {
		return x.GetReferences
	}
	return nil
}

func (x *Envelope) GetGetReferencesResponse() *GetReferencesResponse {
	if x, ok := x.GetPayload().(*Envelope_GetReferencesResponse); ok {
		return x.GetReferencesResponse
	}
	return nil
}

func (x *Envelope) GetGetDocumentHighlights() *GetDocumentHighlights {
	if x, ok := x.GetPayload().(*Envelope_GetDocumentHighlights); ok {
		return x.GetDocumentHighlights
	}
	return nil
}

func (x *Envelope) GetGetDocumentHighlightsResponse() *GetDocumentHighlightsResponse {
	if x, ok := x.GetPayload().(*Envelope_GetDocumentHighlightsResponse); ok {
		return x.GetDocumentHighlightsResponse
	}
	return nil
}

func (x *Envelope) GetGetProjectSymbols() *GetProjectSymbols {
	if x, ok := x.GetPayload().(*Envelope_GetProjectSymbols); ok {
		return x.GetProjectSymbols
	}
	return nil
}

func (x *Envelope) GetGetProjectSymbolsResponse() *GetProjectSymbolsResponse {
	if x, ok := x.GetPayload().(*Envelope_GetProjectSymbolsResponse); ok {
		return x.GetProjectSymbolsResponse
	}
	return nil
}

func (x *Envelope) GetOpenBufferForSymbol() *OpenBufferForSymbol {
	if x, ok := x.GetPayload().(*Envelope_OpenBufferForSymbol); ok {
		return x.OpenBufferForSymbol
	}
	return nil
}

func (x *Envelope) GetOpenBufferForSymbolResponse() *OpenBufferForSymbolResponse {
	if x, ok := x.GetPayload().(*Envelope_OpenBufferForSymbolResponse); ok {
		return x.OpenBufferForSymbolResponse
	}
	return nil
}

func (x *Envelope) GetUpdateProject() *UpdateProject {
	if x, ok := x.GetPayload().(*Envelope_UpdateProject); ok {
		return x.UpdateProject
	}
	return nil
}

func (x *Envelope) GetUpdateWorktree() *UpdateWorktree {
	if x, ok := x.GetPayload().(*Envelope_UpdateWorktree); ok {
		return x.UpdateWorktree
	}
	return nil
}

func (x *Envelope) GetCreateProjectEntry() *CreateProjectEntry {
	if x, ok := x.GetPayload().(*Envelope_CreateProjectEntry); ok {
		return x.CreateProjectEntry
	}
	return nil
}

func (x *Envelope) GetRenameProjectEntry() *RenameProjectEntry {
	if x, ok := x.GetPayload().(*Envelope_RenameProjectEntry); ok {
		return x.RenameProjectEntry
	}
	return nil
}

func (x *Envelope) GetCopyProjectEntry() *CopyProjectEntry {
	if x, ok := x.GetPayload().(*Envelope_CopyProjectEntry); ok {
		return x.CopyProjectEntry
	}
	return nil
}

func (x *Envelope) GetDeleteProjectEntry() *DeleteProjectEntry {
	if x, ok := x.GetPayload().(*Envelope_DeleteProjectEntry); ok {
		return x.DeleteProjectEntry
	}
	return nil
}

func (x *Envelope) GetProjectEntryResponse() *ProjectEntryResponse {
	if x, ok := x.GetPayload().(*Envelope_ProjectEntryResponse); ok {
		return x.ProjectEntryResponse
	}
	return nil
}

func (x *Envelope) GetExpandProjectEntry() *ExpandProjectEntry {
	if x, ok := x.GetPayload().(*Envelope_ExpandProjectEntry); ok {
		return x.ExpandProjectEntry
	}
	return nil
}

func (x *Envelope) GetExpandProjectEntryResponse() *ExpandProjectEntryResponse {
	if x, ok := x.GetPayload().(*Envelope_ExpandProjectEntryResponse); ok {
		return x.ExpandProjectEntryResponse
	}
	return nil
}

func (x *Envelope) GetExpandAllForProjectEntry() *ExpandAllForProjectEntry {
	if x, ok := x.GetPayload().(*Envelope_ExpandAllForProjectEntry); ok {
		return x.ExpandAllForProjectEntry
	}
	return nil
}

func (x *Envelope) GetExpandAllForProjectEntryResponse() *ExpandAllForProjectEntryResponse {
	if x, ok := x.GetPayload().(*Envelope_ExpandAllForProjectEntryResponse); ok {
		return x.ExpandAllForProjectEntryResponse
	}
	return nil
}

func (x *Envelope) GetUpdateDiagnosticSummary() *UpdateDiagnosticSummary {
	if x, ok := x.GetPayload().(*Envelope_UpdateDiagnosticSummary); ok {
		return x.UpdateDiagnosticSummary
	}
	return nil
}

func (x *Envelope) GetStartLanguageServer() *StartLanguageServer {
	if x, ok := x.GetPayload().(*Envelope_StartLanguageServer); ok {
		return x.StartLanguageServer
	}
	return nil
}

func (x *Envelope) GetUpdateLanguageServer() *UpdateLanguageServer {
	if x, ok := x.GetPayload().(*Envelope_UpdateLanguageServer); ok {
		return x.UpdateLanguageServer
	}
	return nil
}

func (x *Envelope) GetOpenBufferById() *OpenBufferById {
	if x, ok := x.GetPayload().(*Envelope_OpenBufferById); ok {
		return x.OpenBufferById
	}
	return nil
}

func (x *Envelope) GetOpenBufferByPath() *OpenBufferByPath {
	if x, ok := x.GetPayload().(*Envelope_OpenBufferByPath); ok {
		return x.OpenBufferByPath
	}
	return nil
}

func (x *Envelope) GetOpenBufferResponse() *OpenBufferResponse {
	if x, ok := x.GetPayload().(*Envelope_OpenBufferResponse); ok {
		return x.OpenBufferResponse
	}
	return nil
}

func (x *Envelope) GetCreateBufferForPeer() *CreateBufferForPeer {
	if x, ok := x.GetPayload().(*Envelope_CreateBufferForPeer); ok {
		return x.CreateBufferForPeer
	}
	return nil
}

func (x *Envelope) GetUpdateBuffer() *UpdateBuffer {
	if x, ok := x.GetPayload().(*Envelope_UpdateBuffer); ok {
		return x.UpdateBuffer
	}
	return nil
}

func (x *Envelope) GetUpdateBufferFile() *UpdateBufferFile {
	if x, ok := x.GetPayload().(*Envelope_UpdateBufferFile); ok {
		return x.UpdateBufferFile
	}
	return nil
}

func (x *Envelope) GetSaveBuffer() *SaveBuffer {
	if x, ok := x.GetPayload().(*Envelope_SaveBuffer); ok {
		return x.SaveBuffer
	}
	return nil
}

func (x *Envelope) GetBufferSaved() *BufferSaved {
	if x, ok := x.GetPayload().(*Envelope_BufferSaved); ok {
		return x.BufferSaved
	}
	return nil
}

func (x *Envelope) GetBufferReloaded() *BufferReloaded {
	if x, ok := x.GetPayload().(*Envelope_BufferReloaded); ok {
		return x.BufferReloaded
	}
	return nil
}

func (x *Envelope) GetReloadBuffers() *ReloadBuffers {
	if x, ok := x.GetPayload().(*Envelope_ReloadBuffers); ok {
		return x.ReloadBuffers
	}
	return nil
}

func (x *Envelope) GetReloadBuffersResponse() *ReloadBuffersResponse {
	if x, ok := x.GetPayload().(*Envelope_ReloadBuffersResponse); ok {
		return x.ReloadBuffersResponse
	}
	return nil
}

func (x *Envelope) GetSynchronizeBuffers() *SynchronizeBuffers {
	if x, ok := x.GetPayload().(*Envelope_SynchronizeBuffers); ok {
		return x.SynchronizeBuffers
	}
	return nil
}

func (x *Envelope) GetSynchronizeBuffersResponse() *SynchronizeBuffersResponse {
	if x, ok := x.GetPayload().(*Envelope_SynchronizeBuffersResponse); ok {
		return x.SynchronizeBuffersResponse
	}
	return nil
}

func (x *Envelope) GetFormatBuffers() *FormatBuffers {
	if x, ok := x.GetPayload().(*Envelope_FormatBuffers); ok {
		return x.FormatBuffers
	}
	return nil
}

func (x *Envelope) GetFormatBuffersResponse() *FormatBuffersResponse {
	if x, ok := x.GetPayload().(*Envelope_FormatBuffersResponse); ok {
		return x.FormatBuffersResponse
	}
	return nil
}

func (x *Envelope) GetGetCompletions() *GetCompletions {
	if x, ok := x.GetPayload().(*Envelope_GetCompletions); ok {
		return x.GetCompletions
	}
	return nil
}

func (x *Envelope) GetGetCompletionsResponse() *GetCompletionsResponse {
	if x, ok := x.GetPayload().(*Envelope_GetCompletionsResponse); ok {
		return x.GetCompletionsResponse
	}
	return nil
}

func (x *Envelope) GetResolveCompletionDocumentation() *ResolveCompletionDocumentation {
	if x, ok := x.GetPayload().(*Envelope_ResolveCompletionDocumentation); ok {
		return x.ResolveCompletionDocumentation
	}
	return nil
}

func (x *Envelope) GetResolveCompletionDocumentationResponse() *ResolveCompletionDocumentationResponse {
	if x, ok := x.GetPayload().(*Envelope_ResolveCompletionDocumentationResponse); ok {
		return x.ResolveCompletionDocumentationResponse
	}
	return nil
}

func (x *Envelope) GetApplyCompletionAdditionalEdits() *ApplyCompletionAdditionalEdits {
	if x, ok := x.GetPayload().(*Envelope_ApplyCompletionAdditionalEdits); ok {
		return x.ApplyCompletionAdditionalEdits
	}
	return nil
}

func (x *Envelope) GetApplyCompletionAdditionalEditsResponse() *ApplyCompletionAdditionalEditsResponse {
	if x, ok := x.GetPayload().(*Envelope_ApplyCompletionAdditionalEditsResponse); ok {
		return x.ApplyCompletionAdditionalEditsResponse
	}
	return nil
}

func (x *Envelope) GetGetCodeActions() *GetCodeActions {
	if x, ok := x.GetPayload().(*Envelope_GetCodeActions); ok {
		return x.GetCodeActions
	}
	return nil
}

func (x *Envelope) GetGetCodeActionsResponse() *GetCodeActionsResponse {
	if x, ok := x.GetPayload().(*Envelope_GetCodeActionsResponse); ok {
		return x.GetCodeActionsResponse
	}
	return nil
}

func (x *Envelope) GetGetHover() *GetHover {
	if x, ok := x.GetPayload().(*Envelope_GetHover); ok {
		return x.GetHover
	}
	return nil
}

func (x *Envelope) GetGetHoverResponse() *GetHoverResponse {
	if x, ok := x.GetPayload().(*Envelope_GetHoverResponse); ok {
		return x.GetHoverResponse
	}
	return nil
}

func (x *Envelope) GetApplyCodeAction() *ApplyCodeAction {
	if x, ok := x.GetPayload().(*Envelope_ApplyCodeAction); ok {
		return x.ApplyCodeAction
	}
	return nil
}

func (x *Envelope) GetApplyCodeActionResponse() *ApplyCodeActionResponse {
	if x, ok := x.GetPayload().(*Envelope_ApplyCodeActionResponse); ok {
		return x.ApplyCodeActionResponse
	}
	return nil
}

func (x *Envelope) GetPrepareRename() *PrepareRename {
	if x, ok := x.GetPayload().(*Envelope_PrepareRename); ok {
		return x.PrepareRename
	}
	return nil
}

func (x *Envelope) GetPrepareRenameResponse() *PrepareRenameResponse {
	if x, ok := x.GetPayload().(*Envelope_PrepareRenameResponse); ok {
		return x.PrepareRenameResponse
	}
	return nil
}

func (x *Envelope) GetPerformRename() *PerformRename {
	if x, ok := x.GetPayload().(*Envelope_PerformRename); ok {
		return x.PerformRename
	}
	return nil
}

func (x *Envelope) GetPerformRenameResponse() *PerformRenameResponse {
	if x, ok := x.GetPayload().(*Envelope_PerformRenameResponse); ok {
		return x.PerformRenameResponse
	}
	return nil
}

func (x *Envelope) GetUpdateContacts() *UpdateContacts {
	if x, ok := x.GetPayload().(*Envelope_UpdateContacts); ok {
		return x.UpdateContacts
	}
	return nil
}

func (x *Envelope) GetUpdateInviteInfo() *UpdateInviteInfo {
	if x, ok := x.GetPayload().(*Envelope_UpdateInviteInfo); ok {
		return x.UpdateInviteInfo
	}
	return nil
}

func (x *Envelope) GetShowContacts() *ShowContacts {
	if x, ok := x.GetPayload().(*Envelope_ShowContacts); ok {
		return x.ShowContacts
	}
	return nil
}

func (x *Envelope) GetGetUsers() *GetUsers {
	if x, ok := x.GetPayload().(*Envelope_GetUsers); ok {
		return x.GetUsers
	}
	return nil
}

func (x *Envelope) GetFuzzySearchUsers() *FuzzySearchUsers {
	if x, ok := x.GetPayload().(*Envelope_FuzzySearchUsers); ok {
		return x.FuzzySearchUsers
	}
	return nil
}

func (x *Envelope) GetUsersResponse() *UsersResponse {
	if x, ok := x.GetPayload().(*Envelope_UsersResponse); ok {
		return x.UsersResponse
	}
	return nil
}

func (x *Envelope) GetRequestContact() *RequestContact {
	if x, ok := x.GetPayload().(*Envelope_RequestContact); ok {
		return x.RequestContact
	}
	return nil
}

func (x *Envelope) GetRespondToContactRequest() *RespondToContactRequest {
	if x, ok := x.GetPayload().(*Envelope_RespondToContactRequest); ok {
		return x.RespondToContactRequest
	}
	return nil
}

func (x *Envelope) GetRemoveContact() *RemoveContact {
	if x, ok := x.GetPayload().(*Envelope_RemoveContact); ok {
		return x.RemoveContact
	}
	return nil
}

func (x *Envelope) GetFollow() *Follow {
	if x, ok := x.GetPayload().(*Envelope_Follow); ok {
		return x.Follow
	}
	return nil
}

func (x *Envelope) GetFollowResponse() *FollowResponse {
	if x, ok := x.GetPayload().(*Envelope_FollowResponse); ok {
		return x.FollowResponse
	}
	return nil
}

func (x *Envelope) GetUpdateFollowers() *UpdateFollowers {
	if x, ok := x.GetPayload().(*Envelope_UpdateFollowers); ok {
		return x.UpdateFollowers
	}
	return nil
}

func (x *Envelope) GetUnfollow() *Unfollow {
	if x, ok := x.GetPayload().(*Envelope_Unfollow); ok {
		return x.Unfollow
	}
	return nil
}

func (x *Envelope) GetGetPrivateUserInfo() *GetPrivateUserInfo {
	if x, ok := x.GetPayload().(*Envelope_GetPrivateUserInfo); ok {
		return x.GetPrivateUserInfo
	}
	return nil
}

func (x *Envelope) GetGetPrivateUserInfoResponse() *GetPrivateUserInfoResponse {
	if x, ok := x.GetPayload().(*Envelope_GetPrivateUserInfoResponse); ok {
		return x.GetPrivateUserInfoResponse
	}
	return nil
}

func (x *Envelope) GetUpdateUserPlan() *UpdateUserPlan {
	if x, ok := x.GetPayload().(*Envelope_UpdateUserPlan); ok {
		return x.UpdateUserPlan
	}
	return nil
}

func (x *Envelope) GetUpdateDiffBases() *UpdateDiffBases {
	if x, ok := x.GetPayload().(*Envelope_UpdateDiffBases); ok {
		return x.UpdateDiffBases
	}
	return nil
}

func (x *Envelope) GetAcceptTermsOfService() *AcceptTermsOfService {
	if x, ok := x.GetPayload().(*Envelope_AcceptTermsOfService); ok {
		return x.AcceptTermsOfService
	}
	return nil
}

func (x *Envelope) GetAcceptTermsOfServiceResponse() *AcceptTermsOfServiceResponse {
	if x, ok := x.GetPayload().(*Envelope_AcceptTermsOfServiceResponse); ok {
		return x.AcceptTermsOfServiceResponse
	}
	return nil
}

func (x *Envelope) GetOnTypeFormatting() *OnTypeFormatting {
	if x, ok := x.GetPayload().(*Envelope_OnTypeFormatting); ok {
		return x.OnTypeFormatting
	}
	return nil
}

func (x *Envelope) GetOnTypeFormattingResponse() *OnTypeFormattingResponse {
	if x, ok := x.GetPayload().(*Envelope_OnTypeFormattingResponse); ok {
		return x.OnTypeFormattingResponse
	}
	return nil
}

func (x *Envelope) GetUpdateWorktreeSettings() *UpdateWorktreeSettings {
	if x, ok := x.GetPayload().(*Envelope_UpdateWorktreeSettings); ok {
		return x.UpdateWorktreeSettings
	}
	return nil
}

func (x *Envelope) GetInlayHints() *InlayHints {
	if x, ok := x.GetPayload().(*Envelope_InlayHints); ok {
		return x.InlayHints
	}
	return nil
}

func (x *Envelope) GetInlayHintsResponse() *InlayHintsResponse {
	if x, ok := x.GetPayload().(*Envelope_InlayHintsResponse); ok {
		return x.InlayHintsResponse
	}
	return nil
}

func (x *Envelope) GetResolveInlayHint() *ResolveInlayHint {
	if x, ok := x.GetPayload().(*Envelope_ResolveInlayHint); ok {
		return x.ResolveInlayHint
	}
	return nil
}

func (x *Envelope) GetResolveInlayHintResponse() *ResolveInlayHintResponse {
	if x, ok := x.GetPayload().(*Envelope_ResolveInlayHintResponse); ok {
		return x.ResolveInlayHintResponse
	}
	return nil
}

func (x *Envelope) GetRefreshInlayHints() *RefreshInlayHints {
	if x, ok := x.GetPayload().(*Envelope_RefreshInlayHints); ok {
		return x.RefreshInlayHints
	}
	return nil
}

func (x *Envelope) GetCreateChannel() *CreateChannel {
	if x, ok := x.GetPayload().(*Envelope_CreateChannel); ok {
		return x.CreateChannel
	}
	return nil
}

func (x *Envelope) GetCreateChannelResponse() *CreateChannelResponse {
	if x, ok := x.GetPayload().(*Envelope_CreateChannelResponse); ok {
		return x.CreateChannelResponse
	}
	return nil
}

func (x *Envelope) GetInviteChannelMember() *InviteChannelMember {
	if x, ok := x.GetPayload().(*Envelope_InviteChannelMember); ok {
		return x.InviteChannelMember
	}
	return nil
}

func (x *Envelope) GetRemoveChannelMember() *RemoveChannelMember {
	if x, ok := x.GetPayload().(*Envelope_RemoveChannelMember); ok {
		return x.RemoveChannelMember
	}
	return nil
}

func (x *Envelope) GetRespondToChannelInvite() *RespondToChannelInvite {
	if x, ok := x.GetPayload().(*Envelope_RespondToChannelInvite); ok {
		return x.RespondToChannelInvite
	}
	return nil
}

func (x *Envelope) GetUpdateChannels() *UpdateChannels {
	if x, ok := x.GetPayload().(*Envelope_UpdateChannels); ok {
		return x.UpdateChannels
	}
	return nil
}

func (x *Envelope) GetJoinChannel() *JoinChannel {
	if x, ok := x.GetPayload().(*Envelope_JoinChannel); ok {
		return x.JoinChannel
	}
	return nil
}

func (x *Envelope) GetDeleteChannel() *DeleteChannel {
	if x, ok := x.GetPayload().(*Envelope_DeleteChannel); ok {
		return x.DeleteChannel
	}
	return nil
}

func (x *Envelope) GetGetChannelMembers() *GetChannelMembers {
	if x, ok := x.GetPayload().(*Envelope_GetChannelMembers); ok {
		return x.GetChannelMembers
	}
	return nil
}

func (x *Envelope) GetGetChannelMembersResponse() *GetChannelMembersResponse {
	if x, ok := x.GetPayload().(*Envelope_GetChannelMembersResponse); ok {
		return x.GetChannelMembersResponse
	}
	return nil
}

func (x *Envelope) GetSetChannelMemberRole() *SetChannelMemberRole {
	if x, ok := x.GetPayload().(*Envelope_SetChannelMemberRole); ok {
		return x.SetChannelMemberRole
	}
	return nil
}

func (x *Envelope) GetRenameChannel() *RenameChannel {
	if x, ok := x.GetPayload().(*Envelope_RenameChannel); ok {
		return x.RenameChannel
	}
	return nil
}

func (x *Envelope) GetRenameChannelResponse() *RenameChannelResponse {
	if x, ok := x.GetPayload().(*Envelope_RenameChannelResponse); ok {
		return x.RenameChannelResponse
	}
	return nil
}

func (x *Envelope) GetSubscribeToChannels() *SubscribeToChannels {
	if x, ok := x.GetPayload().(*Envelope_SubscribeToChannels); ok {
		return x.SubscribeToChannels
	}
	return nil
}

func (x *Envelope) GetJoinChannelBuffer() *JoinChannelBuffer {
	if x, ok := x.GetPayload().(*Envelope_JoinChannelBuffer); ok {
		return x.JoinChannelBuffer
	}
	return nil
}

func (x *Envelope) GetJoinChannelBufferResponse() *JoinChannelBufferResponse {
	if x, ok := x.GetPayload().(*Envelope_JoinChannelBufferResponse); ok {
		return x.JoinChannelBufferResponse
	}
	return nil
}

func (x *Envelope) GetUpdateChannelBuffer() *UpdateChannelBuffer {
	if x, ok := x.GetPayload().(*Envelope_UpdateChannelBuffer); ok {
		return x.UpdateChannelBuffer
	}
	return nil
}

func (x *Envelope) GetLeaveChannelBuffer() *LeaveChannelBuffer {
	if x, ok := x.GetPayload().(*Envelope_LeaveChannelBuffer); ok {
		return x.LeaveChannelBuffer
	}
	return nil
}

func (x *Envelope) GetUpdateChannelBufferCollaborators() *UpdateChannelBufferCollaborators {
	if x, ok := x.GetPayload().(*Envelope_UpdateChannelBufferCollaborators); ok {
		return x.UpdateChannelBufferCollaborators
	}
	return nil
}

func (x *Envelope) GetRejoinChannelBuffers() *RejoinChannelBuffers {
	if x, ok := x.GetPayload().(*Envelope_RejoinChannelBuffers); ok {
		return x.RejoinChannelBuffers
	}
	return nil
}

func (x *Envelope) GetRejoinChannelBuffersResponse() *RejoinChannelBuffersResponse {
	if x, ok := x.GetPayload().(*Envelope_RejoinChannelBuffersResponse); ok {
		return x.RejoinChannelBuffersResponse
	}
	return nil
}

func (x *Envelope) GetAckBufferOperation() *AckBufferOperation {
	if x, ok := x.GetPayload().(*Envelope_AckBufferOperation); ok {
		return x.AckBufferOperation
	}
	return nil
}

func (x *Envelope) GetJoinChannelChat() *JoinChannelChat {
	if x, ok := x.GetPayload().(*Envelope_JoinChannelChat); ok {
		return x.JoinChannelChat
	}
	return nil
}

func (x *Envelope) GetJoinChannelChatResponse() *JoinChannelChatResponse {
	if x, ok := x.GetPayload().(*Envelope_JoinChannelChatResponse); ok {
		return x.JoinChannelChatResponse
	}
	return nil
}

func (x *Envelope) GetLeaveChannelChat() *LeaveChannelChat {
	if x, ok := x.GetPayload().(*Envelope_LeaveChannelChat); ok {
		return x.LeaveChannelChat
	}
	return nil
}

func (x *Envelope) GetSendChannelMessage() *SendChannelMessage {
	if x, ok := x.GetPayload().(*Envelope_SendChannelMessage); ok {
		return x.SendChannelMessage
	}
	return nil
}

func (x *Envelope) GetSendChannelMessageResponse() *SendChannelMessageResponse {
	if x, ok := x.GetPayload().(*Envelope_SendChannelMessageResponse); ok {
		return x.SendChannelMessageResponse
	}
	return nil
}

func (x *Envelope) GetChannelMessageSent() *ChannelMessageSent {
	if x, ok := x.GetPayload().(*Envelope_ChannelMessageSent); ok {
		return x.ChannelMessageSent
	}
	return nil
}

func (x *Envelope) GetGetChannelMessages() *GetChannelMessages {
	if x, ok := x.GetPayload().(*Envelope_GetChannelMessages); ok {
		return x.GetChannelMessages
	}
	return nil
}

func (x *Envelope) GetGetChannelMessagesResponse() *GetChannelMessagesResponse {
	if x, ok := x.GetPayload().(*Envelope_GetChannelMessagesResponse); ok {
		return x.GetChannelMessagesResponse
	}
	return nil
}

func (x *Envelope) GetRemoveChannelMessage() *RemoveChannelMessage {
	if x, ok := x.GetPayload().(*Envelope_RemoveChannelMessage); ok {
		return x.RemoveChannelMessage
	}
	return nil
}

func (x *Envelope) GetAckChannelMessage() *AckChannelMessage {
	if x, ok := x.GetPayload().(*Envelope_AckChannelMessage); ok {
		return x.AckChannelMessage
	}
	return nil
}

func (x *Envelope) GetGetChannelMessagesById() *GetChannelMessagesById {
	if x, ok := x.GetPayload().(*Envelope_GetChannelMessagesById); ok {
		return x.GetChannelMessagesById
	}
	return nil
}

func (x *Envelope) GetMoveChannel() *MoveChannel {
	if x, ok := x.GetPayload().(*Envelope_MoveChannel); ok {
		return x.MoveChannel
	}
	return nil
}

func (x *Envelope) GetSetChannelVisibility() *SetChannelVisibility {
	if x, ok := x.GetPayload().(*Envelope_SetChannelVisibility); ok {
		return x.SetChannelVisibility
	}
	return nil
}

func (x *Envelope) GetAddNotification() *AddNotification {
	if x, ok := x.GetPayload().(*Envelope_AddNotification); ok {
		return x.AddNotification
	}
	return nil
}

func (x *Envelope) GetGetNotifications() *GetNotifications {
	if x, ok := x.GetPayload().(*Envelope_GetNotifications); ok {
		return x.GetNotifications
	}
	return nil
}

func (x *Envelope) GetGetNotificationsResponse() *GetNotificationsResponse {
	if x, ok := x.GetPayload().(*Envelope_GetNotificationsResponse); ok {
		return x.GetNotificationsResponse
	}
	return nil
}

func (x *Envelope) GetDeleteNotification() *DeleteNotification {
	if x, ok := x.GetPayload().(*Envelope_DeleteNotification); ok {
		return x.DeleteNotification
	}
	return nil
}

func (x *Envelope) GetMarkNotificationRead() *MarkNotificationRead {
	if x, ok := x.GetPayload().(*Envelope_MarkNotificationRead); ok {
		return x.MarkNotificationRead
	}
	return nil
}

func (x *Envelope) GetLspExtExpandMacro() *LspExtExpandMacro {
	if x, ok := x.GetPayload().(*Envelope_LspExtExpandMacro); ok {
		return x.LspExtExpandMacro
	}
	return nil
}

func (x *Envelope) GetLspExtExpandMacroResponse() *LspExtExpandMacroResponse {
	if x, ok := x.GetPayload().(*Envelope_LspExtExpandMacroResponse); ok {
		return x.LspExtExpandMacroResponse
	}
	return nil
}

func (x *Envelope) GetSetRoomParticipantRole() *SetRoomParticipantRole {
	if x, ok := x.GetPayload().(*Envelope_SetRoomParticipantRole); ok {
		return x.SetRoomParticipantRole
	}
	return nil
}

func (x *Envelope) GetUpdateUserChannels() *UpdateUserChannels {
	if x, ok := x.GetPayload().(*Envelope_UpdateUserChannels); ok {
		return x.UpdateUserChannels
	}
	return nil
}

func (x *Envelope) GetGetImplementation() *GetImplementation {
	if x, ok := x.GetPayload().(*Envelope_GetImplementation); ok {
		return x.GetImplementation
	}
	return nil
}

func (x *Envelope) GetGetImplementationResponse() *GetImplementationResponse {
	if x, ok := x.GetPayload().(*Envelope_GetImplementationResponse); ok {
		return x.GetImplementationResponse
	}
	return nil
}

func (x *Envelope) GetUpdateChannelMessage() *UpdateChannelMessage {
	if x, ok := x.GetPayload().(*Envelope_UpdateChannelMessage); ok {
		return x.UpdateChannelMessage
	}
	return nil
}

func (x *Envelope) GetChannelMessageUpdate() *ChannelMessageUpdate {
	if x, ok := x.GetPayload().(*Envelope_ChannelMessageUpdate); ok {
		return x.ChannelMessageUpdate
	}
	return nil
}

func (x *Envelope) GetBlameBuffer() *BlameBuffer {
	if x, ok := x.GetPayload().(*Envelope_BlameBuffer); ok {
		return x.BlameBuffer
	}
	return nil
}

func (x *Envelope) GetBlameBufferResponse() *BlameBufferResponse {
	if x, ok := x.GetPayload().(*Envelope_BlameBufferResponse); ok {
		return x.BlameBufferResponse
	}
	return nil
}

func (x *Envelope) GetUpdateNotification() *UpdateNotification {
	if x, ok := x.GetPayload().(*Envelope_UpdateNotification); ok {
		return x.UpdateNotification
	}
	return nil
}

func (x *Envelope) GetMultiLspQuery() *MultiLspQuery {
	if x, ok := x.GetPayload().(*Envelope_MultiLspQuery); ok {
		return x.MultiLspQuery
	}
	return nil
}

func (x *Envelope) GetMultiLspQueryResponse() *MultiLspQueryResponse {
	if x, ok := x.GetPayload().(*Envelope_MultiLspQueryResponse); ok {
		return x.MultiLspQueryResponse
	}
	return nil
}

func (x *Envelope) GetRestartLanguageServers() *RestartLanguageServers {
	if x, ok := x.GetPayload().(*Envelope_RestartLanguageServers); ok {
		return x.RestartLanguageServers
	}
	return nil
}

func (x *Envelope) GetRejoinRemoteProjects() *RejoinRemoteProjects {
	if x, ok := x.GetPayload().(*Envelope_RejoinRemoteProjects); ok {
		return x.RejoinRemoteProjects
	}
	return nil
}

func (x *Envelope) GetRejoinRemoteProjectsResponse() *RejoinRemoteProjectsResponse {
	if x, ok := x.GetPayload().(*Envelope_RejoinRemoteProjectsResponse); ok {
		return x.RejoinRemoteProjectsResponse
	}
	return nil
}

func (x *Envelope) GetOpenNewBuffer() *OpenNewBuffer {
	if x, ok := x.GetPayload().(*Envelope_OpenNewBuffer); ok {
		return x.OpenNewBuffer
	}
	return nil
}

func (x *Envelope) GetGetSupermavenApiKey() *GetSupermavenApiKey {
	if x, ok := x.GetPayload().(*Envelope_GetSupermavenApiKey); ok {
		return x.GetSupermavenApiKey
	}
	return nil
}

func (x *Envelope) GetGetSupermavenApiKeyResponse() *GetSupermavenApiKeyResponse {
	if x, ok := x.GetPayload().(*Envelope_GetSupermavenApiKeyResponse); ok {
		return x.GetSupermavenApiKeyResponse
	}
	return nil
}

func (x *Envelope) GetTaskContextForLocation() *TaskContextForLocation {
	if x, ok := x.GetPayload().(*Envelope_TaskContextForLocation); ok {
		return x.TaskContextForLocation
	}
	return nil
}

func (x *Envelope) GetTaskContext() *TaskContext {
	if x, ok := x.GetPayload().(*Envelope_TaskContext); ok {
		return x.TaskContext
	}
	return nil
}

func (x *Envelope) GetLinkedEditingRange() *LinkedEditingRange {
	if x, ok := x.GetPayload().(*Envelope_LinkedEditingRange); ok {
		return x.LinkedEditingRange
	}
	return nil
}

func (x *Envelope) GetLinkedEditingRangeResponse() *LinkedEditingRangeResponse {
	if x, ok := x.GetPayload().(*Envelope_LinkedEditingRangeResponse); ok {
		return x.LinkedEditingRangeResponse
	}
	return nil
}

func (x *Envelope) GetAdvertiseContexts() *AdvertiseContexts {
	if x, ok := x.GetPayload().(*Envelope_AdvertiseContexts); ok {
		return x.AdvertiseContexts
	}
	return nil
}

func (x *Envelope) GetOpenContext() *OpenContext {
	if x, ok := x.GetPayload().(*Envelope_OpenContext); ok {
		return x.OpenContext
	}
	return nil
}

func (x *Envelope) GetOpenContextResponse() *OpenContextResponse {
	if x, ok := x.GetPayload().(*Envelope_OpenContextResponse); ok {
		return x.OpenContextResponse
	}
	return nil
}

func (x *Envelope) GetCreateContext() *CreateContext {
	if x, ok := x.GetPayload().(*Envelope_CreateContext); ok {
		return x.CreateContext
	}
	return nil
}

func (x *Envelope) GetCreateContextResponse() *CreateContextResponse {
	if x, ok := x.GetPayload().(*Envelope_CreateContextResponse); ok {
		return x.CreateContextResponse
	}
	return nil
}

func (x *Envelope) GetUpdateContext() *UpdateContext {
	if x, ok := x.GetPayload().(*Envelope_UpdateContext); ok {
		return x.UpdateContext
	}
	return nil
}

func (x *Envelope) GetSynchronizeContexts() *SynchronizeContexts {
	if x, ok := x.GetPayload().(*Envelope_SynchronizeContexts); ok {
		return x.SynchronizeContexts
	}
	return nil
}

func (x *Envelope) GetSynchronizeContextsResponse() *SynchronizeContextsResponse {
	if x, ok := x.GetPayload().(*Envelope_SynchronizeContextsResponse); ok {
		return x.SynchronizeContextsResponse
	}
	return nil
}

func (x *Envelope) GetGetSignatureHelp() *GetSignatureHelp {
	if x, ok := x.GetPayload().(*Envelope_GetSignatureHelp); ok {
		return x.GetSignatureHelp
	}
	return nil
}

func (x *Envelope) GetGetSignatureHelpResponse() *GetSignatureHelpResponse {
	if x, ok := x.GetPayload().(*Envelope_GetSignatureHelpResponse); ok {
		return x.GetSignatureHelpResponse
	}
	return nil
}

func (x *Envelope) GetListRemoteDirectory() *ListRemoteDirectory {
	if x, ok := x.GetPayload().(*Envelope_ListRemoteDirectory); ok {
		return x.ListRemoteDirectory
	}
	return nil
}

func (x *Envelope) GetListRemoteDirectoryResponse() *ListRemoteDirectoryResponse {
	if x, ok := x.GetPayload().(*Envelope_ListRemoteDirectoryResponse); ok {
		return x.ListRemoteDirectoryResponse
	}
	return nil
}

func (x *Envelope) GetAddWorktree() *AddWorktree {
	if x, ok := x.GetPayload().(*Envelope_AddWorktree); ok {
		return x.AddWorktree
	}
	return nil
}

func (x *Envelope) GetAddWorktreeResponse() *AddWorktreeResponse {
	if x, ok := x.GetPayload().(*Envelope_AddWorktreeResponse); ok {
		return x.AddWorktreeResponse
	}
	return nil
}

func (x *Envelope) GetGetLlmToken() *GetLlmToken {
	if x, ok := x.GetPayload().(*Envelope_GetLlmToken); ok {
		return x.GetLlmToken
	}
	return nil
}

func (x *Envelope) GetGetLlmTokenResponse() *GetLlmTokenResponse {
	if x, ok := x.GetPayload().(*Envelope_GetLlmTokenResponse); ok {
		return x.GetLlmTokenResponse
	}
	return nil
}

func (x *Envelope) GetRefreshLlmToken() *RefreshLlmToken {
	if x, ok := x.GetPayload().(*Envelope_RefreshLlmToken); ok {
		return x.RefreshLlmToken
	}
	return nil
}

func (x *Envelope) GetLspExtSwitchSourceHeader() *LspExtSwitchSourceHeader {
	if x, ok := x.GetPayload().(*Envelope_LspExtSwitchSourceHeader); ok {
		return x.LspExtSwitchSourceHeader
	}
	return nil
}

func (x *Envelope) GetLspExtSwitchSourceHeaderResponse() *LspExtSwitchSourceHeaderResponse {
	if x, ok := x.GetPayload().(*Envelope_LspExtSwitchSourceHeaderResponse); ok {
		return x.LspExtSwitchSourceHeaderResponse
	}
	return nil
}

func (x *Envelope) GetFindSearchCandidates() *FindSearchCandidates {
	if x, ok := x.GetPayload().(*Envelope_FindSearchCandidates); ok {
		return x.FindSearchCandidates
	}
	return nil
}

func (x *Envelope) GetFindSearchCandidatesResponse() *FindSearchCandidatesResponse {
	if x, ok := x.GetPayload().(*Envelope_FindSearchCandidatesResponse); ok {
		return x.FindSearchCandidatesResponse
	}
	return nil
}

func (x *Envelope) GetCloseBuffer() *CloseBuffer {
	if x, ok := x.GetPayload().(*Envelope_CloseBuffer); ok {
		return x.CloseBuffer
	}
	return nil
}

func (x *Envelope) GetShutdownRemoteServer() *ShutdownRemoteServer {
	if x, ok := x.GetPayload().(*Envelope_ShutdownRemoteServer); ok {
		return x.ShutdownRemoteServer
	}
	return nil
}

func (x *Envelope) GetRemoveWorktree() *RemoveWorktree {
	if x, ok := x.GetPayload().(*Envelope_RemoveWorktree); ok {
		return x.RemoveWorktree
	}
	return nil
}

func (x *Envelope) GetLanguageServerLog() *LanguageServerLog {
	if x, ok := x.GetPayload().(*Envelope_LanguageServerLog); ok {
		return x.LanguageServerLog
	}
	return nil
}

func (x *Envelope) GetToast() *Toast {
	if x, ok := x.GetPayload().(*Envelope_Toast); ok {
		return x.Toast
	}
	return nil
}

func (x *Envelope) GetHideToast() *HideToast {
	if x, ok := x.GetPayload().(*Envelope_HideToast); ok {
		return x.HideToast
	}
	return nil
}

func (x *Envelope) GetOpenServerSettings() *OpenServerSettings {
	if x, ok := x.GetPayload().(*Envelope_OpenServerSettings); ok {
		return x.OpenServerSettings
	}
	return nil
}

func (x *Envelope) GetGetPermalinkToLine() *GetPermalinkToLine {
	if x, ok := x.GetPayload().(*Envelope_GetPermalinkToLine); ok {
		return x.GetPermalinkToLine
	}
	return nil
}

func (x *Envelope) GetGetPermalinkToLineResponse() *GetPermalinkToLineResponse {
	if x, ok := x.GetPayload().(*Envelope_GetPermalinkToLineResponse); ok {
		return x.GetPermalinkToLineResponse
	}
	return nil
}

func (x *Envelope) GetFlushBufferedMessages() *FlushBufferedMessages {
	if x, ok := x.GetPayload().(*Envelope_FlushBufferedMessages); ok {
		return x.FlushBufferedMessages
	}
	return nil
}

func (x *Envelope) GetLanguageServerPromptRequest() *LanguageServerPromptRequest {
	if x, ok := x.GetPayload().(*Envelope_LanguageServerPromptRequest); ok {
		return x.LanguageServerPromptRequest
	}
	return nil
}

func (x *Envelope) GetLanguageServerPromptResponse() *LanguageServerPromptResponse {
	if x, ok := x.GetPayload().(*Envelope_LanguageServerPromptResponse); ok {
		return x.LanguageServerPromptResponse
	}
	return nil
}

func (x *Envelope) GetGitBranchesResponse() *GitBranchesResponse {
	if x, ok := x.GetPayload().(*Envelope_GitBranchesResponse); ok {
		return x.GitBranchesResponse
	}
	return nil
}

func (x *Envelope) GetUpdateGitBranch() *UpdateGitBranch {
	if x, ok := x.GetPayload().(*Envelope_UpdateGitBranch); ok {
		return x.UpdateGitBranch
	}
	return nil
}

func (x *Envelope) GetListToolchains() *ListToolchains {
	if x, ok := x.GetPayload().(*Envelope_ListToolchains); ok {
		return x.ListToolchains
	}
	return nil
}

func (x *Envelope) GetListToolchainsResponse() *ListToolchainsResponse {
	if x, ok := x.GetPayload().(*Envelope_ListToolchainsResponse); ok {
		return x.ListToolchainsResponse
	}
	return nil
}

func (x *Envelope) GetActivateToolchain() *ActivateToolchain {
	if x, ok := x.GetPayload().(*Envelope_ActivateToolchain); ok {
		return x.ActivateToolchain
	}
	return nil
}

func (x *Envelope) GetActiveToolchain() *ActiveToolchain {
	if x, ok := x.GetPayload().(*Envelope_ActiveToolchain); ok {
		return x.ActiveToolchain
	}
	return nil
}

func (x *Envelope) GetActiveToolchainResponse() *ActiveToolchainResponse {
	if x, ok := x.GetPayload().(*Envelope_ActiveToolchainResponse); ok {
		return x.ActiveToolchainResponse
	}
	return nil
}

func (x *Envelope) GetGetPathMetadata() *GetPathMetadata {
	if x, ok := x.GetPayload().(*Envelope_GetPathMetadata); ok {
		return x.GetPathMetadata
	}
	return nil
}

func (x *Envelope) GetGetPathMetadataResponse() *GetPathMetadataResponse {
	if x, ok := x.GetPayload().(*Envelope_GetPathMetadataResponse); ok {
		return x.GetPathMetadataResponse
	}
	return nil
}

func (x *Envelope) GetGetPanicFiles() *GetPanicFiles {
	if x, ok := x.GetPayload().(*Envelope_GetPanicFiles); ok {
		return x.GetPanicFiles
	}
	return nil
}

func (x *Envelope) GetGetPanicFilesResponse() *GetPanicFilesResponse {
	if x, ok := x.GetPayload().(*Envelope_GetPanicFilesResponse); ok {
		return x.GetPanicFilesResponse
	}
	return nil
}

func (x *Envelope) GetCancelLanguageServerWork() *CancelLanguageServerWork {
	if x, ok := x.GetPayload().(*Envelope_CancelLanguageServerWork); ok {
		return x.CancelLanguageServerWork
	}
	return nil
}

func (x *Envelope) GetLspExtOpenDocs() *LspExtOpenDocs {
	if x, ok := x.GetPayload().(*Envelope_LspExtOpenDocs); ok {
		return x.LspExtOpenDocs
	}
	return nil
}

func (x *Envelope) GetLspExtOpenDocsResponse() *LspExtOpenDocsResponse {
	if x, ok := x.GetPayload().(*Envelope_LspExtOpenDocsResponse); ok {
		return x.LspExtOpenDocsResponse
	}
	return nil
}

func (x *Envelope) GetSyncExtensions() *SyncExtensions {
	if x, ok := x.GetPayload().(*Envelope_SyncExtensions); ok {
		return x.SyncExtensions
	}
	return nil
}

func (x *Envelope) GetSyncExtensionsResponse() *SyncExtensionsResponse {
	if x, ok := x.GetPayload().(*Envelope_SyncExtensionsResponse); ok {
		return x.SyncExtensionsResponse
	}
	return nil
}

func (x *Envelope) GetInstallExtension() *InstallExtension {
	if x, ok := x.GetPayload().(*Envelope_InstallExtension); ok {
		return x.InstallExtension
	}
	return nil
}

func (x *Envelope) GetOpenUnstagedDiff() *OpenUnstagedDiff {
	if x, ok := x.GetPayload().(*Envelope_OpenUnstagedDiff); ok {
		return x.OpenUnstagedDiff
	}
	return nil
}

func (x *Envelope) GetOpenUnstagedDiffResponse() *OpenUnstagedDiffResponse {
	if x, ok := x.GetPayload().(*Envelope_OpenUnstagedDiffResponse); ok {
		return x.OpenUnstagedDiffResponse
	}
	return nil
}

func (x *Envelope) GetRegisterBufferWithLanguageServers() *RegisterBufferWithLanguageServers {
	if x, ok := x.GetPayload().(*Envelope_RegisterBufferWithLanguageServers); ok {
		return x.RegisterBufferWithLanguageServers
	}
	return nil
}

func (x *Envelope) GetStage() *Stage {
	if x, ok := x.GetPayload().(*Envelope_Stage); ok {
		return x.Stage
	}
	return nil
}

func (x *Envelope) GetUnstage() *Unstage {
	if x, ok := x.GetPayload().(*Envelope_Unstage); ok {
		return x.Unstage
	}
	return nil
}

func (x *Envelope) GetCommit() *Commit {
	if x, ok := x.GetPayload().(*Envelope_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *Envelope) GetOpenCommitMessageBuffer() *OpenCommitMessageBuffer {
	if x, ok := x.GetPayload().(*Envelope_OpenCommitMessageBuffer); ok {
		return x.OpenCommitMessageBuffer
	}
	return nil
}

func (x *Envelope) GetOpenUncommittedDiff() *OpenUncommittedDiff {
	if x, ok := x.GetPayload().(*Envelope_OpenUncommittedDiff); ok {
		return x.OpenUncommittedDiff
	}
	return nil
}

func (x *Envelope) GetOpenUncommittedDiffResponse() *OpenUncommittedDiffResponse {
	if x, ok := x.GetPayload().(*Envelope_OpenUncommittedDiffResponse); ok {
		return x.OpenUncommittedDiffResponse
	}
	return nil
}

func (x *Envelope) GetSetIndexText() *SetIndexText {
	if x, ok := x.GetPayload().(*Envelope_SetIndexText); ok {
		return x.SetIndexText
	}
	return nil
}

func (x *Envelope) GetGitShow() *GitShow {
	if x, ok := x.GetPayload().(*Envelope_GitShow); ok {
		return x.GitShow
	}
	return nil
}

func (x *Envelope) GetGitReset() *GitReset {
	if x, ok := x.GetPayload().(*Envelope_GitReset); ok {
		return x.GitReset
	}
	return nil
}

func (x *Envelope) GetGitCommitDetails() *GitCommitDetails {
	if x, ok := x.GetPayload().(*Envelope_GitCommitDetails); ok {
		return x.GitCommitDetails
	}
	return nil
}

func (x *Envelope) GetGitCheckoutFiles() *GitCheckoutFiles {
	if x, ok := x.GetPayload().(*Envelope_GitCheckoutFiles); ok {
		return x.GitCheckoutFiles
	}
	return nil
}

func (x *Envelope) GetPush() *Push {
	if x, ok := x.GetPayload().(*Envelope_Push); ok {
		return x.Push
	}
	return nil
}

func (x *Envelope) GetFetch() *Fetch {
	if x, ok := x.GetPayload().(*Envelope_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (x *Envelope) GetGetRemotes() *GetRemotes {
	if x, ok := x.GetPayload().(*Envelope_GetRemotes); ok {
		return x.GetRemotes
	}
	return nil
}

func (x *Envelope) GetGetRemotesResponse() *GetRemotesResponse {
	if x, ok := x.GetPayload().(*Envelope_GetRemotesResponse); ok {
		return x.GetRemotesResponse
	}
	return nil
}

func (x *Envelope) GetPull() *Pull {
	if x, ok := x.GetPayload().(*Envelope_Pull); ok {
		return x.Pull
	}
	return nil
}

func (x *Envelope) GetApplyCodeActionKind() *ApplyCodeActionKind {
	if x, ok := x.GetPayload().(*Envelope_ApplyCodeActionKind); ok {
		return x.ApplyCodeActionKind
	}
	return nil
}

func (x *Envelope) GetApplyCodeActionKindResponse() *ApplyCodeActionKindResponse {
	if x, ok := x.GetPayload().(*Envelope_ApplyCodeActionKindResponse); ok {
		return x.ApplyCodeActionKindResponse
	}
	return nil
}

func (x *Envelope) GetRemoteMessageResponse() *RemoteMessageResponse {
	if x, ok := x.GetPayload().(*Envelope_RemoteMessageResponse); ok {
		return x.RemoteMessageResponse
	}
	return nil
}

func (x *Envelope) GetGitGetBranches() *GitGetBranches {
	if x, ok := x.GetPayload().(*Envelope_GitGetBranches); ok {
		return x.GitGetBranches
	}
	return nil
}

func (x *Envelope) GetGitCreateBranch() *GitCreateBranch {
	if x, ok := x.GetPayload().(*Envelope_GitCreateBranch); ok {
		return x.GitCreateBranch
	}
	return nil
}

func (x *Envelope) GetGitChangeBranch() *GitChangeBranch {
	if x, ok := x.GetPayload().(*Envelope_GitChangeBranch); ok {
		return x.GitChangeBranch
	}
	return nil
}

func (x *Envelope) GetCheckForPushedCommits() *CheckForPushedCommits {
	if x, ok := x.GetPayload().(*Envelope_CheckForPushedCommits); ok {
		return x.CheckForPushedCommits
	}
	return nil
}

func (x *Envelope) GetCheckForPushedCommitsResponse() *CheckForPushedCommitsResponse {
	if x, ok := x.GetPayload().(*Envelope_CheckForPushedCommitsResponse); ok {
		return x.CheckForPushedCommitsResponse
	}
	return nil
}

func (x *Envelope) GetAskPassRequest() *AskPassRequest {
	if x, ok := x.GetPayload().(*Envelope_AskPassRequest); ok {
		return x.AskPassRequest
	}
	return nil
}

func (x *Envelope) GetAskPassResponse() *AskPassResponse {
	if x, ok := x.GetPayload().(*Envelope_AskPassResponse); ok {
		return x.AskPassResponse
	}
	return nil
}

func (x *Envelope) GetGitDiff() *GitDiff {
	if x, ok := x.GetPayload().(*Envelope_GitDiff); ok {
		return x.GitDiff
	}
	return nil
}

func (x *Envelope) GetGitDiffResponse() *GitDiffResponse {
	if x, ok := x.GetPayload().(*Envelope_GitDiffResponse); ok {
		return x.GitDiffResponse
	}
	return nil
}

func (x *Envelope) GetGitInit() *GitInit {
	if x, ok := x.GetPayload().(*Envelope_GitInit); ok {
		return x.GitInit
	}
	return nil
}

func (x *Envelope) GetCodeLens() *CodeLens {
	if x, ok := x.GetPayload().(*Envelope_CodeLens); ok {
		return x.CodeLens
	}
	return nil
}

func (x *Envelope) GetGetCodeLens_() *GetCodeLens {
	if x, ok := x.GetPayload().(*Envelope_GetCodeLens_); ok {
		return x.GetCodeLens_
	}
	return nil
}

func (x *Envelope) GetGetCodeLensResponse() *GetCodeLensResponse {
	if x, ok := x.GetPayload().(*Envelope_GetCodeLensResponse); ok {
		return x.GetCodeLensResponse
	}
	return nil
}

func (x *Envelope) GetRefreshCodeLens() *RefreshCodeLens {
	if x, ok := x.GetPayload().(*Envelope_RefreshCodeLens); ok {
		return x.RefreshCodeLens
	}
	return nil
}

func (x *Envelope) GetToggleBreakpoint() *ToggleBreakpoint {
	if x, ok := x.GetPayload().(*Envelope_ToggleBreakpoint); ok {
		return x.ToggleBreakpoint
	}
	return nil
}

func (x *Envelope) GetBreakpointsForFile() *BreakpointsForFile {
	if x, ok := x.GetPayload().(*Envelope_BreakpointsForFile); ok {
		return x.BreakpointsForFile
	}
	return nil
}

func (x *Envelope) GetUpdateRepository() *UpdateRepository {
	if x, ok := x.GetPayload().(*Envelope_UpdateRepository); ok {
		return x.UpdateRepository
	}
	return nil
}

func (x *Envelope) GetRemoveRepository() *RemoveRepository {
	if x, ok := x.GetPayload().(*Envelope_RemoveRepository); ok {
		return x.RemoveRepository
	}
	return nil
}

func (x *Envelope) GetGetDocumentSymbols() *GetDocumentSymbols {
	if x, ok := x.GetPayload().(*Envelope_GetDocumentSymbols); ok {
		return x.GetDocumentSymbols
	}
	return nil
}

func (x *Envelope) GetGetDocumentSymbolsResponse() *GetDocumentSymbolsResponse {
	if x, ok := x.GetPayload().(*Envelope_GetDocumentSymbolsResponse); ok {
		return x.GetDocumentSymbolsResponse
	}
	return nil
}

func (x *Envelope) GetLanguageServerIdForName() *LanguageServerIdForName {
	if x, ok := x.GetPayload().(*Envelope_LanguageServerIdForName); ok {
		return x.LanguageServerIdForName
	}
	return nil
}

func (x *Envelope) GetLanguageServerIdForNameResponse() *LanguageServerIdForNameResponse {
	if x, ok := x.GetPayload().(*Envelope_LanguageServerIdForNameResponse); ok {
		return x.LanguageServerIdForNameResponse
	}
	return nil
}

func (x *Envelope) GetLoadCommitDiff() *LoadCommitDiff {
	if x, ok := x.GetPayload().(*Envelope_LoadCommitDiff); ok {
		return x.LoadCommitDiff
	}
	return nil
}

func (x *Envelope) GetLoadCommitDiffResponse() *LoadCommitDiffResponse {
	if x, ok := x.GetPayload().(*Envelope_LoadCommitDiffResponse); ok {
		return x.LoadCommitDiffResponse
	}
	return nil
}

func (x *Envelope) GetStopLanguageServers() *StopLanguageServers {
	if x, ok := x.GetPayload().(*Envelope_StopLanguageServers); ok {
		return x.StopLanguageServers
	}
	return nil
}

func (x *Envelope) GetLspExtRunnables() *LspExtRunnables {
	if x, ok := x.GetPayload().(*Envelope_LspExtRunnables); ok {
		return x.LspExtRunnables
	}
	return nil
}

func (x *Envelope) GetLspExtRunnablesResponse() *LspExtRunnablesResponse {
	if x, ok := x.GetPayload().(*Envelope_LspExtRunnablesResponse); ok {
		return x.LspExtRunnablesResponse
	}
	return nil
}

func (x *Envelope) GetGetDebugAdapterBinary() *GetDebugAdapterBinary {
	if x, ok := x.GetPayload().(*Envelope_GetDebugAdapterBinary); ok {
		return x.GetDebugAdapterBinary
	}
	return nil
}

func (x *Envelope) GetDebugAdapterBinary_() *DebugAdapterBinary {
	if x, ok := x.GetPayload().(*Envelope_DebugAdapterBinary_); ok {
		return x.DebugAdapterBinary_
	}
	return nil
}

func (x *Envelope) GetRunDebugLocators() *RunDebugLocators {
	if x, ok := x.GetPayload().(*Envelope_RunDebugLocators); ok {
		return x.RunDebugLocators
	}
	return nil
}

func (x *Envelope) GetDebugRequest() *DebugRequest {
	if x, ok := x.GetPayload().(*Envelope_DebugRequest); ok {
		return x.DebugRequest
	}
	return nil
}

func (x *Envelope) GetLspExtGoToParentModule() *LspExtGoToParentModule {
	if x, ok := x.GetPayload().(*Envelope_LspExtGoToParentModule); ok {
		return x.LspExtGoToParentModule
	}
	return nil
}

func (x *Envelope) GetLspExtGoToParentModuleResponse() *LspExtGoToParentModuleResponse {
	if x, ok := x.GetPayload().(*Envelope_LspExtGoToParentModuleResponse); ok {
		return x.LspExtGoToParentModuleResponse
	}
	return nil
}

func (x *Envelope) GetLspExtCancelFlycheck() *LspExtCancelFlycheck {
	if x, ok := x.GetPayload().(*Envelope_LspExtCancelFlycheck); ok {
		return x.LspExtCancelFlycheck
	}
	return nil
}

func (x *Envelope) GetLspExtRunFlycheck() *LspExtRunFlycheck {
	if x, ok := x.GetPayload().(*Envelope_LspExtRunFlycheck); ok {
		return x.LspExtRunFlycheck
	}
	return nil
}

func (x *Envelope) GetLspExtClearFlycheck() *LspExtClearFlycheck {
	if x, ok := x.GetPayload().(*Envelope_LspExtClearFlycheck); ok {
		return x.LspExtClearFlycheck
	}
	return nil
}

func (x *Envelope) GetLogToDebugConsole() *LogToDebugConsole {
	if x, ok := x.GetPayload().(*Envelope_LogToDebugConsole); ok {
		return x.LogToDebugConsole
	}
	return nil
}

type isEnvelope_Payload interface {
	isEnvelope_Payload()
}

type Envelope_Hello struct {
	Hello *Hello `protobuf:"bytes,4,opt,name=hello,proto3,oneof"`
}

type Envelope_Ack struct {
	Ack *Ack `protobuf:"bytes,5,opt,name=ack,proto3,oneof"`
}

type Envelope_Error struct {
	Error *Error `protobuf:"bytes,6,opt,name=error,proto3,oneof"`
}

type Envelope_Ping struct {
	Ping *Ping `protobuf:"bytes,7,opt,name=ping,proto3,oneof"`
}

type Envelope_Test struct {
	Test *Test `protobuf:"bytes,8,opt,name=test,proto3,oneof"`
}

type Envelope_EndStream struct {
	EndStream *EndStream `protobuf:"bytes,165,opt,name=end_stream,json=endStream,proto3,oneof"`
}

type Envelope_CreateRoom struct {
	CreateRoom *CreateRoom `protobuf:"bytes,9,opt,name=create_room,json=createRoom,proto3,oneof"`
}

type Envelope_CreateRoomResponse struct {
	CreateRoomResponse *CreateRoomResponse `protobuf:"bytes,10,opt,name=create_room_response,json=createRoomResponse,proto3,oneof"`
}

type Envelope_JoinRoom struct {
	JoinRoom *JoinRoom `protobuf:"bytes,11,opt,name=join_room,json=joinRoom,proto3,oneof"`
}

type Envelope_JoinRoomResponse struct {
	JoinRoomResponse *JoinRoomResponse `protobuf:"bytes,12,opt,name=join_room_response,json=joinRoomResponse,proto3,oneof"`
}

type Envelope_RejoinRoom struct {
	RejoinRoom *RejoinRoom `protobuf:"bytes,13,opt,name=rejoin_room,json=rejoinRoom,proto3,oneof"`
}

type Envelope_RejoinRoomResponse struct {
	RejoinRoomResponse *RejoinRoomResponse `protobuf:"bytes,14,opt,name=rejoin_room_response,json=rejoinRoomResponse,proto3,oneof"`
}

type Envelope_LeaveRoom struct {
	LeaveRoom *LeaveRoom `protobuf:"bytes,15,opt,name=leave_room,json=leaveRoom,proto3,oneof"`
}

type Envelope_Call struct {
	Call *Call `protobuf:"bytes,16,opt,name=call,proto3,oneof"`
}

type Envelope_IncomingCall struct {
	IncomingCall *IncomingCall `protobuf:"bytes,17,opt,name=incoming_call,json=incomingCall,proto3,oneof"`
}

type Envelope_CallCanceled struct {
	CallCanceled *CallCanceled `protobuf:"bytes,18,opt,name=call_canceled,json=callCanceled,proto3,oneof"`
}

type Envelope_CancelCall struct {
	CancelCall *CancelCall `protobuf:"bytes,19,opt,name=cancel_call,json=cancelCall,proto3,oneof"`
}

type Envelope_DeclineCall struct {
	DeclineCall *DeclineCall `protobuf:"bytes,20,opt,name=decline_call,json=declineCall,proto3,oneof"`
}

type Envelope_UpdateParticipantLocation struct {
	UpdateParticipantLocation *UpdateParticipantLocation `protobuf:"bytes,21,opt,name=update_participant_location,json=updateParticipantLocation,proto3,oneof"`
}

type Envelope_RoomUpdated struct {
	RoomUpdated *RoomUpdated `protobuf:"bytes,22,opt,name=room_updated,json=roomUpdated,proto3,oneof"`
}

type Envelope_ShareProject struct {
	ShareProject *ShareProject `protobuf:"bytes,23,opt,name=share_project,json=shareProject,proto3,oneof"`
}

type Envelope_ShareProjectResponse struct {
	ShareProjectResponse *ShareProjectResponse `protobuf:"bytes,24,opt,name=share_project_response,json=shareProjectResponse,proto3,oneof"`
}

type Envelope_UnshareProject struct {
	UnshareProject *UnshareProject `protobuf:"bytes,25,opt,name=unshare_project,json=unshareProject,proto3,oneof"`
}

type Envelope_JoinProject struct {
	JoinProject *JoinProject `protobuf:"bytes,26,opt,name=join_project,json=joinProject,proto3,oneof"`
}

type Envelope_JoinProjectResponse struct {
	JoinProjectResponse *JoinProjectResponse `protobuf:"bytes,27,opt,name=join_project_response,json=joinProjectResponse,proto3,oneof"`
}

type Envelope_LeaveProject struct {
	LeaveProject *LeaveProject `protobuf:"bytes,28,opt,name=leave_project,json=leaveProject,proto3,oneof"`
}

type Envelope_AddProjectCollaborator struct {
	AddProjectCollaborator *AddProjectCollaborator `protobuf:"bytes,29,opt,name=add_project_collaborator,json=addProjectCollaborator,proto3,oneof"`
}

type Envelope_UpdateProjectCollaborator struct {
	UpdateProjectCollaborator *UpdateProjectCollaborator `protobuf:"bytes,30,opt,name=update_project_collaborator,json=updateProjectCollaborator,proto3,oneof"`
}

type Envelope_RemoveProjectCollaborator struct {
	RemoveProjectCollaborator *RemoveProjectCollaborator `protobuf:"bytes,31,opt,name=remove_project_collaborator,json=removeProjectCollaborator,proto3,oneof"`
}

type Envelope_GetDefinition struct {
	GetDefinition *GetDefinition `protobuf:"bytes,32,opt,name=get_definition,json=getDefinition,proto3,oneof"`
}

type Envelope_GetDefinitionResponse struct {
	GetDefinitionResponse *GetDefinitionResponse `protobuf:"bytes,33,opt,name=get_definition_response,json=getDefinitionResponse,proto3,oneof"`
}

type Envelope_GetDeclaration struct {
	GetDeclaration *GetDeclaration `protobuf:"bytes,237,opt,name=get_declaration,json=getDeclaration,proto3,oneof"`
}

type Envelope_GetDeclarationResponse struct {
	GetDeclarationResponse *GetDeclarationResponse `protobuf:"bytes,238,opt,name=get_declaration_response,json=getDeclarationResponse,proto3,oneof"`
}

type Envelope_GetTypeDefinition struct {
	GetTypeDefinition *GetTypeDefinition `protobuf:"bytes,34,opt,name=get_type_definition,json=getTypeDefinition,proto3,oneof"`
}

type Envelope_GetTypeDefinitionResponse struct {
	GetTypeDefinitionResponse *GetTypeDefinitionResponse `protobuf:"bytes,35,opt,name=get_type_definition_response,json=getTypeDefinitionResponse,proto3,oneof"`
}

type Envelope_GetReferences struct {
	GetReferences *GetReferences `protobuf:"bytes,36,opt,name=get_references,json=getReferences,proto3,oneof"`
}

type Envelope_GetReferencesResponse struct {
	GetReferencesResponse *GetReferencesResponse `protobuf:"bytes,37,opt,name=get_references_response,json=getReferencesResponse,proto3,oneof"`
}

type Envelope_GetDocumentHighlights struct {
	GetDocumentHighlights *GetDocumentHighlights `protobuf:"bytes,38,opt,name=get_document_highlights,json=getDocumentHighlights,proto3,oneof"`
}

type Envelope_GetDocumentHighlightsResponse struct {
	GetDocumentHighlightsResponse *GetDocumentHighlightsResponse `protobuf:"bytes,39,opt,name=get_document_highlights_response,json=getDocumentHighlightsResponse,proto3,oneof"`
}

type Envelope_GetProjectSymbols struct {
	GetProjectSymbols *GetProjectSymbols `protobuf:"bytes,40,opt,name=get_project_symbols,json=getProjectSymbols,proto3,oneof"`
}

type Envelope_GetProjectSymbolsResponse struct {
	GetProjectSymbolsResponse *GetProjectSymbolsResponse `protobuf:"bytes,41,opt,name=get_project_symbols_response,json=getProjectSymbolsResponse,proto3,oneof"`
}

type Envelope_OpenBufferForSymbol struct {
	OpenBufferForSymbol *OpenBufferForSymbol `protobuf:"bytes,42,opt,name=open_buffer_for_symbol,json=openBufferForSymbol,proto3,oneof"`
}

type Envelope_OpenBufferForSymbolResponse struct {
	OpenBufferForSymbolResponse *OpenBufferForSymbolResponse `protobuf:"bytes,43,opt,name=open_buffer_for_symbol_response,json=openBufferForSymbolResponse,proto3,oneof"`
}

type Envelope_UpdateProject struct {
	UpdateProject *UpdateProject `protobuf:"bytes,44,opt,name=update_project,json=updateProject,proto3,oneof"`
}

type Envelope_UpdateWorktree struct {
	UpdateWorktree *UpdateWorktree `protobuf:"bytes,45,opt,name=update_worktree,json=updateWorktree,proto3,oneof"`
}

type Envelope_CreateProjectEntry struct {
	CreateProjectEntry *CreateProjectEntry `protobuf:"bytes,46,opt,name=create_project_entry,json=createProjectEntry,proto3,oneof"`
}

type Envelope_RenameProjectEntry struct {
	RenameProjectEntry *RenameProjectEntry `protobuf:"bytes,47,opt,name=rename_project_entry,json=renameProjectEntry,proto3,oneof"`
}

type Envelope_CopyProjectEntry struct {
	CopyProjectEntry *CopyProjectEntry `protobuf:"bytes,48,opt,name=copy_project_entry,json=copyProjectEntry,proto3,oneof"`
}

type Envelope_DeleteProjectEntry struct {
	DeleteProjectEntry *DeleteProjectEntry `protobuf:"bytes,49,opt,name=delete_project_entry,json=deleteProjectEntry,proto3,oneof"`
}

type Envelope_ProjectEntryResponse struct {
	ProjectEntryResponse *ProjectEntryResponse `protobuf:"bytes,50,opt,name=project_entry_response,json=projectEntryResponse,proto3,oneof"`
}

type Envelope_ExpandProjectEntry struct {
	ExpandProjectEntry *ExpandProjectEntry `protobuf:"bytes,51,opt,name=expand_project_entry,json=expandProjectEntry,proto3,oneof"`
}

type Envelope_ExpandProjectEntryResponse struct {
	ExpandProjectEntryResponse *ExpandProjectEntryResponse `protobuf:"bytes,52,opt,name=expand_project_entry_response,json=expandProjectEntryResponse,proto3,oneof"`
}

type Envelope_ExpandAllForProjectEntry struct {
	ExpandAllForProjectEntry *ExpandAllForProjectEntry `protobuf:"bytes,291,opt,name=expand_all_for_project_entry,json=expandAllForProjectEntry,proto3,oneof"`
}

type Envelope_ExpandAllForProjectEntryResponse struct {
	ExpandAllForProjectEntryResponse *ExpandAllForProjectEntryResponse `protobuf:"bytes,292,opt,name=expand_all_for_project_entry_response,json=expandAllForProjectEntryResponse,proto3,oneof"`
}

type Envelope_UpdateDiagnosticSummary struct {
	UpdateDiagnosticSummary *UpdateDiagnosticSummary `protobuf:"bytes,53,opt,name=update_diagnostic_summary,json=updateDiagnosticSummary,proto3,oneof"`
}

type Envelope_StartLanguageServer struct {
	StartLanguageServer *StartLanguageServer `protobuf:"bytes,54,opt,name=start_language_server,json=startLanguageServer,proto3,oneof"`
}

type Envelope_UpdateLanguageServer struct {
	UpdateLanguageServer *UpdateLanguageServer `protobuf:"bytes,55,opt,name=update_language_server,json=updateLanguageServer,proto3,oneof"`
}

type Envelope_OpenBufferById struct {
	OpenBufferById *OpenBufferById `protobuf:"bytes,56,opt,name=open_buffer_by_id,json=openBufferById,proto3,oneof"`
}

type Envelope_OpenBufferByPath struct {
	OpenBufferByPath *OpenBufferByPath `protobuf:"bytes,57,opt,name=open_buffer_by_path,json=openBufferByPath,proto3,oneof"`
}

type Envelope_OpenBufferResponse struct {
	OpenBufferResponse *OpenBufferResponse `protobuf:"bytes,58,opt,name=open_buffer_response,json=openBufferResponse,proto3,oneof"`
}

type Envelope_CreateBufferForPeer struct {
	CreateBufferForPeer *CreateBufferForPeer `protobuf:"bytes,59,opt,name=create_buffer_for_peer,json=createBufferForPeer,proto3,oneof"`
}

type Envelope_UpdateBuffer struct {
	UpdateBuffer *UpdateBuffer `protobuf:"bytes,60,opt,name=update_buffer,json=updateBuffer,proto3,oneof"`
}

type Envelope_UpdateBufferFile struct {
	UpdateBufferFile *UpdateBufferFile `protobuf:"bytes,61,opt,name=update_buffer_file,json=updateBufferFile,proto3,oneof"`
}

type Envelope_SaveBuffer struct {
	SaveBuffer *SaveBuffer `protobuf:"bytes,62,opt,name=save_buffer,json=saveBuffer,proto3,oneof"`
}

type Envelope_BufferSaved struct {
	BufferSaved *BufferSaved `protobuf:"bytes,63,opt,name=buffer_saved,json=bufferSaved,proto3,oneof"`
}

type Envelope_BufferReloaded struct {
	BufferReloaded *BufferReloaded `protobuf:"bytes,64,opt,name=buffer_reloaded,json=bufferReloaded,proto3,oneof"`
}

type Envelope_ReloadBuffers struct {
	ReloadBuffers *ReloadBuffers `protobuf:"bytes,65,opt,name=reload_buffers,json=reloadBuffers,proto3,oneof"`
}

type Envelope_ReloadBuffersResponse struct {
	ReloadBuffersResponse *ReloadBuffersResponse `protobuf:"bytes,66,opt,name=reload_buffers_response,json=reloadBuffersResponse,proto3,oneof"`
}

type Envelope_SynchronizeBuffers struct {
	SynchronizeBuffers *SynchronizeBuffers `protobuf:"bytes,67,opt,name=synchronize_buffers,json=synchronizeBuffers,proto3,oneof"`
}

type Envelope_SynchronizeBuffersResponse struct {
	SynchronizeBuffersResponse *SynchronizeBuffersResponse `protobuf:"bytes,68,opt,name=synchronize_buffers_response,json=synchronizeBuffersResponse,proto3,oneof"`
}

type Envelope_FormatBuffers struct {
	FormatBuffers *FormatBuffers `protobuf:"bytes,69,opt,name=format_buffers,json=formatBuffers,proto3,oneof"`
}

type Envelope_FormatBuffersResponse struct {
	FormatBuffersResponse *FormatBuffersResponse `protobuf:"bytes,70,opt,name=format_buffers_response,json=formatBuffersResponse,proto3,oneof"`
}

type Envelope_GetCompletions struct {
	GetCompletions *GetCompletions `protobuf:"bytes,71,opt,name=get_completions,json=getCompletions,proto3,oneof"`
}

type Envelope_GetCompletionsResponse struct {
	GetCompletionsResponse *GetCompletionsResponse `protobuf:"bytes,72,opt,name=get_completions_response,json=getCompletionsResponse,proto3,oneof"`
}

type Envelope_ResolveCompletionDocumentation struct {
	ResolveCompletionDocumentation *ResolveCompletionDocumentation `protobuf:"bytes,73,opt,name=resolve_completion_documentation,json=resolveCompletionDocumentation,proto3,oneof"`
}

type Envelope_ResolveCompletionDocumentationResponse struct {
	ResolveCompletionDocumentationResponse *ResolveCompletionDocumentationResponse `protobuf:"bytes,74,opt,name=resolve_completion_documentation_response,json=resolveCompletionDocumentationResponse,proto3,oneof"`
}

type Envelope_ApplyCompletionAdditionalEdits struct {
	ApplyCompletionAdditionalEdits *ApplyCompletionAdditionalEdits `protobuf:"bytes,75,opt,name=apply_completion_additional_edits,json=applyCompletionAdditionalEdits,proto3,oneof"`
}

type Envelope_ApplyCompletionAdditionalEditsResponse struct {
	ApplyCompletionAdditionalEditsResponse *ApplyCompletionAdditionalEditsResponse `protobuf:"bytes,76,opt,name=apply_completion_additional_edits_response,json=applyCompletionAdditionalEditsResponse,proto3,oneof"`
}

type Envelope_GetCodeActions struct {
	GetCodeActions *GetCodeActions `protobuf:"bytes,77,opt,name=get_code_actions,json=getCodeActions,proto3,oneof"`
}

type Envelope_GetCodeActionsResponse struct {
	GetCodeActionsResponse *GetCodeActionsResponse `protobuf:"bytes,78,opt,name=get_code_actions_response,json=getCodeActionsResponse,proto3,oneof"`
}

type Envelope_GetHover struct {
	GetHover *GetHover `protobuf:"bytes,79,opt,name=get_hover,json=getHover,proto3,oneof"`
}

type Envelope_GetHoverResponse struct {
	GetHoverResponse *GetHoverResponse `protobuf:"bytes,80,opt,name=get_hover_response,json=getHoverResponse,proto3,oneof"`
}

type Envelope_ApplyCodeAction struct {
	ApplyCodeAction *ApplyCodeAction `protobuf:"bytes,81,opt,name=apply_code_action,json=applyCodeAction,proto3,oneof"`
}

type Envelope_ApplyCodeActionResponse struct {
	ApplyCodeActionResponse *ApplyCodeActionResponse `protobuf:"bytes,82,opt,name=apply_code_action_response,json=applyCodeActionResponse,proto3,oneof"`
}

type Envelope_PrepareRename struct {
	PrepareRename *PrepareRename `protobuf:"bytes,83,opt,name=prepare_rename,json=prepareRename,proto3,oneof"`
}

type Envelope_PrepareRenameResponse struct {
	PrepareRenameResponse *PrepareRenameResponse `protobuf:"bytes,84,opt,name=prepare_rename_response,json=prepareRenameResponse,proto3,oneof"`
}

type Envelope_PerformRename struct {
	PerformRename *PerformRename `protobuf:"bytes,85,opt,name=perform_rename,json=performRename,proto3,oneof"`
}

type Envelope_PerformRenameResponse struct {
	PerformRenameResponse *PerformRenameResponse `protobuf:"bytes,86,opt,name=perform_rename_response,json=performRenameResponse,proto3,oneof"`
}

type Envelope_UpdateContacts struct {
	UpdateContacts *UpdateContacts `protobuf:"bytes,89,opt,name=update_contacts,json=updateContacts,proto3,oneof"`
}

type Envelope_UpdateInviteInfo struct {
	UpdateInviteInfo *UpdateInviteInfo `protobuf:"bytes,90,opt,name=update_invite_info,json=updateInviteInfo,proto3,oneof"`
}

type Envelope_ShowContacts struct {
	ShowContacts *ShowContacts `protobuf:"bytes,91,opt,name=show_contacts,json=showContacts,proto3,oneof"`
}

type Envelope_GetUsers struct {
	GetUsers *GetUsers `protobuf:"bytes,92,opt,name=get_users,json=getUsers,proto3,oneof"`
}

type Envelope_FuzzySearchUsers struct {
	FuzzySearchUsers *FuzzySearchUsers `protobuf:"bytes,93,opt,name=fuzzy_search_users,json=fuzzySearchUsers,proto3,oneof"`
}

type Envelope_UsersResponse struct {
	UsersResponse *UsersResponse `protobuf:"bytes,94,opt,name=users_response,json=usersResponse,proto3,oneof"`
}

type Envelope_RequestContact struct {
	RequestContact *RequestContact `protobuf:"bytes,95,opt,name=request_contact,json=requestContact,proto3,oneof"`
}

type Envelope_RespondToContactRequest struct {
	RespondToContactRequest *RespondToContactRequest `protobuf:"bytes,96,opt,name=respond_to_contact_request,json=respondToContactRequest,proto3,oneof"`
}

type Envelope_RemoveContact struct {
	RemoveContact *RemoveContact `protobuf:"bytes,97,opt,name=remove_contact,json=removeContact,proto3,oneof"`
}

type Envelope_Follow struct {
	Follow *Follow `protobuf:"bytes,98,opt,name=follow,proto3,oneof"`
}

type Envelope_FollowResponse struct {
	FollowResponse *FollowResponse `protobuf:"bytes,99,opt,name=follow_response,json=followResponse,proto3,oneof"`
}

type Envelope_UpdateFollowers struct {
	UpdateFollowers *UpdateFollowers `protobuf:"bytes,100,opt,name=update_followers,json=updateFollowers,proto3,oneof"`
}

type Envelope_Unfollow struct {
	Unfollow *Unfollow `protobuf:"bytes,101,opt,name=unfollow,proto3,oneof"`
}

type Envelope_GetPrivateUserInfo struct {
	GetPrivateUserInfo *GetPrivateUserInfo `protobuf:"bytes,102,opt,name=get_private_user_info,json=getPrivateUserInfo,proto3,oneof"`
}

type Envelope_GetPrivateUserInfoResponse struct {
	GetPrivateUserInfoResponse *GetPrivateUserInfoResponse `protobuf:"bytes,103,opt,name=get_private_user_info_response,json=getPrivateUserInfoResponse,proto3,oneof"`
}

type Envelope_UpdateUserPlan struct {
	UpdateUserPlan *UpdateUserPlan `protobuf:"bytes,234,opt,name=update_user_plan,json=updateUserPlan,proto3,oneof"`
}

type Envelope_UpdateDiffBases struct {
	UpdateDiffBases *UpdateDiffBases `protobuf:"bytes,104,opt,name=update_diff_bases,json=updateDiffBases,proto3,oneof"`
}

type Envelope_AcceptTermsOfService struct {
	AcceptTermsOfService *AcceptTermsOfService `protobuf:"bytes,239,opt,name=accept_terms_of_service,json=acceptTermsOfService,proto3,oneof"`
}

type Envelope_AcceptTermsOfServiceResponse struct {
	AcceptTermsOfServiceResponse *AcceptTermsOfServiceResponse `protobuf:"bytes,240,opt,name=accept_terms_of_service_response,json=acceptTermsOfServiceResponse,proto3,oneof"`
}

type Envelope_OnTypeFormatting struct {
	OnTypeFormatting *OnTypeFormatting `protobuf:"bytes,105,opt,name=on_type_formatting,json=onTypeFormatting,proto3,oneof"`
}

type Envelope_OnTypeFormattingResponse struct {
	OnTypeFormattingResponse *OnTypeFormattingResponse `protobuf:"bytes,106,opt,name=on_type_formatting_response,json=onTypeFormattingResponse,proto3,oneof"`
}

type Envelope_UpdateWorktreeSettings struct {
	UpdateWorktreeSettings *UpdateWorktreeSettings `protobuf:"bytes,107,opt,name=update_worktree_settings,json=updateWorktreeSettings,proto3,oneof"`
}

type Envelope_InlayHints struct {
	InlayHints *InlayHints `protobuf:"bytes,108,opt,name=inlay_hints,json=inlayHints,proto3,oneof"`
}

type Envelope_InlayHintsResponse struct {
	InlayHintsResponse *InlayHintsResponse `protobuf:"bytes,109,opt,name=inlay_hints_response,json=inlayHintsResponse,proto3,oneof"`
}

type Envelope_ResolveInlayHint struct {
	ResolveInlayHint *ResolveInlayHint `protobuf:"bytes,110,opt,name=resolve_inlay_hint,json=resolveInlayHint,proto3,oneof"`
}

type Envelope_ResolveInlayHintResponse struct {
	ResolveInlayHintResponse *ResolveInlayHintResponse `protobuf:"bytes,111,opt,name=resolve_inlay_hint_response,json=resolveInlayHintResponse,proto3,oneof"`
}

type Envelope_RefreshInlayHints struct {
	RefreshInlayHints *RefreshInlayHints `protobuf:"bytes,112,opt,name=refresh_inlay_hints,json=refreshInlayHints,proto3,oneof"`
}

type Envelope_CreateChannel struct {
	CreateChannel *CreateChannel `protobuf:"bytes,113,opt,name=create_channel,json=createChannel,proto3,oneof"`
}

type Envelope_CreateChannelResponse struct {
	CreateChannelResponse *CreateChannelResponse `protobuf:"bytes,114,opt,name=create_channel_response,json=createChannelResponse,proto3,oneof"`
}

type Envelope_InviteChannelMember struct {
	InviteChannelMember *InviteChannelMember `protobuf:"bytes,115,opt,name=invite_channel_member,json=inviteChannelMember,proto3,oneof"`
}

type Envelope_RemoveChannelMember struct {
	RemoveChannelMember *RemoveChannelMember `protobuf:"bytes,116,opt,name=remove_channel_member,json=removeChannelMember,proto3,oneof"`
}

type Envelope_RespondToChannelInvite struct {
	RespondToChannelInvite *RespondToChannelInvite `protobuf:"bytes,117,opt,name=respond_to_channel_invite,json=respondToChannelInvite,proto3,oneof"`
}

type Envelope_UpdateChannels struct {
	UpdateChannels *UpdateChannels `protobuf:"bytes,118,opt,name=update_channels,json=updateChannels,proto3,oneof"`
}

type Envelope_JoinChannel struct {
	JoinChannel *JoinChannel `protobuf:"bytes,119,opt,name=join_channel,json=joinChannel,proto3,oneof"`
}

type Envelope_DeleteChannel struct {
	DeleteChannel *DeleteChannel `protobuf:"bytes,120,opt,name=delete_channel,json=deleteChannel,proto3,oneof"`
}

type Envelope_GetChannelMembers struct {
	GetChannelMembers *GetChannelMembers `protobuf:"bytes,121,opt,name=get_channel_members,json=getChannelMembers,proto3,oneof"`
}

type Envelope_GetChannelMembersResponse struct {
	GetChannelMembersResponse *GetChannelMembersResponse `protobuf:"bytes,122,opt,name=get_channel_members_response,json=getChannelMembersResponse,proto3,oneof"`
}

type Envelope_SetChannelMemberRole struct {
	SetChannelMemberRole *SetChannelMemberRole `protobuf:"bytes,123,opt,name=set_channel_member_role,json=setChannelMemberRole,proto3,oneof"`
}

type Envelope_RenameChannel struct {
	RenameChannel *RenameChannel `protobuf:"bytes,124,opt,name=rename_channel,json=renameChannel,proto3,oneof"`
}

type Envelope_RenameChannelResponse struct {
	RenameChannelResponse *RenameChannelResponse `protobuf:"bytes,125,opt,name=rename_channel_response,json=renameChannelResponse,proto3,oneof"`
}

type Envelope_SubscribeToChannels struct {
	SubscribeToChannels *SubscribeToChannels `protobuf:"bytes,207,opt,name=subscribe_to_channels,json=subscribeToChannels,proto3,oneof"`
}

type Envelope_JoinChannelBuffer struct {
	JoinChannelBuffer *JoinChannelBuffer `protobuf:"bytes,126,opt,name=join_channel_buffer,json=joinChannelBuffer,proto3,oneof"`
}

type Envelope_JoinChannelBufferResponse struct {
	JoinChannelBufferResponse *JoinChannelBufferResponse `protobuf:"bytes,127,opt,name=join_channel_buffer_response,json=joinChannelBufferResponse,proto3,oneof"`
}

type Envelope_UpdateChannelBuffer struct {
	UpdateChannelBuffer *UpdateChannelBuffer `protobuf:"bytes,128,opt,name=update_channel_buffer,json=updateChannelBuffer,proto3,oneof"`
}

type Envelope_LeaveChannelBuffer struct {
	LeaveChannelBuffer *LeaveChannelBuffer `protobuf:"bytes,129,opt,name=leave_channel_buffer,json=leaveChannelBuffer,proto3,oneof"`
}

type Envelope_UpdateChannelBufferCollaborators struct {
	UpdateChannelBufferCollaborators *UpdateChannelBufferCollaborators `protobuf:"bytes,130,opt,name=update_channel_buffer_collaborators,json=updateChannelBufferCollaborators,proto3,oneof"`
}

type Envelope_RejoinChannelBuffers struct {
	RejoinChannelBuffers *RejoinChannelBuffers `protobuf:"bytes,131,opt,name=rejoin_channel_buffers,json=rejoinChannelBuffers,proto3,oneof"`
}

type Envelope_RejoinChannelBuffersResponse struct {
	RejoinChannelBuffersResponse *RejoinChannelBuffersResponse `protobuf:"bytes,132,opt,name=rejoin_channel_buffers_response,json=rejoinChannelBuffersResponse,proto3,oneof"`
}

type Envelope_AckBufferOperation struct {
	AckBufferOperation *AckBufferOperation `protobuf:"bytes,133,opt,name=ack_buffer_operation,json=ackBufferOperation,proto3,oneof"`
}

type Envelope_JoinChannelChat struct {
	JoinChannelChat *JoinChannelChat `protobuf:"bytes,134,opt,name=join_channel_chat,json=joinChannelChat,proto3,oneof"`
}

type Envelope_JoinChannelChatResponse struct {
	JoinChannelChatResponse *JoinChannelChatResponse `protobuf:"bytes,135,opt,name=join_channel_chat_response,json=joinChannelChatResponse,proto3,oneof"`
}

type Envelope_LeaveChannelChat struct {
	LeaveChannelChat *LeaveChannelChat `protobuf:"bytes,136,opt,name=leave_channel_chat,json=leaveChannelChat,proto3,oneof"`
}

type Envelope_SendChannelMessage struct {
	SendChannelMessage *SendChannelMessage `protobuf:"bytes,137,opt,name=send_channel_message,json=sendChannelMessage,proto3,oneof"`
}

type Envelope_SendChannelMessageResponse struct {
	SendChannelMessageResponse *SendChannelMessageResponse `protobuf:"bytes,138,opt,name=send_channel_message_response,json=sendChannelMessageResponse,proto3,oneof"`
}

type Envelope_ChannelMessageSent struct {
	ChannelMessageSent *ChannelMessageSent `protobuf:"bytes,139,opt,name=channel_message_sent,json=channelMessageSent,proto3,oneof"`
}

type Envelope_GetChannelMessages struct {
	GetChannelMessages *GetChannelMessages `protobuf:"bytes,140,opt,name=get_channel_messages,json=getChannelMessages,proto3,oneof"`
}

type Envelope_GetChannelMessagesResponse struct {
	GetChannelMessagesResponse *GetChannelMessagesResponse `protobuf:"bytes,141,opt,name=get_channel_messages_response,json=getChannelMessagesResponse,proto3,oneof"`
}

type Envelope_RemoveChannelMessage struct {
	RemoveChannelMessage *RemoveChannelMessage `protobuf:"bytes,142,opt,name=remove_channel_message,json=removeChannelMessage,proto3,oneof"`
}

type Envelope_AckChannelMessage struct {
	AckChannelMessage *AckChannelMessage `protobuf:"bytes,143,opt,name=ack_channel_message,json=ackChannelMessage,proto3,oneof"`
}

type Envelope_GetChannelMessagesById struct {
	GetChannelMessagesById *GetChannelMessagesById `protobuf:"bytes,144,opt,name=get_channel_messages_by_id,json=getChannelMessagesById,proto3,oneof"`
}

type Envelope_MoveChannel struct {
	MoveChannel *MoveChannel `protobuf:"bytes,147,opt,name=move_channel,json=moveChannel,proto3,oneof"`
}

type Envelope_SetChannelVisibility struct {
	SetChannelVisibility *SetChannelVisibility `protobuf:"bytes,148,opt,name=set_channel_visibility,json=setChannelVisibility,proto3,oneof"`
}

type Envelope_AddNotification struct {
	AddNotification *AddNotification `protobuf:"bytes,149,opt,name=add_notification,json=addNotification,proto3,oneof"`
}

type Envelope_GetNotifications struct {
	GetNotifications *GetNotifications `protobuf:"bytes,150,opt,name=get_notifications,json=getNotifications,proto3,oneof"`
}

type Envelope_GetNotificationsResponse struct {
	GetNotificationsResponse *GetNotificationsResponse `protobuf:"bytes,151,opt,name=get_notifications_response,json=getNotificationsResponse,proto3,oneof"`
}

type Envelope_DeleteNotification struct {
	DeleteNotification *DeleteNotification `protobuf:"bytes,152,opt,name=delete_notification,json=deleteNotification,proto3,oneof"`
}

type Envelope_MarkNotificationRead struct {
	MarkNotificationRead *MarkNotificationRead `protobuf:"bytes,153,opt,name=mark_notification_read,json=markNotificationRead,proto3,oneof"`
}

type Envelope_LspExtExpandMacro struct {
	LspExtExpandMacro *LspExtExpandMacro `protobuf:"bytes,154,opt,name=lsp_ext_expand_macro,json=lspExtExpandMacro,proto3,oneof"`
}

type Envelope_LspExtExpandMacroResponse struct {
	LspExtExpandMacroResponse *LspExtExpandMacroResponse `protobuf:"bytes,155,opt,name=lsp_ext_expand_macro_response,json=lspExtExpandMacroResponse,proto3,oneof"`
}

type Envelope_SetRoomParticipantRole struct {
	SetRoomParticipantRole *SetRoomParticipantRole `protobuf:"bytes,156,opt,name=set_room_participant_role,json=setRoomParticipantRole,proto3,oneof"`
}

type Envelope_UpdateUserChannels struct {
	UpdateUserChannels *UpdateUserChannels `protobuf:"bytes,157,opt,name=update_user_channels,json=updateUserChannels,proto3,oneof"`
}

type Envelope_GetImplementation struct {
	GetImplementation *GetImplementation `protobuf:"bytes,162,opt,name=get_implementation,json=getImplementation,proto3,oneof"`
}

type Envelope_GetImplementationResponse struct {
	GetImplementationResponse *GetImplementationResponse `protobuf:"bytes,163,opt,name=get_implementation_response,json=getImplementationResponse,proto3,oneof"`
}

type Envelope_UpdateChannelMessage struct {
	UpdateChannelMessage *UpdateChannelMessage `protobuf:"bytes,170,opt,name=update_channel_message,json=updateChannelMessage,proto3,oneof"`
}

type Envelope_ChannelMessageUpdate struct {
	ChannelMessageUpdate *ChannelMessageUpdate `protobuf:"bytes,171,opt,name=channel_message_update,json=channelMessageUpdate,proto3,oneof"`
}

type Envelope_BlameBuffer struct {
	BlameBuffer *BlameBuffer `protobuf:"bytes,172,opt,name=blame_buffer,json=blameBuffer,proto3,oneof"`
}

type Envelope_BlameBufferResponse struct {
	BlameBufferResponse *BlameBufferResponse `protobuf:"bytes,173,opt,name=blame_buffer_response,json=blameBufferResponse,proto3,oneof"`
}

type Envelope_UpdateNotification struct {
	UpdateNotification *UpdateNotification `protobuf:"bytes,174,opt,name=update_notification,json=updateNotification,proto3,oneof"`
}

type Envelope_MultiLspQuery struct {
	MultiLspQuery *MultiLspQuery `protobuf:"bytes,175,opt,name=multi_lsp_query,json=multiLspQuery,proto3,oneof"`
}

type Envelope_MultiLspQueryResponse struct {
	MultiLspQueryResponse *MultiLspQueryResponse `protobuf:"bytes,176,opt,name=multi_lsp_query_response,json=multiLspQueryResponse,proto3,oneof"`
}

type Envelope_RestartLanguageServers struct {
	RestartLanguageServers *RestartLanguageServers `protobuf:"bytes,208,opt,name=restart_language_servers,json=restartLanguageServers,proto3,oneof"`
}

type Envelope_RejoinRemoteProjects struct {
	RejoinRemoteProjects *RejoinRemoteProjects `protobuf:"bytes,186,opt,name=rejoin_remote_projects,json=rejoinRemoteProjects,proto3,oneof"`
}

type Envelope_RejoinRemoteProjectsResponse struct {
	RejoinRemoteProjectsResponse *RejoinRemoteProjectsResponse `protobuf:"bytes,187,opt,name=rejoin_remote_projects_response,json=rejoinRemoteProjectsResponse,proto3,oneof"`
}

type Envelope_OpenNewBuffer struct {
	OpenNewBuffer *OpenNewBuffer `protobuf:"bytes,196,opt,name=open_new_buffer,json=openNewBuffer,proto3,oneof"`
}

type Envelope_GetSupermavenApiKey struct {
	GetSupermavenApiKey *GetSupermavenApiKey `protobuf:"bytes,198,opt,name=get_supermaven_api_key,json=getSupermavenApiKey,proto3,oneof"`
}

type Envelope_GetSupermavenApiKeyResponse struct {
	GetSupermavenApiKeyResponse *GetSupermavenApiKeyResponse `protobuf:"bytes,199,opt,name=get_supermaven_api_key_response,json=getSupermavenApiKeyResponse,proto3,oneof"`
}

type Envelope_TaskContextForLocation struct {
	TaskContextForLocation *TaskContextForLocation `protobuf:"bytes,203,opt,name=task_context_for_location,json=taskContextForLocation,proto3,oneof"`
}

type Envelope_TaskContext struct {
	TaskContext *TaskContext `protobuf:"bytes,204,opt,name=task_context,json=taskContext,proto3,oneof"`
}

type Envelope_LinkedEditingRange struct {
	LinkedEditingRange *LinkedEditingRange `protobuf:"bytes,209,opt,name=linked_editing_range,json=linkedEditingRange,proto3,oneof"`
}

type Envelope_LinkedEditingRangeResponse struct {
	LinkedEditingRangeResponse *LinkedEditingRangeResponse `protobuf:"bytes,210,opt,name=linked_editing_range_response,json=linkedEditingRangeResponse,proto3,oneof"`
}

type Envelope_AdvertiseContexts struct {
	AdvertiseContexts *AdvertiseContexts `protobuf:"bytes,211,opt,name=advertise_contexts,json=advertiseContexts,proto3,oneof"`
}

type Envelope_OpenContext struct {
	OpenContext *OpenContext `protobuf:"bytes,212,opt,name=open_context,json=openContext,proto3,oneof"`
}

type Envelope_OpenContextResponse struct {
	OpenContextResponse *OpenContextResponse `protobuf:"bytes,213,opt,name=open_context_response,json=openContextResponse,proto3,oneof"`
}

type Envelope_CreateContext struct {
	CreateContext *CreateContext `protobuf:"bytes,232,opt,name=create_context,json=createContext,proto3,oneof"`
}

type Envelope_CreateContextResponse struct {
	CreateContextResponse *CreateContextResponse `protobuf:"bytes,233,opt,name=create_context_response,json=createContextResponse,proto3,oneof"`
}

type Envelope_UpdateContext struct {
	UpdateContext *UpdateContext `protobuf:"bytes,214,opt,name=update_context,json=updateContext,proto3,oneof"`
}

type Envelope_SynchronizeContexts struct {
	SynchronizeContexts *SynchronizeContexts `protobuf:"bytes,215,opt,name=synchronize_contexts,json=synchronizeContexts,proto3,oneof"`
}

type Envelope_SynchronizeContextsResponse struct {
	SynchronizeContextsResponse *SynchronizeContextsResponse `protobuf:"bytes,216,opt,name=synchronize_contexts_response,json=synchronizeContextsResponse,proto3,oneof"`
}

type Envelope_GetSignatureHelp struct {
	GetSignatureHelp *GetSignatureHelp `protobuf:"bytes,217,opt,name=get_signature_help,json=getSignatureHelp,proto3,oneof"`
}

type Envelope_GetSignatureHelpResponse struct {
	GetSignatureHelpResponse *GetSignatureHelpResponse `protobuf:"bytes,218,opt,name=get_signature_help_response,json=getSignatureHelpResponse,proto3,oneof"`
}

type Envelope_ListRemoteDirectory struct {
	ListRemoteDirectory *ListRemoteDirectory `protobuf:"bytes,219,opt,name=list_remote_directory,json=listRemoteDirectory,proto3,oneof"`
}

type Envelope_ListRemoteDirectoryResponse struct {
	ListRemoteDirectoryResponse *ListRemoteDirectoryResponse `protobuf:"bytes,220,opt,name=list_remote_directory_response,json=listRemoteDirectoryResponse,proto3,oneof"`
}

type Envelope_AddWorktree struct {
	AddWorktree *AddWorktree `protobuf:"bytes,222,opt,name=add_worktree,json=addWorktree,proto3,oneof"`
}

type Envelope_AddWorktreeResponse struct {
	AddWorktreeResponse *AddWorktreeResponse `protobuf:"bytes,223,opt,name=add_worktree_response,json=addWorktreeResponse,proto3,oneof"`
}

type Envelope_GetLlmToken struct {
	GetLlmToken *GetLlmToken `protobuf:"bytes,235,opt,name=get_llm_token,json=getLlmToken,proto3,oneof"`
}

type Envelope_GetLlmTokenResponse struct {
	GetLlmTokenResponse *GetLlmTokenResponse `protobuf:"bytes,236,opt,name=get_llm_token_response,json=getLlmTokenResponse,proto3,oneof"`
}

type Envelope_RefreshLlmToken struct {
	RefreshLlmToken *RefreshLlmToken `protobuf:"bytes,259,opt,name=refresh_llm_token,json=refreshLlmToken,proto3,oneof"`
}

type Envelope_LspExtSwitchSourceHeader struct {
	LspExtSwitchSourceHeader *LspExtSwitchSourceHeader `protobuf:"bytes,241,opt,name=lsp_ext_switch_source_header,json=lspExtSwitchSourceHeader,proto3,oneof"`
}

type Envelope_LspExtSwitchSourceHeaderResponse struct {
	LspExtSwitchSourceHeaderResponse *LspExtSwitchSourceHeaderResponse `protobuf:"bytes,242,opt,name=lsp_ext_switch_source_header_response,json=lspExtSwitchSourceHeaderResponse,proto3,oneof"`
}

type Envelope_FindSearchCandidates struct {
	FindSearchCandidates *FindSearchCandidates `protobuf:"bytes,243,opt,name=find_search_candidates,json=findSearchCandidates,proto3,oneof"`
}

type Envelope_FindSearchCandidatesResponse struct {
	FindSearchCandidatesResponse *FindSearchCandidatesResponse `protobuf:"bytes,244,opt,name=find_search_candidates_response,json=findSearchCandidatesResponse,proto3,oneof"`
}

type Envelope_CloseBuffer struct {
	CloseBuffer *CloseBuffer `protobuf:"bytes,245,opt,name=close_buffer,json=closeBuffer,proto3,oneof"`
}

type Envelope_ShutdownRemoteServer struct {
	ShutdownRemoteServer *ShutdownRemoteServer `protobuf:"bytes,257,opt,name=shutdown_remote_server,json=shutdownRemoteServer,proto3,oneof"`
}

type Envelope_RemoveWorktree struct {
	RemoveWorktree *RemoveWorktree `protobuf:"bytes,258,opt,name=remove_worktree,json=removeWorktree,proto3,oneof"`
}

type Envelope_LanguageServerLog struct {
	LanguageServerLog *LanguageServerLog `protobuf:"bytes,260,opt,name=language_server_log,json=languageServerLog,proto3,oneof"`
}

type Envelope_Toast struct {
	Toast *Toast `protobuf:"bytes,261,opt,name=toast,proto3,oneof"`
}

type Envelope_HideToast struct {
	HideToast *HideToast `protobuf:"bytes,262,opt,name=hide_toast,json=hideToast,proto3,oneof"`
}

type Envelope_OpenServerSettings struct {
	OpenServerSettings *OpenServerSettings `protobuf:"bytes,263,opt,name=open_server_settings,json=openServerSettings,proto3,oneof"`
}

type Envelope_GetPermalinkToLine struct {
	GetPermalinkToLine *GetPermalinkToLine `protobuf:"bytes,264,opt,name=get_permalink_to_line,json=getPermalinkToLine,proto3,oneof"`
}

type Envelope_GetPermalinkToLineResponse struct {
	GetPermalinkToLineResponse *GetPermalinkToLineResponse `protobuf:"bytes,265,opt,name=get_permalink_to_line_response,json=getPermalinkToLineResponse,proto3,oneof"`
}

type Envelope_FlushBufferedMessages struct {
	FlushBufferedMessages *FlushBufferedMessages `protobuf:"bytes,267,opt,name=flush_buffered_messages,json=flushBufferedMessages,proto3,oneof"`
}

type Envelope_LanguageServerPromptRequest struct {
	LanguageServerPromptRequest *LanguageServerPromptRequest `protobuf:"bytes,268,opt,name=language_server_prompt_request,json=languageServerPromptRequest,proto3,oneof"`
}

type Envelope_LanguageServerPromptResponse struct {
	LanguageServerPromptResponse *LanguageServerPromptResponse `protobuf:"bytes,269,opt,name=language_server_prompt_response,json=languageServerPromptResponse,proto3,oneof"`
}

type Envelope_GitBranchesResponse struct {
	GitBranchesResponse *GitBranchesResponse `protobuf:"bytes,271,opt,name=git_branches_response,json=gitBranchesResponse,proto3,oneof"`
}

type Envelope_UpdateGitBranch struct {
	UpdateGitBranch *UpdateGitBranch `protobuf:"bytes,272,opt,name=update_git_branch,json=updateGitBranch,proto3,oneof"`
}

type Envelope_ListToolchains struct {
	ListToolchains *ListToolchains `protobuf:"bytes,273,opt,name=list_toolchains,json=listToolchains,proto3,oneof"`
}

type Envelope_ListToolchainsResponse struct {
	ListToolchainsResponse *ListToolchainsResponse `protobuf:"bytes,274,opt,name=list_toolchains_response,json=listToolchainsResponse,proto3,oneof"`
}

type Envelope_ActivateToolchain struct {
	ActivateToolchain *ActivateToolchain `protobuf:"bytes,275,opt,name=activate_toolchain,json=activateToolchain,proto3,oneof"`
}

type Envelope_ActiveToolchain struct {
	ActiveToolchain *ActiveToolchain `protobuf:"bytes,276,opt,name=active_toolchain,json=activeToolchain,proto3,oneof"`
}

type Envelope_ActiveToolchainResponse struct {
	ActiveToolchainResponse *ActiveToolchainResponse `protobuf:"bytes,277,opt,name=active_toolchain_response,json=activeToolchainResponse,proto3,oneof"`
}

type Envelope_GetPathMetadata struct {
	GetPathMetadata *GetPathMetadata `protobuf:"bytes,278,opt,name=get_path_metadata,json=getPathMetadata,proto3,oneof"`
}

type Envelope_GetPathMetadataResponse struct {
	GetPathMetadataResponse *GetPathMetadataResponse `protobuf:"bytes,279,opt,name=get_path_metadata_response,json=getPathMetadataResponse,proto3,oneof"`
}

type Envelope_GetPanicFiles struct {
	GetPanicFiles *GetPanicFiles `protobuf:"bytes,280,opt,name=get_panic_files,json=getPanicFiles,proto3,oneof"`
}

type Envelope_GetPanicFilesResponse struct {
	GetPanicFilesResponse *GetPanicFilesResponse `protobuf:"bytes,281,opt,name=get_panic_files_response,json=getPanicFilesResponse,proto3,oneof"`
}

type Envelope_CancelLanguageServerWork struct {
	CancelLanguageServerWork *CancelLanguageServerWork `protobuf:"bytes,282,opt,name=cancel_language_server_work,json=cancelLanguageServerWork,proto3,oneof"`
}

type Envelope_LspExtOpenDocs struct {
	LspExtOpenDocs *LspExtOpenDocs `protobuf:"bytes,283,opt,name=lsp_ext_open_docs,json=lspExtOpenDocs,proto3,oneof"`
}

type Envelope_LspExtOpenDocsResponse struct {
	LspExtOpenDocsResponse *LspExtOpenDocsResponse `protobuf:"bytes,284,opt,name=lsp_ext_open_docs_response,json=lspExtOpenDocsResponse,proto3,oneof"`
}

type Envelope_SyncExtensions struct {
	SyncExtensions *SyncExtensions `protobuf:"bytes,285,opt,name=sync_extensions,json=syncExtensions,proto3,oneof"`
}

type Envelope_SyncExtensionsResponse struct {
	SyncExtensionsResponse *SyncExtensionsResponse `protobuf:"bytes,286,opt,name=sync_extensions_response,json=syncExtensionsResponse,proto3,oneof"`
}

type Envelope_InstallExtension struct {
	InstallExtension *InstallExtension `protobuf:"bytes,287,opt,name=install_extension,json=installExtension,proto3,oneof"`
}

type Envelope_OpenUnstagedDiff struct {
	OpenUnstagedDiff *OpenUnstagedDiff `protobuf:"bytes,288,opt,name=open_unstaged_diff,json=openUnstagedDiff,proto3,oneof"`
}

type Envelope_OpenUnstagedDiffResponse struct {
	OpenUnstagedDiffResponse *OpenUnstagedDiffResponse `protobuf:"bytes,289,opt,name=open_unstaged_diff_response,json=openUnstagedDiffResponse,proto3,oneof"`
}

type Envelope_RegisterBufferWithLanguageServers struct {
	RegisterBufferWithLanguageServers *RegisterBufferWithLanguageServers `protobuf:"bytes,290,opt,name=register_buffer_with_language_servers,json=registerBufferWithLanguageServers,proto3,oneof"`
}

type Envelope_Stage struct {
	Stage *Stage `protobuf:"bytes,293,opt,name=stage,proto3,oneof"`
}

type Envelope_Unstage struct {
	Unstage *Unstage `protobuf:"bytes,294,opt,name=unstage,proto3,oneof"`
}

type Envelope_Commit struct {
	Commit *Commit `protobuf:"bytes,295,opt,name=commit,proto3,oneof"`
}

type Envelope_OpenCommitMessageBuffer struct {
	OpenCommitMessageBuffer *OpenCommitMessageBuffer `protobuf:"bytes,296,opt,name=open_commit_message_buffer,json=openCommitMessageBuffer,proto3,oneof"`
}

type Envelope_OpenUncommittedDiff struct {
	OpenUncommittedDiff *OpenUncommittedDiff `protobuf:"bytes,297,opt,name=open_uncommitted_diff,json=openUncommittedDiff,proto3,oneof"`
}

type Envelope_OpenUncommittedDiffResponse struct {
	OpenUncommittedDiffResponse *OpenUncommittedDiffResponse `protobuf:"bytes,298,opt,name=open_uncommitted_diff_response,json=openUncommittedDiffResponse,proto3,oneof"`
}

type Envelope_SetIndexText struct {
	SetIndexText *SetIndexText `protobuf:"bytes,299,opt,name=set_index_text,json=setIndexText,proto3,oneof"`
}

type Envelope_GitShow struct {
	GitShow *GitShow `protobuf:"bytes,300,opt,name=git_show,json=gitShow,proto3,oneof"`
}

type Envelope_GitReset struct {
	GitReset *GitReset `protobuf:"bytes,301,opt,name=git_reset,json=gitReset,proto3,oneof"`
}

type Envelope_GitCommitDetails struct {
	GitCommitDetails *GitCommitDetails `protobuf:"bytes,302,opt,name=git_commit_details,json=gitCommitDetails,proto3,oneof"`
}

type Envelope_GitCheckoutFiles struct {
	GitCheckoutFiles *GitCheckoutFiles `protobuf:"bytes,303,opt,name=git_checkout_files,json=gitCheckoutFiles,proto3,oneof"`
}

type Envelope_Push struct {
	Push *Push `protobuf:"bytes,304,opt,name=push,proto3,oneof"`
}

type Envelope_Fetch struct {
	Fetch *Fetch `protobuf:"bytes,305,opt,name=fetch,proto3,oneof"`
}

type Envelope_GetRemotes struct {
	GetRemotes *GetRemotes `protobuf:"bytes,306,opt,name=get_remotes,json=getRemotes,proto3,oneof"`
}

type Envelope_GetRemotesResponse struct {
	GetRemotesResponse *GetRemotesResponse `protobuf:"bytes,307,opt,name=get_remotes_response,json=getRemotesResponse,proto3,oneof"`
}

type Envelope_Pull struct {
	Pull *Pull `protobuf:"bytes,308,opt,name=pull,proto3,oneof"`
}

type Envelope_ApplyCodeActionKind struct {
	ApplyCodeActionKind *ApplyCodeActionKind `protobuf:"bytes,309,opt,name=apply_code_action_kind,json=applyCodeActionKind,proto3,oneof"`
}

type Envelope_ApplyCodeActionKindResponse struct {
	ApplyCodeActionKindResponse *ApplyCodeActionKindResponse `protobuf:"bytes,310,opt,name=apply_code_action_kind_response,json=applyCodeActionKindResponse,proto3,oneof"`
}

type Envelope_RemoteMessageResponse struct {
	RemoteMessageResponse *RemoteMessageResponse `protobuf:"bytes,311,opt,name=remote_message_response,json=remoteMessageResponse,proto3,oneof"`
}

type Envelope_GitGetBranches struct {
	GitGetBranches *GitGetBranches `protobuf:"bytes,312,opt,name=git_get_branches,json=gitGetBranches,proto3,oneof"`
}

type Envelope_GitCreateBranch struct {
	GitCreateBranch *GitCreateBranch `protobuf:"bytes,313,opt,name=git_create_branch,json=gitCreateBranch,proto3,oneof"`
}

type Envelope_GitChangeBranch struct {
	GitChangeBranch *GitChangeBranch `protobuf:"bytes,314,opt,name=git_change_branch,json=gitChangeBranch,proto3,oneof"`
}

type Envelope_CheckForPushedCommits struct {
	CheckForPushedCommits *CheckForPushedCommits `protobuf:"bytes,315,opt,name=check_for_pushed_commits,json=checkForPushedCommits,proto3,oneof"`
}

type Envelope_CheckForPushedCommitsResponse struct {
	CheckForPushedCommitsResponse *CheckForPushedCommitsResponse `protobuf:"bytes,316,opt,name=check_for_pushed_commits_response,json=checkForPushedCommitsResponse,proto3,oneof"`
}

type Envelope_AskPassRequest struct {
	AskPassRequest *AskPassRequest `protobuf:"bytes,317,opt,name=ask_pass_request,json=askPassRequest,proto3,oneof"`
}

type Envelope_AskPassResponse struct {
	AskPassResponse *AskPassResponse `protobuf:"bytes,318,opt,name=ask_pass_response,json=askPassResponse,proto3,oneof"`
}

type Envelope_GitDiff struct {
	GitDiff *GitDiff `protobuf:"bytes,319,opt,name=git_diff,json=gitDiff,proto3,oneof"`
}

type Envelope_GitDiffResponse struct {
	GitDiffResponse *GitDiffResponse `protobuf:"bytes,320,opt,name=git_diff_response,json=gitDiffResponse,proto3,oneof"`
}

type Envelope_GitInit struct {
	GitInit *GitInit `protobuf:"bytes,321,opt,name=git_init,json=gitInit,proto3,oneof"`
}

type Envelope_CodeLens struct {
	CodeLens *CodeLens `protobuf:"bytes,322,opt,name=code_lens,json=codeLens,proto3,oneof"`
}

type Envelope_GetCodeLens_ struct {
	GetCodeLens_ *GetCodeLens `protobuf:"bytes,323,opt,name=get_code_lens,json=getCodeLens,proto3,oneof"`
}

type Envelope_GetCodeLensResponse struct {
	GetCodeLensResponse *GetCodeLensResponse `protobuf:"bytes,324,opt,name=get_code_lens_response,json=getCodeLensResponse,proto3,oneof"`
}

type Envelope_RefreshCodeLens struct {
	RefreshCodeLens *RefreshCodeLens `protobuf:"bytes,325,opt,name=refresh_code_lens,json=refreshCodeLens,proto3,oneof"`
}

type Envelope_ToggleBreakpoint struct {
	ToggleBreakpoint *ToggleBreakpoint `protobuf:"bytes,326,opt,name=toggle_breakpoint,json=toggleBreakpoint,proto3,oneof"`
}

type Envelope_BreakpointsForFile struct {
	BreakpointsForFile *BreakpointsForFile `protobuf:"bytes,327,opt,name=breakpoints_for_file,json=breakpointsForFile,proto3,oneof"`
}

type Envelope_UpdateRepository struct {
	UpdateRepository *UpdateRepository `protobuf:"bytes,328,opt,name=update_repository,json=updateRepository,proto3,oneof"`
}

type Envelope_RemoveRepository struct {
	RemoveRepository *RemoveRepository `protobuf:"bytes,329,opt,name=remove_repository,json=removeRepository,proto3,oneof"`
}

type Envelope_GetDocumentSymbols struct {
	GetDocumentSymbols *GetDocumentSymbols `protobuf:"bytes,330,opt,name=get_document_symbols,json=getDocumentSymbols,proto3,oneof"`
}

type Envelope_GetDocumentSymbolsResponse struct {
	GetDocumentSymbolsResponse *GetDocumentSymbolsResponse `protobuf:"bytes,331,opt,name=get_document_symbols_response,json=getDocumentSymbolsResponse,proto3,oneof"`
}

type Envelope_LanguageServerIdForName struct {
	LanguageServerIdForName *LanguageServerIdForName `protobuf:"bytes,332,opt,name=language_server_id_for_name,json=languageServerIdForName,proto3,oneof"`
}

type Envelope_LanguageServerIdForNameResponse struct {
	LanguageServerIdForNameResponse *LanguageServerIdForNameResponse `protobuf:"bytes,333,opt,name=language_server_id_for_name_response,json=languageServerIdForNameResponse,proto3,oneof"`
}

type Envelope_LoadCommitDiff struct {
	LoadCommitDiff *LoadCommitDiff `protobuf:"bytes,334,opt,name=load_commit_diff,json=loadCommitDiff,proto3,oneof"`
}

type Envelope_LoadCommitDiffResponse struct {
	LoadCommitDiffResponse *LoadCommitDiffResponse `protobuf:"bytes,335,opt,name=load_commit_diff_response,json=loadCommitDiffResponse,proto3,oneof"`
}

type Envelope_StopLanguageServers struct {
	StopLanguageServers *StopLanguageServers `protobuf:"bytes,336,opt,name=stop_language_servers,json=stopLanguageServers,proto3,oneof"`
}

type Envelope_LspExtRunnables struct {
	LspExtRunnables *LspExtRunnables `protobuf:"bytes,337,opt,name=lsp_ext_runnables,json=lspExtRunnables,proto3,oneof"`
}

type Envelope_LspExtRunnablesResponse struct {
	LspExtRunnablesResponse *LspExtRunnablesResponse `protobuf:"bytes,338,opt,name=lsp_ext_runnables_response,json=lspExtRunnablesResponse,proto3,oneof"`
}

type Envelope_GetDebugAdapterBinary struct {
	GetDebugAdapterBinary *GetDebugAdapterBinary `protobuf:"bytes,339,opt,name=get_debug_adapter_binary,json=getDebugAdapterBinary,proto3,oneof"`
}

type Envelope_DebugAdapterBinary_ struct {
	DebugAdapterBinary_ *DebugAdapterBinary `protobuf:"bytes,340,opt,name=debug_adapter_binary,json=debugAdapterBinary,proto3,oneof"`
}

type Envelope_RunDebugLocators struct {
	RunDebugLocators *RunDebugLocators `protobuf:"bytes,341,opt,name=run_debug_locators,json=runDebugLocators,proto3,oneof"`
}

type Envelope_DebugRequest struct {
	DebugRequest *DebugRequest `protobuf:"bytes,342,opt,name=debug_request,json=debugRequest,proto3,oneof"`
}

type Envelope_LspExtGoToParentModule struct {
	LspExtGoToParentModule *LspExtGoToParentModule `protobuf:"bytes,343,opt,name=lsp_ext_go_to_parent_module,json=lspExtGoToParentModule,proto3,oneof"`
}

type Envelope_LspExtGoToParentModuleResponse struct {
	LspExtGoToParentModuleResponse *LspExtGoToParentModuleResponse `protobuf:"bytes,344,opt,name=lsp_ext_go_to_parent_module_response,json=lspExtGoToParentModuleResponse,proto3,oneof"`
}

type Envelope_LspExtCancelFlycheck struct {
	LspExtCancelFlycheck *LspExtCancelFlycheck `protobuf:"bytes,345,opt,name=lsp_ext_cancel_flycheck,json=lspExtCancelFlycheck,proto3,oneof"`
}

type Envelope_LspExtRunFlycheck struct {
	LspExtRunFlycheck *LspExtRunFlycheck `protobuf:"bytes,346,opt,name=lsp_ext_run_flycheck,json=lspExtRunFlycheck,proto3,oneof"`
}

type Envelope_LspExtClearFlycheck struct {
	LspExtClearFlycheck *LspExtClearFlycheck `protobuf:"bytes,347,opt,name=lsp_ext_clear_flycheck,json=lspExtClearFlycheck,proto3,oneof"`
}

type Envelope_LogToDebugConsole struct {
	LogToDebugConsole *LogToDebugConsole `protobuf:"bytes,348,opt,name=log_to_debug_console,json=logToDebugConsole,proto3,oneof"` // current max
}

func (*Envelope_Hello) isEnvelope_Payload() {}

func (*Envelope_Ack) isEnvelope_Payload() {}

func (*Envelope_Error) isEnvelope_Payload() {}

func (*Envelope_Ping) isEnvelope_Payload() {}

func (*Envelope_Test) isEnvelope_Payload() {}

func (*Envelope_EndStream) isEnvelope_Payload() {}

func (*Envelope_CreateRoom) isEnvelope_Payload() {}

func (*Envelope_CreateRoomResponse) isEnvelope_Payload() {}

func (*Envelope_JoinRoom) isEnvelope_Payload() {}

func (*Envelope_JoinRoomResponse) isEnvelope_Payload() {}

func (*Envelope_RejoinRoom) isEnvelope_Payload() {}

func (*Envelope_RejoinRoomResponse) isEnvelope_Payload() {}

func (*Envelope_LeaveRoom) isEnvelope_Payload() {}

func (*Envelope_Call) isEnvelope_Payload() {}

func (*Envelope_IncomingCall) isEnvelope_Payload() {}

func (*Envelope_CallCanceled) isEnvelope_Payload() {}

func (*Envelope_CancelCall) isEnvelope_Payload() {}

func (*Envelope_DeclineCall) isEnvelope_Payload() {}

func (*Envelope_UpdateParticipantLocation) isEnvelope_Payload() {}

func (*Envelope_RoomUpdated) isEnvelope_Payload() {}

func (*Envelope_ShareProject) isEnvelope_Payload() {}

func (*Envelope_ShareProjectResponse) isEnvelope_Payload() {}

func (*Envelope_UnshareProject) isEnvelope_Payload() {}

func (*Envelope_JoinProject) isEnvelope_Payload() {}

func (*Envelope_JoinProjectResponse) isEnvelope_Payload() {}

func (*Envelope_LeaveProject) isEnvelope_Payload() {}

func (*Envelope_AddProjectCollaborator) isEnvelope_Payload() {}

func (*Envelope_UpdateProjectCollaborator) isEnvelope_Payload() {}

func (*Envelope_RemoveProjectCollaborator) isEnvelope_Payload() {}

func (*Envelope_GetDefinition) isEnvelope_Payload() {}

func (*Envelope_GetDefinitionResponse) isEnvelope_Payload() {}

func (*Envelope_GetDeclaration) isEnvelope_Payload() {}

func (*Envelope_GetDeclarationResponse) isEnvelope_Payload() {}

func (*Envelope_GetTypeDefinition) isEnvelope_Payload() {}

func (*Envelope_GetTypeDefinitionResponse) isEnvelope_Payload() {}

func (*Envelope_GetReferences) isEnvelope_Payload() {}

func (*Envelope_GetReferencesResponse) isEnvelope_Payload() {}

func (*Envelope_GetDocumentHighlights) isEnvelope_Payload() {}

func (*Envelope_GetDocumentHighlightsResponse) isEnvelope_Payload() {}

func (*Envelope_GetProjectSymbols) isEnvelope_Payload() {}

func (*Envelope_GetProjectSymbolsResponse) isEnvelope_Payload() {}

func (*Envelope_OpenBufferForSymbol) isEnvelope_Payload() {}

func (*Envelope_OpenBufferForSymbolResponse) isEnvelope_Payload() {}

func (*Envelope_UpdateProject) isEnvelope_Payload() {}

func (*Envelope_UpdateWorktree) isEnvelope_Payload() {}

func (*Envelope_CreateProjectEntry) isEnvelope_Payload() {}

func (*Envelope_RenameProjectEntry) isEnvelope_Payload() {}

func (*Envelope_CopyProjectEntry) isEnvelope_Payload() {}

func (*Envelope_DeleteProjectEntry) isEnvelope_Payload() {}

func (*Envelope_ProjectEntryResponse) isEnvelope_Payload() {}

func (*Envelope_ExpandProjectEntry) isEnvelope_Payload() {}

func (*Envelope_ExpandProjectEntryResponse) isEnvelope_Payload() {}

func (*Envelope_ExpandAllForProjectEntry) isEnvelope_Payload() {}

func (*Envelope_ExpandAllForProjectEntryResponse) isEnvelope_Payload() {}

func (*Envelope_UpdateDiagnosticSummary) isEnvelope_Payload() {}

func (*Envelope_StartLanguageServer) isEnvelope_Payload() {}

func (*Envelope_UpdateLanguageServer) isEnvelope_Payload() {}

func (*Envelope_OpenBufferById) isEnvelope_Payload() {}

func (*Envelope_OpenBufferByPath) isEnvelope_Payload() {}

func (*Envelope_OpenBufferResponse) isEnvelope_Payload() {}

func (*Envelope_CreateBufferForPeer) isEnvelope_Payload() {}

func (*Envelope_UpdateBuffer) isEnvelope_Payload() {}

func (*Envelope_UpdateBufferFile) isEnvelope_Payload() {}

func (*Envelope_SaveBuffer) isEnvelope_Payload() {}

func (*Envelope_BufferSaved) isEnvelope_Payload() {}

func (*Envelope_BufferReloaded) isEnvelope_Payload() {}

func (*Envelope_ReloadBuffers) isEnvelope_Payload() {}

func (*Envelope_ReloadBuffersResponse) isEnvelope_Payload() {}

func (*Envelope_SynchronizeBuffers) isEnvelope_Payload() {}

func (*Envelope_SynchronizeBuffersResponse) isEnvelope_Payload() {}

func (*Envelope_FormatBuffers) isEnvelope_Payload() {}

func (*Envelope_FormatBuffersResponse) isEnvelope_Payload() {}

func (*Envelope_GetCompletions) isEnvelope_Payload() {}

func (*Envelope_GetCompletionsResponse) isEnvelope_Payload() {}

func (*Envelope_ResolveCompletionDocumentation) isEnvelope_Payload() {}

func (*Envelope_ResolveCompletionDocumentationResponse) isEnvelope_Payload() {}

func (*Envelope_ApplyCompletionAdditionalEdits) isEnvelope_Payload() {}

func (*Envelope_ApplyCompletionAdditionalEditsResponse) isEnvelope_Payload() {}

func (*Envelope_GetCodeActions) isEnvelope_Payload() {}

func (*Envelope_GetCodeActionsResponse) isEnvelope_Payload() {}

func (*Envelope_GetHover) isEnvelope_Payload() {}

func (*Envelope_GetHoverResponse) isEnvelope_Payload() {}

func (*Envelope_ApplyCodeAction) isEnvelope_Payload() {}

func (*Envelope_ApplyCodeActionResponse) isEnvelope_Payload() {}

func (*Envelope_PrepareRename) isEnvelope_Payload() {}

func (*Envelope_PrepareRenameResponse) isEnvelope_Payload() {}

func (*Envelope_PerformRename) isEnvelope_Payload() {}

func (*Envelope_PerformRenameResponse) isEnvelope_Payload() {}

func (*Envelope_UpdateContacts) isEnvelope_Payload() {}

func (*Envelope_UpdateInviteInfo) isEnvelope_Payload() {}

func (*Envelope_ShowContacts) isEnvelope_Payload() {}

func (*Envelope_GetUsers) isEnvelope_Payload() {}

func (*Envelope_FuzzySearchUsers) isEnvelope_Payload() {}

func (*Envelope_UsersResponse) isEnvelope_Payload() {}

func (*Envelope_RequestContact) isEnvelope_Payload() {}

func (*Envelope_RespondToContactRequest) isEnvelope_Payload() {}

func (*Envelope_RemoveContact) isEnvelope_Payload() {}

func (*Envelope_Follow) isEnvelope_Payload() {}

func (*Envelope_FollowResponse) isEnvelope_Payload() {}

func (*Envelope_UpdateFollowers) isEnvelope_Payload() {}

func (*Envelope_Unfollow) isEnvelope_Payload() {}

func (*Envelope_GetPrivateUserInfo) isEnvelope_Payload() {}

func (*Envelope_GetPrivateUserInfoResponse) isEnvelope_Payload() {}

func (*Envelope_UpdateUserPlan) isEnvelope_Payload() {}

func (*Envelope_UpdateDiffBases) isEnvelope_Payload() {}

func (*Envelope_AcceptTermsOfService) isEnvelope_Payload() {}

func (*Envelope_AcceptTermsOfServiceResponse) isEnvelope_Payload() {}

func (*Envelope_OnTypeFormatting) isEnvelope_Payload() {}

func (*Envelope_OnTypeFormattingResponse) isEnvelope_Payload() {}

func (*Envelope_UpdateWorktreeSettings) isEnvelope_Payload() {}

func (*Envelope_InlayHints) isEnvelope_Payload() {}

func (*Envelope_InlayHintsResponse) isEnvelope_Payload() {}

func (*Envelope_ResolveInlayHint) isEnvelope_Payload() {}

func (*Envelope_ResolveInlayHintResponse) isEnvelope_Payload() {}

func (*Envelope_RefreshInlayHints) isEnvelope_Payload() {}

func (*Envelope_CreateChannel) isEnvelope_Payload() {}

func (*Envelope_CreateChannelResponse) isEnvelope_Payload() {}

func (*Envelope_InviteChannelMember) isEnvelope_Payload() {}

func (*Envelope_RemoveChannelMember) isEnvelope_Payload() {}

func (*Envelope_RespondToChannelInvite) isEnvelope_Payload() {}

func (*Envelope_UpdateChannels) isEnvelope_Payload() {}

func (*Envelope_JoinChannel) isEnvelope_Payload() {}

func (*Envelope_DeleteChannel) isEnvelope_Payload() {}

func (*Envelope_GetChannelMembers) isEnvelope_Payload() {}

func (*Envelope_GetChannelMembersResponse) isEnvelope_Payload() {}

func (*Envelope_SetChannelMemberRole) isEnvelope_Payload() {}

func (*Envelope_RenameChannel) isEnvelope_Payload() {}

func (*Envelope_RenameChannelResponse) isEnvelope_Payload() {}

func (*Envelope_SubscribeToChannels) isEnvelope_Payload() {}

func (*Envelope_JoinChannelBuffer) isEnvelope_Payload() {}

func (*Envelope_JoinChannelBufferResponse) isEnvelope_Payload() {}

func (*Envelope_UpdateChannelBuffer) isEnvelope_Payload() {}

func (*Envelope_LeaveChannelBuffer) isEnvelope_Payload() {}

func (*Envelope_UpdateChannelBufferCollaborators) isEnvelope_Payload() {}

func (*Envelope_RejoinChannelBuffers) isEnvelope_Payload() {}

func (*Envelope_RejoinChannelBuffersResponse) isEnvelope_Payload() {}

func (*Envelope_AckBufferOperation) isEnvelope_Payload() {}

func (*Envelope_JoinChannelChat) isEnvelope_Payload() {}

func (*Envelope_JoinChannelChatResponse) isEnvelope_Payload() {}

func (*Envelope_LeaveChannelChat) isEnvelope_Payload() {}

func (*Envelope_SendChannelMessage) isEnvelope_Payload() {}

func (*Envelope_SendChannelMessageResponse) isEnvelope_Payload() {}

func (*Envelope_ChannelMessageSent) isEnvelope_Payload() {}

func (*Envelope_GetChannelMessages) isEnvelope_Payload() {}

func (*Envelope_GetChannelMessagesResponse) isEnvelope_Payload() {}

func (*Envelope_RemoveChannelMessage) isEnvelope_Payload() {}

func (*Envelope_AckChannelMessage) isEnvelope_Payload() {}

func (*Envelope_GetChannelMessagesById) isEnvelope_Payload() {}

func (*Envelope_MoveChannel) isEnvelope_Payload() {}

func (*Envelope_SetChannelVisibility) isEnvelope_Payload() {}

func (*Envelope_AddNotification) isEnvelope_Payload() {}

func (*Envelope_GetNotifications) isEnvelope_Payload() {}

func (*Envelope_GetNotificationsResponse) isEnvelope_Payload() {}

func (*Envelope_DeleteNotification) isEnvelope_Payload() {}

func (*Envelope_MarkNotificationRead) isEnvelope_Payload() {}

func (*Envelope_LspExtExpandMacro) isEnvelope_Payload() {}

func (*Envelope_LspExtExpandMacroResponse) isEnvelope_Payload() {}

func (*Envelope_SetRoomParticipantRole) isEnvelope_Payload() {}

func (*Envelope_UpdateUserChannels) isEnvelope_Payload() {}

func (*Envelope_GetImplementation) isEnvelope_Payload() {}

func (*Envelope_GetImplementationResponse) isEnvelope_Payload() {}

func (*Envelope_UpdateChannelMessage) isEnvelope_Payload() {}

func (*Envelope_ChannelMessageUpdate) isEnvelope_Payload() {}

func (*Envelope_BlameBuffer) isEnvelope_Payload() {}

func (*Envelope_BlameBufferResponse) isEnvelope_Payload() {}

func (*Envelope_UpdateNotification) isEnvelope_Payload() {}

func (*Envelope_MultiLspQuery) isEnvelope_Payload() {}

func (*Envelope_MultiLspQueryResponse) isEnvelope_Payload() {}

func (*Envelope_RestartLanguageServers) isEnvelope_Payload() {}

func (*Envelope_RejoinRemoteProjects) isEnvelope_Payload() {}

func (*Envelope_RejoinRemoteProjectsResponse) isEnvelope_Payload() {}

func (*Envelope_OpenNewBuffer) isEnvelope_Payload() {}

func (*Envelope_GetSupermavenApiKey) isEnvelope_Payload() {}

func (*Envelope_GetSupermavenApiKeyResponse) isEnvelope_Payload() {}

func (*Envelope_TaskContextForLocation) isEnvelope_Payload() {}

func (*Envelope_TaskContext) isEnvelope_Payload() {}

func (*Envelope_LinkedEditingRange) isEnvelope_Payload() {}

func (*Envelope_LinkedEditingRangeResponse) isEnvelope_Payload() {}

func (*Envelope_AdvertiseContexts) isEnvelope_Payload() {}

func (*Envelope_OpenContext) isEnvelope_Payload() {}

func (*Envelope_OpenContextResponse) isEnvelope_Payload() {}

func (*Envelope_CreateContext) isEnvelope_Payload() {}

func (*Envelope_CreateContextResponse) isEnvelope_Payload() {}

func (*Envelope_UpdateContext) isEnvelope_Payload() {}

func (*Envelope_SynchronizeContexts) isEnvelope_Payload() {}

func (*Envelope_SynchronizeContextsResponse) isEnvelope_Payload() {}

func (*Envelope_GetSignatureHelp) isEnvelope_Payload() {}

func (*Envelope_GetSignatureHelpResponse) isEnvelope_Payload() {}

func (*Envelope_ListRemoteDirectory) isEnvelope_Payload() {}

func (*Envelope_ListRemoteDirectoryResponse) isEnvelope_Payload() {}

func (*Envelope_AddWorktree) isEnvelope_Payload() {}

func (*Envelope_AddWorktreeResponse) isEnvelope_Payload() {}

func (*Envelope_GetLlmToken) isEnvelope_Payload() {}

func (*Envelope_GetLlmTokenResponse) isEnvelope_Payload() {}

func (*Envelope_RefreshLlmToken) isEnvelope_Payload() {}

func (*Envelope_LspExtSwitchSourceHeader) isEnvelope_Payload() {}

func (*Envelope_LspExtSwitchSourceHeaderResponse) isEnvelope_Payload() {}

func (*Envelope_FindSearchCandidates) isEnvelope_Payload() {}

func (*Envelope_FindSearchCandidatesResponse) isEnvelope_Payload() {}

func (*Envelope_CloseBuffer) isEnvelope_Payload() {}

func (*Envelope_ShutdownRemoteServer) isEnvelope_Payload() {}

func (*Envelope_RemoveWorktree) isEnvelope_Payload() {}

func (*Envelope_LanguageServerLog) isEnvelope_Payload() {}

func (*Envelope_Toast) isEnvelope_Payload() {}

func (*Envelope_HideToast) isEnvelope_Payload() {}

func (*Envelope_OpenServerSettings) isEnvelope_Payload() {}

func (*Envelope_GetPermalinkToLine) isEnvelope_Payload() {}

func (*Envelope_GetPermalinkToLineResponse) isEnvelope_Payload() {}

func (*Envelope_FlushBufferedMessages) isEnvelope_Payload() {}

func (*Envelope_LanguageServerPromptRequest) isEnvelope_Payload() {}

func (*Envelope_LanguageServerPromptResponse) isEnvelope_Payload() {}

func (*Envelope_GitBranchesResponse) isEnvelope_Payload() {}

func (*Envelope_UpdateGitBranch) isEnvelope_Payload() {}

func (*Envelope_ListToolchains) isEnvelope_Payload() {}

func (*Envelope_ListToolchainsResponse) isEnvelope_Payload() {}

func (*Envelope_ActivateToolchain) isEnvelope_Payload() {}

func (*Envelope_ActiveToolchain) isEnvelope_Payload() {}

func (*Envelope_ActiveToolchainResponse) isEnvelope_Payload() {}

func (*Envelope_GetPathMetadata) isEnvelope_Payload() {}

func (*Envelope_GetPathMetadataResponse) isEnvelope_Payload() {}

func (*Envelope_GetPanicFiles) isEnvelope_Payload() {}

func (*Envelope_GetPanicFilesResponse) isEnvelope_Payload() {}

func (*Envelope_CancelLanguageServerWork) isEnvelope_Payload() {}

func (*Envelope_LspExtOpenDocs) isEnvelope_Payload() {}

func (*Envelope_LspExtOpenDocsResponse) isEnvelope_Payload() {}

func (*Envelope_SyncExtensions) isEnvelope_Payload() {}

func (*Envelope_SyncExtensionsResponse) isEnvelope_Payload() {}

func (*Envelope_InstallExtension) isEnvelope_Payload() {}

func (*Envelope_OpenUnstagedDiff) isEnvelope_Payload() {}

func (*Envelope_OpenUnstagedDiffResponse) isEnvelope_Payload() {}

func (*Envelope_RegisterBufferWithLanguageServers) isEnvelope_Payload() {}

func (*Envelope_Stage) isEnvelope_Payload() {}

func (*Envelope_Unstage) isEnvelope_Payload() {}

func (*Envelope_Commit) isEnvelope_Payload() {}

func (*Envelope_OpenCommitMessageBuffer) isEnvelope_Payload() {}

func (*Envelope_OpenUncommittedDiff) isEnvelope_Payload() {}

func (*Envelope_OpenUncommittedDiffResponse) isEnvelope_Payload() {}

func (*Envelope_SetIndexText) isEnvelope_Payload() {}

func (*Envelope_GitShow) isEnvelope_Payload() {}

func (*Envelope_GitReset) isEnvelope_Payload() {}

func (*Envelope_GitCommitDetails) isEnvelope_Payload() {}

func (*Envelope_GitCheckoutFiles) isEnvelope_Payload() {}

func (*Envelope_Push) isEnvelope_Payload() {}

func (*Envelope_Fetch) isEnvelope_Payload() {}

func (*Envelope_GetRemotes) isEnvelope_Payload() {}

func (*Envelope_GetRemotesResponse) isEnvelope_Payload() {}

func (*Envelope_Pull) isEnvelope_Payload() {}

func (*Envelope_ApplyCodeActionKind) isEnvelope_Payload() {}

func (*Envelope_ApplyCodeActionKindResponse) isEnvelope_Payload() {}

func (*Envelope_RemoteMessageResponse) isEnvelope_Payload() {}

func (*Envelope_GitGetBranches) isEnvelope_Payload() {}

func (*Envelope_GitCreateBranch) isEnvelope_Payload() {}

func (*Envelope_GitChangeBranch) isEnvelope_Payload() {}

func (*Envelope_CheckForPushedCommits) isEnvelope_Payload() {}

func (*Envelope_CheckForPushedCommitsResponse) isEnvelope_Payload() {}

func (*Envelope_AskPassRequest) isEnvelope_Payload() {}

func (*Envelope_AskPassResponse) isEnvelope_Payload() {}

func (*Envelope_GitDiff) isEnvelope_Payload() {}

func (*Envelope_GitDiffResponse) isEnvelope_Payload() {}

func (*Envelope_GitInit) isEnvelope_Payload() {}

func (*Envelope_CodeLens) isEnvelope_Payload() {}

func (*Envelope_GetCodeLens_) isEnvelope_Payload() {}

func (*Envelope_GetCodeLensResponse) isEnvelope_Payload() {}

func (*Envelope_RefreshCodeLens) isEnvelope_Payload() {}

func (*Envelope_ToggleBreakpoint) isEnvelope_Payload() {}

func (*Envelope_BreakpointsForFile) isEnvelope_Payload() {}

func (*Envelope_UpdateRepository) isEnvelope_Payload() {}

func (*Envelope_RemoveRepository) isEnvelope_Payload() {}

func (*Envelope_GetDocumentSymbols) isEnvelope_Payload() {}

func (*Envelope_GetDocumentSymbolsResponse) isEnvelope_Payload() {}

func (*Envelope_LanguageServerIdForName) isEnvelope_Payload() {}

func (*Envelope_LanguageServerIdForNameResponse) isEnvelope_Payload() {}

func (*Envelope_LoadCommitDiff) isEnvelope_Payload() {}

func (*Envelope_LoadCommitDiffResponse) isEnvelope_Payload() {}

func (*Envelope_StopLanguageServers) isEnvelope_Payload() {}

func (*Envelope_LspExtRunnables) isEnvelope_Payload() {}

func (*Envelope_LspExtRunnablesResponse) isEnvelope_Payload() {}

func (*Envelope_GetDebugAdapterBinary) isEnvelope_Payload() {}

func (*Envelope_DebugAdapterBinary_) isEnvelope_Payload() {}

func (*Envelope_RunDebugLocators) isEnvelope_Payload() {}

func (*Envelope_DebugRequest) isEnvelope_Payload() {}

func (*Envelope_LspExtGoToParentModule) isEnvelope_Payload() {}

func (*Envelope_LspExtGoToParentModuleResponse) isEnvelope_Payload() {}

func (*Envelope_LspExtCancelFlycheck) isEnvelope_Payload() {}

func (*Envelope_LspExtRunFlycheck) isEnvelope_Payload() {}

func (*Envelope_LspExtClearFlycheck) isEnvelope_Payload() {}

func (*Envelope_LogToDebugConsole) isEnvelope_Payload() {}

type Hello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId *PeerId `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *Hello) Reset() {
	*x = Hello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hello) ProtoMessage() {}

func (x *Hello) ProtoReflect() protoreflect.Message {
	mi := &file_zed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hello.ProtoReflect.Descriptor instead.
func (*Hello) Descriptor() ([]byte, []int) {
	return file_zed_proto_rawDescGZIP(), []int{1}
}

func (x *Hello) GetPeerId() *PeerId {
	if x != nil {
		return x.PeerId
	}
	return nil
}

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_zed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_zed_proto_rawDescGZIP(), []int{2}
}

type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_zed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_zed_proto_rawDescGZIP(), []int{3}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string    `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code    ErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=zed.messages.ErrorCode" json:"code,omitempty"`
	Tags    []string  `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_zed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_zed_proto_rawDescGZIP(), []int{4}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_Internal
}

func (x *Error) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type EndStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndStream) Reset() {
	*x = EndStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndStream) ProtoMessage() {}

func (x *EndStream) ProtoReflect() protoreflect.Message {
	mi := &file_zed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndStream.ProtoReflect.Descriptor instead.
func (*EndStream) Descriptor() ([]byte, []int) {
	return file_zed_proto_rawDescGZIP(), []int{5}
}

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_zed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_zed_proto_rawDescGZIP(), []int{6}
}

func (x *Test) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FlushBufferedMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlushBufferedMessages) Reset() {
	*x = FlushBufferedMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushBufferedMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushBufferedMessages) ProtoMessage() {}

func (x *FlushBufferedMessages) ProtoReflect() protoreflect.Message {
	mi := &file_zed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushBufferedMessages.ProtoReflect.Descriptor instead.
func (*FlushBufferedMessages) Descriptor() ([]byte, []int) {
	return file_zed_proto_rawDescGZIP(), []int{7}
}

type FlushBufferedMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlushBufferedMessagesResponse) Reset() {
	*x = FlushBufferedMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zed_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushBufferedMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushBufferedMessagesResponse) ProtoMessage() {}

func (x *FlushBufferedMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zed_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushBufferedMessagesResponse.ProtoReflect.Descriptor instead.
func (*FlushBufferedMessagesResponse) Descriptor() ([]byte, []int) {
	return file_zed_proto_rawDescGZIP(), []int{8}
}

var File_zed_proto protoreflect.FileDescriptor

var file_zed_proto_rawDesc = []byte{
	0x0a, 0x09, 0x7a, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x08, 0x61, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x63, 0x61,
	0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x67, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09,
	0x6c, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x74, 0x6f, 0x6f, 0x6c, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x77, 0x6f, 0x72, 0x6b,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0xc2, 0x01, 0x0a, 0x08,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x47, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x48, 0x02, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x8a, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x05,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x05,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x25, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0xa5, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x54, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x6f,
	0x6f, 0x6d, 0x12, 0x4e, 0x0a, 0x12, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f,
	0x6d, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x54, 0x0a, 0x14, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6a,
	0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x28, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x0d,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3e, 0x0a, 0x0c,
	0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x69, 0x0a, 0x1b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x6d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5a, 0x0a, 0x16, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x75, 0x6e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55,
	0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x75, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x3e, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x57, 0x0a, 0x15, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x60, 0x0a, 0x18, 0x61,
	0x64, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x16, 0x61, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x69, 0x0a,
	0x1b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x19, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x69, 0x0a, 0x1b, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x17, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xed, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xee,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x67,
	0x65, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x67, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x17, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x17, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x76, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x1d, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x11, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x12, 0x6a, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x71, 0x0a, 0x1f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x74, 0x72, 0x65, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x12, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x54, 0x0a, 0x14, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x12, 0x63, 0x6f, 0x70, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x70, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x5a, 0x0a,
	0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x6d, 0x0a, 0x1d, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x1a, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69,
	0x0a, 0x1c, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xa3,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x46, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x18, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x82, 0x01, 0x0a, 0x25, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0xa4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x20, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63,
	0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x17, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x57, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x16,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68,
	0x48, 0x00, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x79,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x54, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x44, 0x0a,
	0x0e, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a,
	0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x48, 0x00, 0x52, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x6c, 0x0a, 0x1c, 0x73, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x17, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x91, 0x01, 0x0a, 0x29, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x26, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x21, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x73, 0x48, 0x00, 0x52, 0x1e,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x73, 0x12, 0x92,
	0x01, 0x0a, 0x2a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x64, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x26, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a,
	0x19, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x4f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x67,
	0x65, 0x74, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x68,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x53, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x5d, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x4e, 0x0a,
	0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a,
	0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x5b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x35, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x5c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x08, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x66, 0x75, 0x7a, 0x7a, 0x79,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x5d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x10, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x64, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x61,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x62, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x12, 0x47, 0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x75, 0x6e, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x48, 0x00, 0x52, 0x08, 0x75, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x55, 0x0a,
	0x15, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x12, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6e, 0x0a, 0x1e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x4b, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x42, 0x61, 0x73, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x17,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xf0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x12, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x10, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x67, 0x0a, 0x1b, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x18, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x18, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x48, 0x00, 0x52, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x74, 0x72, 0x65, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x0b,
	0x69, 0x6e, 0x6c, 0x61, 0x79, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x69,
	0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x14, 0x69, 0x6e, 0x6c,
	0x61, 0x79, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x6c,
	0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x61, 0x79,
	0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x12,
	0x67, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x6c, 0x61, 0x79,
	0x5f, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x6f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x6c, 0x61, 0x79,
	0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x6c, 0x61, 0x79, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x6c, 0x61,
	0x79, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x71, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x48, 0x00, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x5d, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x72, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x15, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x61, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18,
	0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x16, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x3e,
	0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x77,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48,
	0x00, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x44,
	0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x51, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x79, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x7b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x44, 0x0a, 0x0e, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x5d, 0x0a, 0x17, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0xcf,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x51, 0x0a, 0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x11, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x12, 0x6a, 0x0a, 0x1c, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x19, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x14, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x80, 0x01, 0x0a, 0x23, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x48, 0x00,
	0x52, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x5b, 0x0a, 0x16, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x83, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x6a, 0x6f, 0x69,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12,
	0x74, 0x0a, 0x1f, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x85, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x11,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x12, 0x65, 0x0a, 0x1a, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x12, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x48, 0x00,
	0x52, 0x10, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x1d, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x73,
	0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x55, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x67, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x8f, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42,
	0x79, 0x49, 0x64, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x93, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48,
	0x00, 0x52, 0x0b, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x5b,
	0x0a, 0x16, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x10, 0x61,
	0x64, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x96, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x14,
	0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x53, 0x0a, 0x14, 0x6c, 0x73, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x5f,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x18, 0x9a, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x4d,
	0x61, 0x63, 0x72, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x12, 0x6c, 0x0a, 0x1d, 0x6c, 0x73, 0x70,
	0x5f, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x72,
	0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x63,
	0x72, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x6c, 0x73,
	0x70, 0x45, 0x78, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x12,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x51, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b,
	0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x62,
	0x6c, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0xac, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0b, 0x62, 0x6c, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x15,
	0x62, 0x6c, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x61, 0x6d,
	0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x13, 0x62, 0x6c, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xae, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x73, 0x70, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x73, 0x70, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x5f, 0x0a, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x73,
	0x70, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x73, 0x70, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x73, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x48, 0x00,
	0x52, 0x16, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x16, 0x72, 0x65, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x14, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x1f, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x72,
	0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0xc4,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x65, 0x77, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x4e, 0x65, 0x77, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x76, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xc6, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x76, 0x65,
	0x6e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x6d, 0x61, 0x76, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x72,
	0x0a, 0x1f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x76, 0x65, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x76, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x67, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x76, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x19, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16,
	0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x6e,
	0x0a, 0x1d, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x1a, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x12, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x73, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x48, 0x00, 0x52, 0x11,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x58, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xd5, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0xe8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x5e, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xe9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x79,
	0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x48, 0x00, 0x52, 0x13,
	0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x12, 0x70, 0x0a, 0x1d, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x18, 0xd9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65,
	0x6c, 0x70, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x68, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x67, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x71, 0x0a, 0x1e, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xdc, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x0c, 0x61, 0x64, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x18, 0xde, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x12, 0x58,
	0x0a, 0x15, 0x61, 0x64, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x13, 0x61, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f,
	0x6c, 0x6c, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x6c, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x67,
	0x65, 0x74, 0x4c, 0x6c, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x16, 0x67, 0x65,
	0x74, 0x5f, 0x6c, 0x6c, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6c,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x13, 0x67, 0x65, 0x74, 0x4c, 0x6c, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x6c, 0x6c, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x83, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4c, 0x6c, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4c, 0x6c, 0x6d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x69, 0x0a, 0x1c, 0x6c, 0x73, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x18, 0x6c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x82,
	0x01, 0x0a, 0x25, 0x6c, 0x73, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c,
	0x73, 0x70, 0x45, 0x78, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x20, 0x6c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0xf3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x64,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x74, 0x0a, 0x1f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x66, 0x69, 0x6e, 0x64, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x16, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x14,
	0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x18, 0x82, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x12, 0x52,
	0x0a, 0x13, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52,
	0x11, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x85, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x86,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x68, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x87, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x88, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f,
	0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x6f, 0x0a, 0x1e, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x89, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x54,
	0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x1a, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x4c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x17, 0x66,
	0x6c, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x8b, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x15, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x1e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x8c, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x1b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74,
	0x0a, 0x1f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x8d, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x8f, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x67, 0x69, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x90, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x48, 0x0a, 0x0f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18,
	0x91, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x18, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74,
	0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x92, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f,
	0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x93, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x94, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6f,
	0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x64, 0x0a, 0x19, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x95, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f,
	0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x96, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x65, 0x0a,
	0x1a, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x97, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x67, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x69,
	0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x67,
	0x65, 0x74, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x18,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x99, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74, 0x50, 0x61, 0x6e, 0x69, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x1b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x9a, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x18, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x4a, 0x0a, 0x11, 0x6c, 0x73, 0x70, 0x5f, 0x65,
	0x78, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x9b, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x6f, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x44,
	0x6f, 0x63, 0x73, 0x12, 0x63, 0x0a, 0x1a, 0x6c, 0x73, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x9c, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x16, 0x6c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x6f, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9d, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x61, 0x0a, 0x18, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x9e,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x73,
	0x79, 0x6e, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x9f, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x75, 0x6e,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0xa0, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x44, 0x69,
	0x66, 0x66, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x12, 0x68, 0x0a, 0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x75,
	0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xa1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x6f, 0x70, 0x65, 0x6e, 0x55, 0x6e, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x84, 0x01, 0x0a, 0x25, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x48, 0x00, 0x52, 0x21, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0xa5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0xa6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0xa7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x65, 0x0a, 0x1a, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0xa8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x12, 0x58, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0xa9, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x55, 0x6e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x12, 0x71, 0x0a, 0x1e, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xaa, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0xab, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54,
	0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18,
	0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x48, 0x00, 0x52,
	0x07, 0x67, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x67, 0x69, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x4f, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x10, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x4f, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x10, 0x67, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x50, 0x75, 0x73, 0x68, 0x48, 0x00, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x2c, 0x0a,
	0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x0b, 0x67,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x18, 0xb2, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0xb3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x04, 0x70, 0x75, 0x6c, 0x6c, 0x18, 0xb4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50,
	0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x70, 0x75, 0x6c, 0x6c, 0x12, 0x59, 0x0a, 0x16, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x72, 0x0a, 0x1f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x17, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xb7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x67, 0x69,
	0x74, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0xb8,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x69, 0x74, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0xb9, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x47, 0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x48, 0x00, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x4c, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0xba, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x48, 0x00,
	0x52, 0x0f, 0x67, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x5f, 0x0a, 0x18, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0xbb, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x73, 0x68,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x48, 0x00, 0x52, 0x15, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x78, 0x0a, 0x21, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10,
	0x61, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0xbd, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x61, 0x73, 0x6b, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xbe, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x73, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x18, 0xbf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x48,
	0x00, 0x52, 0x07, 0x67, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x4c, 0x0a, 0x11, 0x67, 0x69,
	0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0xc0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x18, 0xc1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x49, 0x6e,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x69, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x36, 0x0a,
	0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x18, 0xc2, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x64,
	0x65, 0x4c, 0x65, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x18, 0xc3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0xc4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c,
	0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x18, 0xc5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73,
	0x12, 0x4e, 0x0a, 0x11, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xc6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x55, 0x0a, 0x14, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0xc7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0xc8, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0xc9, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18,
	0xca, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x6e,
	0x0a, 0x1d, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0xcb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x1a, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66,
	0x0a, 0x1b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xcc, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x46,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x24, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xcd,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0xce, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66,
	0x48, 0x00, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x12, 0x62, 0x0a, 0x19, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0xcf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0xd0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x6f,
	0x70, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x4c, 0x0a, 0x11, 0x6c, 0x73, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0xd1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x45,
	0x78, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x6c,
	0x73, 0x70, 0x45, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x65,
	0x0a, 0x1a, 0x6c, 0x73, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xd2, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6c, 0x73,
	0x70, 0x45, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x18, 0xd3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x15, 0x67, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x14, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0xd4,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x4f, 0x0a,
	0x12, 0x72, 0x75, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0xd5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x10, 0x72, 0x75,
	0x6e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x42,
	0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0xd6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x64, 0x0a, 0x1b, 0x6c, 0x73, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x67, 0x6f,
	0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0xd7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x47, 0x6f,
	0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x16, 0x6c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x47, 0x6f, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x7d, 0x0a, 0x24, 0x6c, 0x73, 0x70, 0x5f,
	0x65, 0x78, 0x74, 0x5f, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0xd8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x47, 0x6f, 0x54,
	0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x6c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x47,
	0x6f, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x17, 0x6c, 0x73, 0x70, 0x5f, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x66, 0x6c, 0x79, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0xd9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6c, 0x79, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x14, 0x6c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6c, 0x79,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x53, 0x0a, 0x14, 0x6c, 0x73, 0x70, 0x5f, 0x65, 0x78, 0x74,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x66, 0x6c, 0x79, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0xda, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x46, 0x6c, 0x79,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x52,
	0x75, 0x6e, 0x46, 0x6c, 0x79, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x59, 0x0a, 0x16, 0x6c, 0x73,
	0x70, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x66, 0x6c, 0x79, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0xdb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x45, 0x78,
	0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x6c, 0x79, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x13, 0x6c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x6c, 0x79,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x53, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x18, 0xdc, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x54, 0x6f, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x57, 0x10, 0x59, 0x4a,
	0x06, 0x08, 0x9e, 0x01, 0x10, 0xa2, 0x01, 0x4a, 0x06, 0x08, 0xa4, 0x01, 0x10, 0xa5, 0x01, 0x4a,
	0x06, 0x08, 0xa6, 0x01, 0x10, 0xaa, 0x01, 0x4a, 0x06, 0x08, 0xb1, 0x01, 0x10, 0xba, 0x01, 0x4a,
	0x06, 0x08, 0xbc, 0x01, 0x10, 0xbd, 0x01, 0x4a, 0x06, 0x08, 0xbd, 0x01, 0x10, 0xc1, 0x01, 0x4a,
	0x06, 0x08, 0xc1, 0x01, 0x10, 0xc4, 0x01, 0x4a, 0x06, 0x08, 0xc5, 0x01, 0x10, 0xc6, 0x01, 0x4a,
	0x06, 0x08, 0xc8, 0x01, 0x10, 0xcb, 0x01, 0x4a, 0x06, 0x08, 0xcd, 0x01, 0x10, 0xcf, 0x01, 0x4a,
	0x06, 0x08, 0xdd, 0x01, 0x10, 0xde, 0x01, 0x4a, 0x06, 0x08, 0xe0, 0x01, 0x10, 0xe6, 0x01, 0x4a,
	0x06, 0x08, 0xe6, 0x01, 0x10, 0xe8, 0x01, 0x4a, 0x06, 0x08, 0xf6, 0x01, 0x10, 0xf7, 0x01, 0x4a,
	0x06, 0x08, 0x8e, 0x02, 0x10, 0x8f, 0x02, 0x4a, 0x06, 0x08, 0xf7, 0x01, 0x10, 0xff, 0x01, 0x4a,
	0x06, 0x08, 0xff, 0x01, 0x10, 0x81, 0x02, 0x22, 0x36, 0x0a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x12, 0x2d, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x06, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x05, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x22, 0x62,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0x0b, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22,
	0x16, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x1f, 0x0a, 0x1d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2a, 0xef, 0x02, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x6f, 0x53, 0x75, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x43, 0x6c,
	0x61, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x41, 0x52, 0x6f, 0x6f, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x61, 0x64, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x4e, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x6f,
	0x53, 0x75, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x0d, 0x12, 0x24, 0x0a,
	0x20, 0x44, 0x65, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x11, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x13, 0x22, 0x04, 0x08, 0x06, 0x10, 0x06, 0x22, 0x04, 0x08,
	0x0e, 0x10, 0x0f, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_zed_proto_rawDescOnce sync.Once
	file_zed_proto_rawDescData = file_zed_proto_rawDesc
)

func file_zed_proto_rawDescGZIP() []byte {
	file_zed_proto_rawDescOnce.Do(func() {
		file_zed_proto_rawDescData = protoimpl.X.CompressGZIP(file_zed_proto_rawDescData)
	})
	return file_zed_proto_rawDescData
}

var file_zed_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zed_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_zed_proto_goTypes = []interface{}{
	(ErrorCode)(0),                                 // 0: zed.messages.ErrorCode
	(*Envelope)(nil),                               // 1: zed.messages.Envelope
	(*Hello)(nil),                                  // 2: zed.messages.Hello
	(*Ping)(nil),                                   // 3: zed.messages.Ping
	(*Ack)(nil),                                    // 4: zed.messages.Ack
	(*Error)(nil),                                  // 5: zed.messages.Error
	(*EndStream)(nil),                              // 6: zed.messages.EndStream
	(*Test)(nil),                                   // 7: zed.messages.Test
	(*FlushBufferedMessages)(nil),                  // 8: zed.messages.FlushBufferedMessages
	(*FlushBufferedMessagesResponse)(nil),          // 9: zed.messages.FlushBufferedMessagesResponse
	(*PeerId)(nil),                                 // 10: zed.messages.PeerId
	(*CreateRoom)(nil),                             // 11: zed.messages.CreateRoom
	(*CreateRoomResponse)(nil),                     // 12: zed.messages.CreateRoomResponse
	(*JoinRoom)(nil),                               // 13: zed.messages.JoinRoom
	(*JoinRoomResponse)(nil),                       // 14: zed.messages.JoinRoomResponse
	(*RejoinRoom)(nil),                             // 15: zed.messages.RejoinRoom
	(*RejoinRoomResponse)(nil),                     // 16: zed.messages.RejoinRoomResponse
	(*LeaveRoom)(nil),                              // 17: zed.messages.LeaveRoom
	(*Call)(nil),                                   // 18: zed.messages.Call
	(*IncomingCall)(nil),                           // 19: zed.messages.IncomingCall
	(*CallCanceled)(nil),                           // 20: zed.messages.CallCanceled
	(*CancelCall)(nil),                             // 21: zed.messages.CancelCall
	(*DeclineCall)(nil),                            // 22: zed.messages.DeclineCall
	(*UpdateParticipantLocation)(nil),              // 23: zed.messages.UpdateParticipantLocation
	(*RoomUpdated)(nil),                            // 24: zed.messages.RoomUpdated
	(*ShareProject)(nil),                           // 25: zed.messages.ShareProject
	(*ShareProjectResponse)(nil),                   // 26: zed.messages.ShareProjectResponse
	(*UnshareProject)(nil),                         // 27: zed.messages.UnshareProject
	(*JoinProject)(nil),                            // 28: zed.messages.JoinProject
	(*JoinProjectResponse)(nil),                    // 29: zed.messages.JoinProjectResponse
	(*LeaveProject)(nil),                           // 30: zed.messages.LeaveProject
	(*AddProjectCollaborator)(nil),                 // 31: zed.messages.AddProjectCollaborator
	(*UpdateProjectCollaborator)(nil),              // 32: zed.messages.UpdateProjectCollaborator
	(*RemoveProjectCollaborator)(nil),              // 33: zed.messages.RemoveProjectCollaborator
	(*GetDefinition)(nil),                          // 34: zed.messages.GetDefinition
	(*GetDefinitionResponse)(nil),                  // 35: zed.messages.GetDefinitionResponse
	(*GetDeclaration)(nil),                         // 36: zed.messages.GetDeclaration
	(*GetDeclarationResponse)(nil),                 // 37: zed.messages.GetDeclarationResponse
	(*GetTypeDefinition)(nil),                      // 38: zed.messages.GetTypeDefinition
	(*GetTypeDefinitionResponse)(nil),              // 39: zed.messages.GetTypeDefinitionResponse
	(*GetReferences)(nil),                          // 40: zed.messages.GetReferences
	(*GetReferencesResponse)(nil),                  // 41: zed.messages.GetReferencesResponse
	(*GetDocumentHighlights)(nil),                  // 42: zed.messages.GetDocumentHighlights
	(*GetDocumentHighlightsResponse)(nil),          // 43: zed.messages.GetDocumentHighlightsResponse
	(*GetProjectSymbols)(nil),                      // 44: zed.messages.GetProjectSymbols
	(*GetProjectSymbolsResponse)(nil),              // 45: zed.messages.GetProjectSymbolsResponse
	(*OpenBufferForSymbol)(nil),                    // 46: zed.messages.OpenBufferForSymbol
	(*OpenBufferForSymbolResponse)(nil),            // 47: zed.messages.OpenBufferForSymbolResponse
	(*UpdateProject)(nil),                          // 48: zed.messages.UpdateProject
	(*UpdateWorktree)(nil),                         // 49: zed.messages.UpdateWorktree
	(*CreateProjectEntry)(nil),                     // 50: zed.messages.CreateProjectEntry
	(*RenameProjectEntry)(nil),                     // 51: zed.messages.RenameProjectEntry
	(*CopyProjectEntry)(nil),                       // 52: zed.messages.CopyProjectEntry
	(*DeleteProjectEntry)(nil),                     // 53: zed.messages.DeleteProjectEntry
	(*ProjectEntryResponse)(nil),                   // 54: zed.messages.ProjectEntryResponse
	(*ExpandProjectEntry)(nil),                     // 55: zed.messages.ExpandProjectEntry
	(*ExpandProjectEntryResponse)(nil),             // 56: zed.messages.ExpandProjectEntryResponse
	(*ExpandAllForProjectEntry)(nil),               // 57: zed.messages.ExpandAllForProjectEntry
	(*ExpandAllForProjectEntryResponse)(nil),       // 58: zed.messages.ExpandAllForProjectEntryResponse
	(*UpdateDiagnosticSummary)(nil),                // 59: zed.messages.UpdateDiagnosticSummary
	(*StartLanguageServer)(nil),                    // 60: zed.messages.StartLanguageServer
	(*UpdateLanguageServer)(nil),                   // 61: zed.messages.UpdateLanguageServer
	(*OpenBufferById)(nil),                         // 62: zed.messages.OpenBufferById
	(*OpenBufferByPath)(nil),                       // 63: zed.messages.OpenBufferByPath
	(*OpenBufferResponse)(nil),                     // 64: zed.messages.OpenBufferResponse
	(*CreateBufferForPeer)(nil),                    // 65: zed.messages.CreateBufferForPeer
	(*UpdateBuffer)(nil),                           // 66: zed.messages.UpdateBuffer
	(*UpdateBufferFile)(nil),                       // 67: zed.messages.UpdateBufferFile
	(*SaveBuffer)(nil),                             // 68: zed.messages.SaveBuffer
	(*BufferSaved)(nil),                            // 69: zed.messages.BufferSaved
	(*BufferReloaded)(nil),                         // 70: zed.messages.BufferReloaded
	(*ReloadBuffers)(nil),                          // 71: zed.messages.ReloadBuffers
	(*ReloadBuffersResponse)(nil),                  // 72: zed.messages.ReloadBuffersResponse
	(*SynchronizeBuffers)(nil),                     // 73: zed.messages.SynchronizeBuffers
	(*SynchronizeBuffersResponse)(nil),             // 74: zed.messages.SynchronizeBuffersResponse
	(*FormatBuffers)(nil),                          // 75: zed.messages.FormatBuffers
	(*FormatBuffersResponse)(nil),                  // 76: zed.messages.FormatBuffersResponse
	(*GetCompletions)(nil),                         // 77: zed.messages.GetCompletions
	(*GetCompletionsResponse)(nil),                 // 78: zed.messages.GetCompletionsResponse
	(*ResolveCompletionDocumentation)(nil),         // 79: zed.messages.ResolveCompletionDocumentation
	(*ResolveCompletionDocumentationResponse)(nil), // 80: zed.messages.ResolveCompletionDocumentationResponse
	(*ApplyCompletionAdditionalEdits)(nil),         // 81: zed.messages.ApplyCompletionAdditionalEdits
	(*ApplyCompletionAdditionalEditsResponse)(nil), // 82: zed.messages.ApplyCompletionAdditionalEditsResponse
	(*GetCodeActions)(nil),                         // 83: zed.messages.GetCodeActions
	(*GetCodeActionsResponse)(nil),                 // 84: zed.messages.GetCodeActionsResponse
	(*GetHover)(nil),                               // 85: zed.messages.GetHover
	(*GetHoverResponse)(nil),                       // 86: zed.messages.GetHoverResponse
	(*ApplyCodeAction)(nil),                        // 87: zed.messages.ApplyCodeAction
	(*ApplyCodeActionResponse)(nil),                // 88: zed.messages.ApplyCodeActionResponse
	(*PrepareRename)(nil),                          // 89: zed.messages.PrepareRename
	(*PrepareRenameResponse)(nil),                  // 90: zed.messages.PrepareRenameResponse
	(*PerformRename)(nil),                          // 91: zed.messages.PerformRename
	(*PerformRenameResponse)(nil),                  // 92: zed.messages.PerformRenameResponse
	(*UpdateContacts)(nil),                         // 93: zed.messages.UpdateContacts
	(*UpdateInviteInfo)(nil),                       // 94: zed.messages.UpdateInviteInfo
	(*ShowContacts)(nil),                           // 95: zed.messages.ShowContacts
	(*GetUsers)(nil),                               // 96: zed.messages.GetUsers
	(*FuzzySearchUsers)(nil),                       // 97: zed.messages.FuzzySearchUsers
	(*UsersResponse)(nil),                          // 98: zed.messages.UsersResponse
	(*RequestContact)(nil),                         // 99: zed.messages.RequestContact
	(*RespondToContactRequest)(nil),                // 100: zed.messages.RespondToContactRequest
	(*RemoveContact)(nil),                          // 101: zed.messages.RemoveContact
	(*Follow)(nil),                                 // 102: zed.messages.Follow
	(*FollowResponse)(nil),                         // 103: zed.messages.FollowResponse
	(*UpdateFollowers)(nil),                        // 104: zed.messages.UpdateFollowers
	(*Unfollow)(nil),                               // 105: zed.messages.Unfollow
	(*GetPrivateUserInfo)(nil),                     // 106: zed.messages.GetPrivateUserInfo
	(*GetPrivateUserInfoResponse)(nil),             // 107: zed.messages.GetPrivateUserInfoResponse
	(*UpdateUserPlan)(nil),                         // 108: zed.messages.UpdateUserPlan
	(*UpdateDiffBases)(nil),                        // 109: zed.messages.UpdateDiffBases
	(*AcceptTermsOfService)(nil),                   // 110: zed.messages.AcceptTermsOfService
	(*AcceptTermsOfServiceResponse)(nil),           // 111: zed.messages.AcceptTermsOfServiceResponse
	(*OnTypeFormatting)(nil),                       // 112: zed.messages.OnTypeFormatting
	(*OnTypeFormattingResponse)(nil),               // 113: zed.messages.OnTypeFormattingResponse
	(*UpdateWorktreeSettings)(nil),                 // 114: zed.messages.UpdateWorktreeSettings
	(*InlayHints)(nil),                             // 115: zed.messages.InlayHints
	(*InlayHintsResponse)(nil),                     // 116: zed.messages.InlayHintsResponse
	(*ResolveInlayHint)(nil),                       // 117: zed.messages.ResolveInlayHint
	(*ResolveInlayHintResponse)(nil),               // 118: zed.messages.ResolveInlayHintResponse
	(*RefreshInlayHints)(nil),                      // 119: zed.messages.RefreshInlayHints
	(*CreateChannel)(nil),                          // 120: zed.messages.CreateChannel
	(*CreateChannelResponse)(nil),                  // 121: zed.messages.CreateChannelResponse
	(*InviteChannelMember)(nil),                    // 122: zed.messages.InviteChannelMember
	(*RemoveChannelMember)(nil),                    // 123: zed.messages.RemoveChannelMember
	(*RespondToChannelInvite)(nil),                 // 124: zed.messages.RespondToChannelInvite
	(*UpdateChannels)(nil),                         // 125: zed.messages.UpdateChannels
	(*JoinChannel)(nil),                            // 126: zed.messages.JoinChannel
	(*DeleteChannel)(nil),                          // 127: zed.messages.DeleteChannel
	(*GetChannelMembers)(nil),                      // 128: zed.messages.GetChannelMembers
	(*GetChannelMembersResponse)(nil),              // 129: zed.messages.GetChannelMembersResponse
	(*SetChannelMemberRole)(nil),                   // 130: zed.messages.SetChannelMemberRole
	(*RenameChannel)(nil),                          // 131: zed.messages.RenameChannel
	(*RenameChannelResponse)(nil),                  // 132: zed.messages.RenameChannelResponse
	(*SubscribeToChannels)(nil),                    // 133: zed.messages.SubscribeToChannels
	(*JoinChannelBuffer)(nil),                      // 134: zed.messages.JoinChannelBuffer
	(*JoinChannelBufferResponse)(nil),              // 135: zed.messages.JoinChannelBufferResponse
	(*UpdateChannelBuffer)(nil),                    // 136: zed.messages.UpdateChannelBuffer
	(*LeaveChannelBuffer)(nil),                     // 137: zed.messages.LeaveChannelBuffer
	(*UpdateChannelBufferCollaborators)(nil),       // 138: zed.messages.UpdateChannelBufferCollaborators
	(*RejoinChannelBuffers)(nil),                   // 139: zed.messages.RejoinChannelBuffers
	(*RejoinChannelBuffersResponse)(nil),           // 140: zed.messages.RejoinChannelBuffersResponse
	(*AckBufferOperation)(nil),                     // 141: zed.messages.AckBufferOperation
	(*JoinChannelChat)(nil),                        // 142: zed.messages.JoinChannelChat
	(*JoinChannelChatResponse)(nil),                // 143: zed.messages.JoinChannelChatResponse
	(*LeaveChannelChat)(nil),                       // 144: zed.messages.LeaveChannelChat
	(*SendChannelMessage)(nil),                     // 145: zed.messages.SendChannelMessage
	(*SendChannelMessageResponse)(nil),             // 146: zed.messages.SendChannelMessageResponse
	(*ChannelMessageSent)(nil),                     // 147: zed.messages.ChannelMessageSent
	(*GetChannelMessages)(nil),                     // 148: zed.messages.GetChannelMessages
	(*GetChannelMessagesResponse)(nil),             // 149: zed.messages.GetChannelMessagesResponse
	(*RemoveChannelMessage)(nil),                   // 150: zed.messages.RemoveChannelMessage
	(*AckChannelMessage)(nil),                      // 151: zed.messages.AckChannelMessage
	(*GetChannelMessagesById)(nil),                 // 152: zed.messages.GetChannelMessagesById
	(*MoveChannel)(nil),                            // 153: zed.messages.MoveChannel
	(*SetChannelVisibility)(nil),                   // 154: zed.messages.SetChannelVisibility
	(*AddNotification)(nil),                        // 155: zed.messages.AddNotification
	(*GetNotifications)(nil),                       // 156: zed.messages.GetNotifications
	(*GetNotificationsResponse)(nil),               // 157: zed.messages.GetNotificationsResponse
	(*DeleteNotification)(nil),                     // 158: zed.messages.DeleteNotification
	(*MarkNotificationRead)(nil),                   // 159: zed.messages.MarkNotificationRead
	(*LspExtExpandMacro)(nil),                      // 160: zed.messages.LspExtExpandMacro
	(*LspExtExpandMacroResponse)(nil),              // 161: zed.messages.LspExtExpandMacroResponse
	(*SetRoomParticipantRole)(nil),                 // 162: zed.messages.SetRoomParticipantRole
	(*UpdateUserChannels)(nil),                     // 163: zed.messages.UpdateUserChannels
	(*GetImplementation)(nil),                      // 164: zed.messages.GetImplementation
	(*GetImplementationResponse)(nil),              // 165: zed.messages.GetImplementationResponse
	(*UpdateChannelMessage)(nil),                   // 166: zed.messages.UpdateChannelMessage
	(*ChannelMessageUpdate)(nil),                   // 167: zed.messages.ChannelMessageUpdate
	(*BlameBuffer)(nil),                            // 168: zed.messages.BlameBuffer
	(*BlameBufferResponse)(nil),                    // 169: zed.messages.BlameBufferResponse
	(*UpdateNotification)(nil),                     // 170: zed.messages.UpdateNotification
	(*MultiLspQuery)(nil),                          // 171: zed.messages.MultiLspQuery
	(*MultiLspQueryResponse)(nil),                  // 172: zed.messages.MultiLspQueryResponse
	(*RestartLanguageServers)(nil),                 // 173: zed.messages.RestartLanguageServers
	(*RejoinRemoteProjects)(nil),                   // 174: zed.messages.RejoinRemoteProjects
	(*RejoinRemoteProjectsResponse)(nil),           // 175: zed.messages.RejoinRemoteProjectsResponse
	(*OpenNewBuffer)(nil),                          // 176: zed.messages.OpenNewBuffer
	(*GetSupermavenApiKey)(nil),                    // 177: zed.messages.GetSupermavenApiKey
	(*GetSupermavenApiKeyResponse)(nil),            // 178: zed.messages.GetSupermavenApiKeyResponse
	(*TaskContextForLocation)(nil),                 // 179: zed.messages.TaskContextForLocation
	(*TaskContext)(nil),                            // 180: zed.messages.TaskContext
	(*LinkedEditingRange)(nil),                     // 181: zed.messages.LinkedEditingRange
	(*LinkedEditingRangeResponse)(nil),             // 182: zed.messages.LinkedEditingRangeResponse
	(*AdvertiseContexts)(nil),                      // 183: zed.messages.AdvertiseContexts
	(*OpenContext)(nil),                            // 184: zed.messages.OpenContext
	(*OpenContextResponse)(nil),                    // 185: zed.messages.OpenContextResponse
	(*CreateContext)(nil),                          // 186: zed.messages.CreateContext
	(*CreateContextResponse)(nil),                  // 187: zed.messages.CreateContextResponse
	(*UpdateContext)(nil),                          // 188: zed.messages.UpdateContext
	(*SynchronizeContexts)(nil),                    // 189: zed.messages.SynchronizeContexts
	(*SynchronizeContextsResponse)(nil),            // 190: zed.messages.SynchronizeContextsResponse
	(*GetSignatureHelp)(nil),                       // 191: zed.messages.GetSignatureHelp
	(*GetSignatureHelpResponse)(nil),               // 192: zed.messages.GetSignatureHelpResponse
	(*ListRemoteDirectory)(nil),                    // 193: zed.messages.ListRemoteDirectory
	(*ListRemoteDirectoryResponse)(nil),            // 194: zed.messages.ListRemoteDirectoryResponse
	(*AddWorktree)(nil),                            // 195: zed.messages.AddWorktree
	(*AddWorktreeResponse)(nil),                    // 196: zed.messages.AddWorktreeResponse
	(*GetLlmToken)(nil),                            // 197: zed.messages.GetLlmToken
	(*GetLlmTokenResponse)(nil),                    // 198: zed.messages.GetLlmTokenResponse
	(*RefreshLlmToken)(nil),                        // 199: zed.messages.RefreshLlmToken
	(*LspExtSwitchSourceHeader)(nil),               // 200: zed.messages.LspExtSwitchSourceHeader
	(*LspExtSwitchSourceHeaderResponse)(nil),       // 201: zed.messages.LspExtSwitchSourceHeaderResponse
	(*FindSearchCandidates)(nil),                   // 202: zed.messages.FindSearchCandidates
	(*FindSearchCandidatesResponse)(nil),           // 203: zed.messages.FindSearchCandidatesResponse
	(*CloseBuffer)(nil),                            // 204: zed.messages.CloseBuffer
	(*ShutdownRemoteServer)(nil),                   // 205: zed.messages.ShutdownRemoteServer
	(*RemoveWorktree)(nil),                         // 206: zed.messages.RemoveWorktree
	(*LanguageServerLog)(nil),                      // 207: zed.messages.LanguageServerLog
	(*Toast)(nil),                                  // 208: zed.messages.Toast
	(*HideToast)(nil),                              // 209: zed.messages.HideToast
	(*OpenServerSettings)(nil),                     // 210: zed.messages.OpenServerSettings
	(*GetPermalinkToLine)(nil),                     // 211: zed.messages.GetPermalinkToLine
	(*GetPermalinkToLineResponse)(nil),             // 212: zed.messages.GetPermalinkToLineResponse
	(*LanguageServerPromptRequest)(nil),            // 213: zed.messages.LanguageServerPromptRequest
	(*LanguageServerPromptResponse)(nil),           // 214: zed.messages.LanguageServerPromptResponse
	(*GitBranchesResponse)(nil),                    // 215: zed.messages.GitBranchesResponse
	(*UpdateGitBranch)(nil),                        // 216: zed.messages.UpdateGitBranch
	(*ListToolchains)(nil),                         // 217: zed.messages.ListToolchains
	(*ListToolchainsResponse)(nil),                 // 218: zed.messages.ListToolchainsResponse
	(*ActivateToolchain)(nil),                      // 219: zed.messages.ActivateToolchain
	(*ActiveToolchain)(nil),                        // 220: zed.messages.ActiveToolchain
	(*ActiveToolchainResponse)(nil),                // 221: zed.messages.ActiveToolchainResponse
	(*GetPathMetadata)(nil),                        // 222: zed.messages.GetPathMetadata
	(*GetPathMetadataResponse)(nil),                // 223: zed.messages.GetPathMetadataResponse
	(*GetPanicFiles)(nil),                          // 224: zed.messages.GetPanicFiles
	(*GetPanicFilesResponse)(nil),                  // 225: zed.messages.GetPanicFilesResponse
	(*CancelLanguageServerWork)(nil),               // 226: zed.messages.CancelLanguageServerWork
	(*LspExtOpenDocs)(nil),                         // 227: zed.messages.LspExtOpenDocs
	(*LspExtOpenDocsResponse)(nil),                 // 228: zed.messages.LspExtOpenDocsResponse
	(*SyncExtensions)(nil),                         // 229: zed.messages.SyncExtensions
	(*SyncExtensionsResponse)(nil),                 // 230: zed.messages.SyncExtensionsResponse
	(*InstallExtension)(nil),                       // 231: zed.messages.InstallExtension
	(*OpenUnstagedDiff)(nil),                       // 232: zed.messages.OpenUnstagedDiff
	(*OpenUnstagedDiffResponse)(nil),               // 233: zed.messages.OpenUnstagedDiffResponse
	(*RegisterBufferWithLanguageServers)(nil),      // 234: zed.messages.RegisterBufferWithLanguageServers
	(*Stage)(nil),                                  // 235: zed.messages.Stage
	(*Unstage)(nil),                                // 236: zed.messages.Unstage
	(*Commit)(nil),                                 // 237: zed.messages.Commit
	(*OpenCommitMessageBuffer)(nil),                // 238: zed.messages.OpenCommitMessageBuffer
	(*OpenUncommittedDiff)(nil),                    // 239: zed.messages.OpenUncommittedDiff
	(*OpenUncommittedDiffResponse)(nil),            // 240: zed.messages.OpenUncommittedDiffResponse
	(*SetIndexText)(nil),                           // 241: zed.messages.SetIndexText
	(*GitShow)(nil),                                // 242: zed.messages.GitShow
	(*GitReset)(nil),                               // 243: zed.messages.GitReset
	(*GitCommitDetails)(nil),                       // 244: zed.messages.GitCommitDetails
	(*GitCheckoutFiles)(nil),                       // 245: zed.messages.GitCheckoutFiles
	(*Push)(nil),                                   // 246: zed.messages.Push
	(*Fetch)(nil),                                  // 247: zed.messages.Fetch
	(*GetRemotes)(nil),                             // 248: zed.messages.GetRemotes
	(*GetRemotesResponse)(nil),                     // 249: zed.messages.GetRemotesResponse
	(*Pull)(nil),                                   // 250: zed.messages.Pull
	(*ApplyCodeActionKind)(nil),                    // 251: zed.messages.ApplyCodeActionKind
	(*ApplyCodeActionKindResponse)(nil),            // 252: zed.messages.ApplyCodeActionKindResponse
	(*RemoteMessageResponse)(nil),                  // 253: zed.messages.RemoteMessageResponse
	(*GitGetBranches)(nil),                         // 254: zed.messages.GitGetBranches
	(*GitCreateBranch)(nil),                        // 255: zed.messages.GitCreateBranch
	(*GitChangeBranch)(nil),                        // 256: zed.messages.GitChangeBranch
	(*CheckForPushedCommits)(nil),                  // 257: zed.messages.CheckForPushedCommits
	(*CheckForPushedCommitsResponse)(nil),          // 258: zed.messages.CheckForPushedCommitsResponse
	(*AskPassRequest)(nil),                         // 259: zed.messages.AskPassRequest
	(*AskPassResponse)(nil),                        // 260: zed.messages.AskPassResponse
	(*GitDiff)(nil),                                // 261: zed.messages.GitDiff
	(*GitDiffResponse)(nil),                        // 262: zed.messages.GitDiffResponse
	(*GitInit)(nil),                                // 263: zed.messages.GitInit
	(*CodeLens)(nil),                               // 264: zed.messages.CodeLens
	(*GetCodeLens)(nil),                            // 265: zed.messages.GetCodeLens
	(*GetCodeLensResponse)(nil),                    // 266: zed.messages.GetCodeLensResponse
	(*RefreshCodeLens)(nil),                        // 267: zed.messages.RefreshCodeLens
	(*ToggleBreakpoint)(nil),                       // 268: zed.messages.ToggleBreakpoint
	(*BreakpointsForFile)(nil),                     // 269: zed.messages.BreakpointsForFile
	(*UpdateRepository)(nil),                       // 270: zed.messages.UpdateRepository
	(*RemoveRepository)(nil),                       // 271: zed.messages.RemoveRepository
	(*GetDocumentSymbols)(nil),                     // 272: zed.messages.GetDocumentSymbols
	(*GetDocumentSymbolsResponse)(nil),             // 273: zed.messages.GetDocumentSymbolsResponse
	(*LanguageServerIdForName)(nil),                // 274: zed.messages.LanguageServerIdForName
	(*LanguageServerIdForNameResponse)(nil),        // 275: zed.messages.LanguageServerIdForNameResponse
	(*LoadCommitDiff)(nil),                         // 276: zed.messages.LoadCommitDiff
	(*LoadCommitDiffResponse)(nil),                 // 277: zed.messages.LoadCommitDiffResponse
	(*StopLanguageServers)(nil),                    // 278: zed.messages.StopLanguageServers
	(*LspExtRunnables)(nil),                        // 279: zed.messages.LspExtRunnables
	(*LspExtRunnablesResponse)(nil),                // 280: zed.messages.LspExtRunnablesResponse
	(*GetDebugAdapterBinary)(nil),                  // 281: zed.messages.GetDebugAdapterBinary
	(*DebugAdapterBinary)(nil),                     // 282: zed.messages.DebugAdapterBinary
	(*RunDebugLocators)(nil),                       // 283: zed.messages.RunDebugLocators
	(*DebugRequest)(nil),                           // 284: zed.messages.DebugRequest
	(*LspExtGoToParentModule)(nil),                 // 285: zed.messages.LspExtGoToParentModule
	(*LspExtGoToParentModuleResponse)(nil),         // 286: zed.messages.LspExtGoToParentModuleResponse
	(*LspExtCancelFlycheck)(nil),                   // 287: zed.messages.LspExtCancelFlycheck
	(*LspExtRunFlycheck)(nil),                      // 288: zed.messages.LspExtRunFlycheck
	(*LspExtClearFlycheck)(nil),                    // 289: zed.messages.LspExtClearFlycheck
	(*LogToDebugConsole)(nil),                      // 290: zed.messages.LogToDebugConsole
}
var file_zed_proto_depIdxs = []int32{
	10,  // 0: zed.messages.Envelope.original_sender_id:type_name -> zed.messages.PeerId
	2,   // 1: zed.messages.Envelope.hello:type_name -> zed.messages.Hello
	4,   // 2: zed.messages.Envelope.ack:type_name -> zed.messages.Ack
	5,   // 3: zed.messages.Envelope.error:type_name -> zed.messages.Error
	3,   // 4: zed.messages.Envelope.ping:type_name -> zed.messages.Ping
	7,   // 5: zed.messages.Envelope.test:type_name -> zed.messages.Test
	6,   // 6: zed.messages.Envelope.end_stream:type_name -> zed.messages.EndStream
	11,  // 7: zed.messages.Envelope.create_room:type_name -> zed.messages.CreateRoom
	12,  // 8: zed.messages.Envelope.create_room_response:type_name -> zed.messages.CreateRoomResponse
	13,  // 9: zed.messages.Envelope.join_room:type_name -> zed.messages.JoinRoom
	14,  // 10: zed.messages.Envelope.join_room_response:type_name -> zed.messages.JoinRoomResponse
	15,  // 11: zed.messages.Envelope.rejoin_room:type_name -> zed.messages.RejoinRoom
	16,  // 12: zed.messages.Envelope.rejoin_room_response:type_name -> zed.messages.RejoinRoomResponse
	17,  // 13: zed.messages.Envelope.leave_room:type_name -> zed.messages.LeaveRoom
	18,  // 14: zed.messages.Envelope.call:type_name -> zed.messages.Call
	19,  // 15: zed.messages.Envelope.incoming_call:type_name -> zed.messages.IncomingCall
	20,  // 16: zed.messages.Envelope.call_canceled:type_name -> zed.messages.CallCanceled
	21,  // 17: zed.messages.Envelope.cancel_call:type_name -> zed.messages.CancelCall
	22,  // 18: zed.messages.Envelope.decline_call:type_name -> zed.messages.DeclineCall
	23,  // 19: zed.messages.Envelope.update_participant_location:type_name -> zed.messages.UpdateParticipantLocation
	24,  // 20: zed.messages.Envelope.room_updated:type_name -> zed.messages.RoomUpdated
	25,  // 21: zed.messages.Envelope.share_project:type_name -> zed.messages.ShareProject
	26,  // 22: zed.messages.Envelope.share_project_response:type_name -> zed.messages.ShareProjectResponse
	27,  // 23: zed.messages.Envelope.unshare_project:type_name -> zed.messages.UnshareProject
	28,  // 24: zed.messages.Envelope.join_project:type_name -> zed.messages.JoinProject
	29,  // 25: zed.messages.Envelope.join_project_response:type_name -> zed.messages.JoinProjectResponse
	30,  // 26: zed.messages.Envelope.leave_project:type_name -> zed.messages.LeaveProject
	31,  // 27: zed.messages.Envelope.add_project_collaborator:type_name -> zed.messages.AddProjectCollaborator
	32,  // 28: zed.messages.Envelope.update_project_collaborator:type_name -> zed.messages.UpdateProjectCollaborator
	33,  // 29: zed.messages.Envelope.remove_project_collaborator:type_name -> zed.messages.RemoveProjectCollaborator
	34,  // 30: zed.messages.Envelope.get_definition:type_name -> zed.messages.GetDefinition
	35,  // 31: zed.messages.Envelope.get_definition_response:type_name -> zed.messages.GetDefinitionResponse
	36,  // 32: zed.messages.Envelope.get_declaration:type_name -> zed.messages.GetDeclaration
	37,  // 33: zed.messages.Envelope.get_declaration_response:type_name -> zed.messages.GetDeclarationResponse
	38,  // 34: zed.messages.Envelope.get_type_definition:type_name -> zed.messages.GetTypeDefinition
	39,  // 35: zed.messages.Envelope.get_type_definition_response:type_name -> zed.messages.GetTypeDefinitionResponse
	40,  // 36: zed.messages.Envelope.get_references:type_name -> zed.messages.GetReferences
	41,  // 37: zed.messages.Envelope.get_references_response:type_name -> zed.messages.GetReferencesResponse
	42,  // 38: zed.messages.Envelope.get_document_highlights:type_name -> zed.messages.GetDocumentHighlights
	43,  // 39: zed.messages.Envelope.get_document_highlights_response:type_name -> zed.messages.GetDocumentHighlightsResponse
	44,  // 40: zed.messages.Envelope.get_project_symbols:type_name -> zed.messages.GetProjectSymbols
	45,  // 41: zed.messages.Envelope.get_project_symbols_response:type_name -> zed.messages.GetProjectSymbolsResponse
	46,  // 42: zed.messages.Envelope.open_buffer_for_symbol:type_name -> zed.messages.OpenBufferForSymbol
	47,  // 43: zed.messages.Envelope.open_buffer_for_symbol_response:type_name -> zed.messages.OpenBufferForSymbolResponse
	48,  // 44: zed.messages.Envelope.update_project:type_name -> zed.messages.UpdateProject
	49,  // 45: zed.messages.Envelope.update_worktree:type_name -> zed.messages.UpdateWorktree
	50,  // 46: zed.messages.Envelope.create_project_entry:type_name -> zed.messages.CreateProjectEntry
	51,  // 47: zed.messages.Envelope.rename_project_entry:type_name -> zed.messages.RenameProjectEntry
	52,  // 48: zed.messages.Envelope.copy_project_entry:type_name -> zed.messages.CopyProjectEntry
	53,  // 49: zed.messages.Envelope.delete_project_entry:type_name -> zed.messages.DeleteProjectEntry
	54,  // 50: zed.messages.Envelope.project_entry_response:type_name -> zed.messages.ProjectEntryResponse
	55,  // 51: zed.messages.Envelope.expand_project_entry:type_name -> zed.messages.ExpandProjectEntry
	56,  // 52: zed.messages.Envelope.expand_project_entry_response:type_name -> zed.messages.ExpandProjectEntryResponse
	57,  // 53: zed.messages.Envelope.expand_all_for_project_entry:type_name -> zed.messages.ExpandAllForProjectEntry
	58,  // 54: zed.messages.Envelope.expand_all_for_project_entry_response:type_name -> zed.messages.ExpandAllForProjectEntryResponse
	59,  // 55: zed.messages.Envelope.update_diagnostic_summary:type_name -> zed.messages.UpdateDiagnosticSummary
	60,  // 56: zed.messages.Envelope.start_language_server:type_name -> zed.messages.StartLanguageServer
	61,  // 57: zed.messages.Envelope.update_language_server:type_name -> zed.messages.UpdateLanguageServer
	62,  // 58: zed.messages.Envelope.open_buffer_by_id:type_name -> zed.messages.OpenBufferById
	63,  // 59: zed.messages.Envelope.open_buffer_by_path:type_name -> zed.messages.OpenBufferByPath
	64,  // 60: zed.messages.Envelope.open_buffer_response:type_name -> zed.messages.OpenBufferResponse
	65,  // 61: zed.messages.Envelope.create_buffer_for_peer:type_name -> zed.messages.CreateBufferForPeer
	66,  // 62: zed.messages.Envelope.update_buffer:type_name -> zed.messages.UpdateBuffer
	67,  // 63: zed.messages.Envelope.update_buffer_file:type_name -> zed.messages.UpdateBufferFile
	68,  // 64: zed.messages.Envelope.save_buffer:type_name -> zed.messages.SaveBuffer
	69,  // 65: zed.messages.Envelope.buffer_saved:type_name -> zed.messages.BufferSaved
	70,  // 66: zed.messages.Envelope.buffer_reloaded:type_name -> zed.messages.BufferReloaded
	71,  // 67: zed.messages.Envelope.reload_buffers:type_name -> zed.messages.ReloadBuffers
	72,  // 68: zed.messages.Envelope.reload_buffers_response:type_name -> zed.messages.ReloadBuffersResponse
	73,  // 69: zed.messages.Envelope.synchronize_buffers:type_name -> zed.messages.SynchronizeBuffers
	74,  // 70: zed.messages.Envelope.synchronize_buffers_response:type_name -> zed.messages.SynchronizeBuffersResponse
	75,  // 71: zed.messages.Envelope.format_buffers:type_name -> zed.messages.FormatBuffers
	76,  // 72: zed.messages.Envelope.format_buffers_response:type_name -> zed.messages.FormatBuffersResponse
	77,  // 73: zed.messages.Envelope.get_completions:type_name -> zed.messages.GetCompletions
	78,  // 74: zed.messages.Envelope.get_completions_response:type_name -> zed.messages.GetCompletionsResponse
	79,  // 75: zed.messages.Envelope.resolve_completion_documentation:type_name -> zed.messages.ResolveCompletionDocumentation
	80,  // 76: zed.messages.Envelope.resolve_completion_documentation_response:type_name -> zed.messages.ResolveCompletionDocumentationResponse
	81,  // 77: zed.messages.Envelope.apply_completion_additional_edits:type_name -> zed.messages.ApplyCompletionAdditionalEdits
	82,  // 78: zed.messages.Envelope.apply_completion_additional_edits_response:type_name -> zed.messages.ApplyCompletionAdditionalEditsResponse
	83,  // 79: zed.messages.Envelope.get_code_actions:type_name -> zed.messages.GetCodeActions
	84,  // 80: zed.messages.Envelope.get_code_actions_response:type_name -> zed.messages.GetCodeActionsResponse
	85,  // 81: zed.messages.Envelope.get_hover:type_name -> zed.messages.GetHover
	86,  // 82: zed.messages.Envelope.get_hover_response:type_name -> zed.messages.GetHoverResponse
	87,  // 83: zed.messages.Envelope.apply_code_action:type_name -> zed.messages.ApplyCodeAction
	88,  // 84: zed.messages.Envelope.apply_code_action_response:type_name -> zed.messages.ApplyCodeActionResponse
	89,  // 85: zed.messages.Envelope.prepare_rename:type_name -> zed.messages.PrepareRename
	90,  // 86: zed.messages.Envelope.prepare_rename_response:type_name -> zed.messages.PrepareRenameResponse
	91,  // 87: zed.messages.Envelope.perform_rename:type_name -> zed.messages.PerformRename
	92,  // 88: zed.messages.Envelope.perform_rename_response:type_name -> zed.messages.PerformRenameResponse
	93,  // 89: zed.messages.Envelope.update_contacts:type_name -> zed.messages.UpdateContacts
	94,  // 90: zed.messages.Envelope.update_invite_info:type_name -> zed.messages.UpdateInviteInfo
	95,  // 91: zed.messages.Envelope.show_contacts:type_name -> zed.messages.ShowContacts
	96,  // 92: zed.messages.Envelope.get_users:type_name -> zed.messages.GetUsers
	97,  // 93: zed.messages.Envelope.fuzzy_search_users:type_name -> zed.messages.FuzzySearchUsers
	98,  // 94: zed.messages.Envelope.users_response:type_name -> zed.messages.UsersResponse
	99,  // 95: zed.messages.Envelope.request_contact:type_name -> zed.messages.RequestContact
	100, // 96: zed.messages.Envelope.respond_to_contact_request:type_name -> zed.messages.RespondToContactRequest
	101, // 97: zed.messages.Envelope.remove_contact:type_name -> zed.messages.RemoveContact
	102, // 98: zed.messages.Envelope.follow:type_name -> zed.messages.Follow
	103, // 99: zed.messages.Envelope.follow_response:type_name -> zed.messages.FollowResponse
	104, // 100: zed.messages.Envelope.update_followers:type_name -> zed.messages.UpdateFollowers
	105, // 101: zed.messages.Envelope.unfollow:type_name -> zed.messages.Unfollow
	106, // 102: zed.messages.Envelope.get_private_user_info:type_name -> zed.messages.GetPrivateUserInfo
	107, // 103: zed.messages.Envelope.get_private_user_info_response:type_name -> zed.messages.GetPrivateUserInfoResponse
	108, // 104: zed.messages.Envelope.update_user_plan:type_name -> zed.messages.UpdateUserPlan
	109, // 105: zed.messages.Envelope.update_diff_bases:type_name -> zed.messages.UpdateDiffBases
	110, // 106: zed.messages.Envelope.accept_terms_of_service:type_name -> zed.messages.AcceptTermsOfService
	111, // 107: zed.messages.Envelope.accept_terms_of_service_response:type_name -> zed.messages.AcceptTermsOfServiceResponse
	112, // 108: zed.messages.Envelope.on_type_formatting:type_name -> zed.messages.OnTypeFormatting
	113, // 109: zed.messages.Envelope.on_type_formatting_response:type_name -> zed.messages.OnTypeFormattingResponse
	114, // 110: zed.messages.Envelope.update_worktree_settings:type_name -> zed.messages.UpdateWorktreeSettings
	115, // 111: zed.messages.Envelope.inlay_hints:type_name -> zed.messages.InlayHints
	116, // 112: zed.messages.Envelope.inlay_hints_response:type_name -> zed.messages.InlayHintsResponse
	117, // 113: zed.messages.Envelope.resolve_inlay_hint:type_name -> zed.messages.ResolveInlayHint
	118, // 114: zed.messages.Envelope.resolve_inlay_hint_response:type_name -> zed.messages.ResolveInlayHintResponse
	119, // 115: zed.messages.Envelope.refresh_inlay_hints:type_name -> zed.messages.RefreshInlayHints
	120, // 116: zed.messages.Envelope.create_channel:type_name -> zed.messages.CreateChannel
	121, // 117: zed.messages.Envelope.create_channel_response:type_name -> zed.messages.CreateChannelResponse
	122, // 118: zed.messages.Envelope.invite_channel_member:type_name -> zed.messages.InviteChannelMember
	123, // 119: zed.messages.Envelope.remove_channel_member:type_name -> zed.messages.RemoveChannelMember
	124, // 120: zed.messages.Envelope.respond_to_channel_invite:type_name -> zed.messages.RespondToChannelInvite
	125, // 121: zed.messages.Envelope.update_channels:type_name -> zed.messages.UpdateChannels
	126, // 122: zed.messages.Envelope.join_channel:type_name -> zed.messages.JoinChannel
	127, // 123: zed.messages.Envelope.delete_channel:type_name -> zed.messages.DeleteChannel
	128, // 124: zed.messages.Envelope.get_channel_members:type_name -> zed.messages.GetChannelMembers
	129, // 125: zed.messages.Envelope.get_channel_members_response:type_name -> zed.messages.GetChannelMembersResponse
	130, // 126: zed.messages.Envelope.set_channel_member_role:type_name -> zed.messages.SetChannelMemberRole
	131, // 127: zed.messages.Envelope.rename_channel:type_name -> zed.messages.RenameChannel
	132, // 128: zed.messages.Envelope.rename_channel_response:type_name -> zed.messages.RenameChannelResponse
	133, // 129: zed.messages.Envelope.subscribe_to_channels:type_name -> zed.messages.SubscribeToChannels
	134, // 130: zed.messages.Envelope.join_channel_buffer:type_name -> zed.messages.JoinChannelBuffer
	135, // 131: zed.messages.Envelope.join_channel_buffer_response:type_name -> zed.messages.JoinChannelBufferResponse
	136, // 132: zed.messages.Envelope.update_channel_buffer:type_name -> zed.messages.UpdateChannelBuffer
	137, // 133: zed.messages.Envelope.leave_channel_buffer:type_name -> zed.messages.LeaveChannelBuffer
	138, // 134: zed.messages.Envelope.update_channel_buffer_collaborators:type_name -> zed.messages.UpdateChannelBufferCollaborators
	139, // 135: zed.messages.Envelope.rejoin_channel_buffers:type_name -> zed.messages.RejoinChannelBuffers
	140, // 136: zed.messages.Envelope.rejoin_channel_buffers_response:type_name -> zed.messages.RejoinChannelBuffersResponse
	141, // 137: zed.messages.Envelope.ack_buffer_operation:type_name -> zed.messages.AckBufferOperation
	142, // 138: zed.messages.Envelope.join_channel_chat:type_name -> zed.messages.JoinChannelChat
	143, // 139: zed.messages.Envelope.join_channel_chat_response:type_name -> zed.messages.JoinChannelChatResponse
	144, // 140: zed.messages.Envelope.leave_channel_chat:type_name -> zed.messages.LeaveChannelChat
	145, // 141: zed.messages.Envelope.send_channel_message:type_name -> zed.messages.SendChannelMessage
	146, // 142: zed.messages.Envelope.send_channel_message_response:type_name -> zed.messages.SendChannelMessageResponse
	147, // 143: zed.messages.Envelope.channel_message_sent:type_name -> zed.messages.ChannelMessageSent
	148, // 144: zed.messages.Envelope.get_channel_messages:type_name -> zed.messages.GetChannelMessages
	149, // 145: zed.messages.Envelope.get_channel_messages_response:type_name -> zed.messages.GetChannelMessagesResponse
	150, // 146: zed.messages.Envelope.remove_channel_message:type_name -> zed.messages.RemoveChannelMessage
	151, // 147: zed.messages.Envelope.ack_channel_message:type_name -> zed.messages.AckChannelMessage
	152, // 148: zed.messages.Envelope.get_channel_messages_by_id:type_name -> zed.messages.GetChannelMessagesById
	153, // 149: zed.messages.Envelope.move_channel:type_name -> zed.messages.MoveChannel
	154, // 150: zed.messages.Envelope.set_channel_visibility:type_name -> zed.messages.SetChannelVisibility
	155, // 151: zed.messages.Envelope.add_notification:type_name -> zed.messages.AddNotification
	156, // 152: zed.messages.Envelope.get_notifications:type_name -> zed.messages.GetNotifications
	157, // 153: zed.messages.Envelope.get_notifications_response:type_name -> zed.messages.GetNotificationsResponse
	158, // 154: zed.messages.Envelope.delete_notification:type_name -> zed.messages.DeleteNotification
	159, // 155: zed.messages.Envelope.mark_notification_read:type_name -> zed.messages.MarkNotificationRead
	160, // 156: zed.messages.Envelope.lsp_ext_expand_macro:type_name -> zed.messages.LspExtExpandMacro
	161, // 157: zed.messages.Envelope.lsp_ext_expand_macro_response:type_name -> zed.messages.LspExtExpandMacroResponse
	162, // 158: zed.messages.Envelope.set_room_participant_role:type_name -> zed.messages.SetRoomParticipantRole
	163, // 159: zed.messages.Envelope.update_user_channels:type_name -> zed.messages.UpdateUserChannels
	164, // 160: zed.messages.Envelope.get_implementation:type_name -> zed.messages.GetImplementation
	165, // 161: zed.messages.Envelope.get_implementation_response:type_name -> zed.messages.GetImplementationResponse
	166, // 162: zed.messages.Envelope.update_channel_message:type_name -> zed.messages.UpdateChannelMessage
	167, // 163: zed.messages.Envelope.channel_message_update:type_name -> zed.messages.ChannelMessageUpdate
	168, // 164: zed.messages.Envelope.blame_buffer:type_name -> zed.messages.BlameBuffer
	169, // 165: zed.messages.Envelope.blame_buffer_response:type_name -> zed.messages.BlameBufferResponse
	170, // 166: zed.messages.Envelope.update_notification:type_name -> zed.messages.UpdateNotification
	171, // 167: zed.messages.Envelope.multi_lsp_query:type_name -> zed.messages.MultiLspQuery
	172, // 168: zed.messages.Envelope.multi_lsp_query_response:type_name -> zed.messages.MultiLspQueryResponse
	173, // 169: zed.messages.Envelope.restart_language_servers:type_name -> zed.messages.RestartLanguageServers
	174, // 170: zed.messages.Envelope.rejoin_remote_projects:type_name -> zed.messages.RejoinRemoteProjects
	175, // 171: zed.messages.Envelope.rejoin_remote_projects_response:type_name -> zed.messages.RejoinRemoteProjectsResponse
	176, // 172: zed.messages.Envelope.open_new_buffer:type_name -> zed.messages.OpenNewBuffer
	177, // 173: zed.messages.Envelope.get_supermaven_api_key:type_name -> zed.messages.GetSupermavenApiKey
	178, // 174: zed.messages.Envelope.get_supermaven_api_key_response:type_name -> zed.messages.GetSupermavenApiKeyResponse
	179, // 175: zed.messages.Envelope.task_context_for_location:type_name -> zed.messages.TaskContextForLocation
	180, // 176: zed.messages.Envelope.task_context:type_name -> zed.messages.TaskContext
	181, // 177: zed.messages.Envelope.linked_editing_range:type_name -> zed.messages.LinkedEditingRange
	182, // 178: zed.messages.Envelope.linked_editing_range_response:type_name -> zed.messages.LinkedEditingRangeResponse
	183, // 179: zed.messages.Envelope.advertise_contexts:type_name -> zed.messages.AdvertiseContexts
	184, // 180: zed.messages.Envelope.open_context:type_name -> zed.messages.OpenContext
	185, // 181: zed.messages.Envelope.open_context_response:type_name -> zed.messages.OpenContextResponse
	186, // 182: zed.messages.Envelope.create_context:type_name -> zed.messages.CreateContext
	187, // 183: zed.messages.Envelope.create_context_response:type_name -> zed.messages.CreateContextResponse
	188, // 184: zed.messages.Envelope.update_context:type_name -> zed.messages.UpdateContext
	189, // 185: zed.messages.Envelope.synchronize_contexts:type_name -> zed.messages.SynchronizeContexts
	190, // 186: zed.messages.Envelope.synchronize_contexts_response:type_name -> zed.messages.SynchronizeContextsResponse
	191, // 187: zed.messages.Envelope.get_signature_help:type_name -> zed.messages.GetSignatureHelp
	192, // 188: zed.messages.Envelope.get_signature_help_response:type_name -> zed.messages.GetSignatureHelpResponse
	193, // 189: zed.messages.Envelope.list_remote_directory:type_name -> zed.messages.ListRemoteDirectory
	194, // 190: zed.messages.Envelope.list_remote_directory_response:type_name -> zed.messages.ListRemoteDirectoryResponse
	195, // 191: zed.messages.Envelope.add_worktree:type_name -> zed.messages.AddWorktree
	196, // 192: zed.messages.Envelope.add_worktree_response:type_name -> zed.messages.AddWorktreeResponse
	197, // 193: zed.messages.Envelope.get_llm_token:type_name -> zed.messages.GetLlmToken
	198, // 194: zed.messages.Envelope.get_llm_token_response:type_name -> zed.messages.GetLlmTokenResponse
	199, // 195: zed.messages.Envelope.refresh_llm_token:type_name -> zed.messages.RefreshLlmToken
	200, // 196: zed.messages.Envelope.lsp_ext_switch_source_header:type_name -> zed.messages.LspExtSwitchSourceHeader
	201, // 197: zed.messages.Envelope.lsp_ext_switch_source_header_response:type_name -> zed.messages.LspExtSwitchSourceHeaderResponse
	202, // 198: zed.messages.Envelope.find_search_candidates:type_name -> zed.messages.FindSearchCandidates
	203, // 199: zed.messages.Envelope.find_search_candidates_response:type_name -> zed.messages.FindSearchCandidatesResponse
	204, // 200: zed.messages.Envelope.close_buffer:type_name -> zed.messages.CloseBuffer
	205, // 201: zed.messages.Envelope.shutdown_remote_server:type_name -> zed.messages.ShutdownRemoteServer
	206, // 202: zed.messages.Envelope.remove_worktree:type_name -> zed.messages.RemoveWorktree
	207, // 203: zed.messages.Envelope.language_server_log:type_name -> zed.messages.LanguageServerLog
	208, // 204: zed.messages.Envelope.toast:type_name -> zed.messages.Toast
	209, // 205: zed.messages.Envelope.hide_toast:type_name -> zed.messages.HideToast
	210, // 206: zed.messages.Envelope.open_server_settings:type_name -> zed.messages.OpenServerSettings
	211, // 207: zed.messages.Envelope.get_permalink_to_line:type_name -> zed.messages.GetPermalinkToLine
	212, // 208: zed.messages.Envelope.get_permalink_to_line_response:type_name -> zed.messages.GetPermalinkToLineResponse
	8,   // 209: zed.messages.Envelope.flush_buffered_messages:type_name -> zed.messages.FlushBufferedMessages
	213, // 210: zed.messages.Envelope.language_server_prompt_request:type_name -> zed.messages.LanguageServerPromptRequest
	214, // 211: zed.messages.Envelope.language_server_prompt_response:type_name -> zed.messages.LanguageServerPromptResponse
	215, // 212: zed.messages.Envelope.git_branches_response:type_name -> zed.messages.GitBranchesResponse
	216, // 213: zed.messages.Envelope.update_git_branch:type_name -> zed.messages.UpdateGitBranch
	217, // 214: zed.messages.Envelope.list_toolchains:type_name -> zed.messages.ListToolchains
	218, // 215: zed.messages.Envelope.list_toolchains_response:type_name -> zed.messages.ListToolchainsResponse
	219, // 216: zed.messages.Envelope.activate_toolchain:type_name -> zed.messages.ActivateToolchain
	220, // 217: zed.messages.Envelope.active_toolchain:type_name -> zed.messages.ActiveToolchain
	221, // 218: zed.messages.Envelope.active_toolchain_response:type_name -> zed.messages.ActiveToolchainResponse
	222, // 219: zed.messages.Envelope.get_path_metadata:type_name -> zed.messages.GetPathMetadata
	223, // 220: zed.messages.Envelope.get_path_metadata_response:type_name -> zed.messages.GetPathMetadataResponse
	224, // 221: zed.messages.Envelope.get_panic_files:type_name -> zed.messages.GetPanicFiles
	225, // 222: zed.messages.Envelope.get_panic_files_response:type_name -> zed.messages.GetPanicFilesResponse
	226, // 223: zed.messages.Envelope.cancel_language_server_work:type_name -> zed.messages.CancelLanguageServerWork
	227, // 224: zed.messages.Envelope.lsp_ext_open_docs:type_name -> zed.messages.LspExtOpenDocs
	228, // 225: zed.messages.Envelope.lsp_ext_open_docs_response:type_name -> zed.messages.LspExtOpenDocsResponse
	229, // 226: zed.messages.Envelope.sync_extensions:type_name -> zed.messages.SyncExtensions
	230, // 227: zed.messages.Envelope.sync_extensions_response:type_name -> zed.messages.SyncExtensionsResponse
	231, // 228: zed.messages.Envelope.install_extension:type_name -> zed.messages.InstallExtension
	232, // 229: zed.messages.Envelope.open_unstaged_diff:type_name -> zed.messages.OpenUnstagedDiff
	233, // 230: zed.messages.Envelope.open_unstaged_diff_response:type_name -> zed.messages.OpenUnstagedDiffResponse
	234, // 231: zed.messages.Envelope.register_buffer_with_language_servers:type_name -> zed.messages.RegisterBufferWithLanguageServers
	235, // 232: zed.messages.Envelope.stage:type_name -> zed.messages.Stage
	236, // 233: zed.messages.Envelope.unstage:type_name -> zed.messages.Unstage
	237, // 234: zed.messages.Envelope.commit:type_name -> zed.messages.Commit
	238, // 235: zed.messages.Envelope.open_commit_message_buffer:type_name -> zed.messages.OpenCommitMessageBuffer
	239, // 236: zed.messages.Envelope.open_uncommitted_diff:type_name -> zed.messages.OpenUncommittedDiff
	240, // 237: zed.messages.Envelope.open_uncommitted_diff_response:type_name -> zed.messages.OpenUncommittedDiffResponse
	241, // 238: zed.messages.Envelope.set_index_text:type_name -> zed.messages.SetIndexText
	242, // 239: zed.messages.Envelope.git_show:type_name -> zed.messages.GitShow
	243, // 240: zed.messages.Envelope.git_reset:type_name -> zed.messages.GitReset
	244, // 241: zed.messages.Envelope.git_commit_details:type_name -> zed.messages.GitCommitDetails
	245, // 242: zed.messages.Envelope.git_checkout_files:type_name -> zed.messages.GitCheckoutFiles
	246, // 243: zed.messages.Envelope.push:type_name -> zed.messages.Push
	247, // 244: zed.messages.Envelope.fetch:type_name -> zed.messages.Fetch
	248, // 245: zed.messages.Envelope.get_remotes:type_name -> zed.messages.GetRemotes
	249, // 246: zed.messages.Envelope.get_remotes_response:type_name -> zed.messages.GetRemotesResponse
	250, // 247: zed.messages.Envelope.pull:type_name -> zed.messages.Pull
	251, // 248: zed.messages.Envelope.apply_code_action_kind:type_name -> zed.messages.ApplyCodeActionKind
	252, // 249: zed.messages.Envelope.apply_code_action_kind_response:type_name -> zed.messages.ApplyCodeActionKindResponse
	253, // 250: zed.messages.Envelope.remote_message_response:type_name -> zed.messages.RemoteMessageResponse
	254, // 251: zed.messages.Envelope.git_get_branches:type_name -> zed.messages.GitGetBranches
	255, // 252: zed.messages.Envelope.git_create_branch:type_name -> zed.messages.GitCreateBranch
	256, // 253: zed.messages.Envelope.git_change_branch:type_name -> zed.messages.GitChangeBranch
	257, // 254: zed.messages.Envelope.check_for_pushed_commits:type_name -> zed.messages.CheckForPushedCommits
	258, // 255: zed.messages.Envelope.check_for_pushed_commits_response:type_name -> zed.messages.CheckForPushedCommitsResponse
	259, // 256: zed.messages.Envelope.ask_pass_request:type_name -> zed.messages.AskPassRequest
	260, // 257: zed.messages.Envelope.ask_pass_response:type_name -> zed.messages.AskPassResponse
	261, // 258: zed.messages.Envelope.git_diff:type_name -> zed.messages.GitDiff
	262, // 259: zed.messages.Envelope.git_diff_response:type_name -> zed.messages.GitDiffResponse
	263, // 260: zed.messages.Envelope.git_init:type_name -> zed.messages.GitInit
	264, // 261: zed.messages.Envelope.code_lens:type_name -> zed.messages.CodeLens
	265, // 262: zed.messages.Envelope.get_code_lens:type_name -> zed.messages.GetCodeLens
	266, // 263: zed.messages.Envelope.get_code_lens_response:type_name -> zed.messages.GetCodeLensResponse
	267, // 264: zed.messages.Envelope.refresh_code_lens:type_name -> zed.messages.RefreshCodeLens
	268, // 265: zed.messages.Envelope.toggle_breakpoint:type_name -> zed.messages.ToggleBreakpoint
	269, // 266: zed.messages.Envelope.breakpoints_for_file:type_name -> zed.messages.BreakpointsForFile
	270, // 267: zed.messages.Envelope.update_repository:type_name -> zed.messages.UpdateRepository
	271, // 268: zed.messages.Envelope.remove_repository:type_name -> zed.messages.RemoveRepository
	272, // 269: zed.messages.Envelope.get_document_symbols:type_name -> zed.messages.GetDocumentSymbols
	273, // 270: zed.messages.Envelope.get_document_symbols_response:type_name -> zed.messages.GetDocumentSymbolsResponse
	274, // 271: zed.messages.Envelope.language_server_id_for_name:type_name -> zed.messages.LanguageServerIdForName
	275, // 272: zed.messages.Envelope.language_server_id_for_name_response:type_name -> zed.messages.LanguageServerIdForNameResponse
	276, // 273: zed.messages.Envelope.load_commit_diff:type_name -> zed.messages.LoadCommitDiff
	277, // 274: zed.messages.Envelope.load_commit_diff_response:type_name -> zed.messages.LoadCommitDiffResponse
	278, // 275: zed.messages.Envelope.stop_language_servers:type_name -> zed.messages.StopLanguageServers
	279, // 276: zed.messages.Envelope.lsp_ext_runnables:type_name -> zed.messages.LspExtRunnables
	280, // 277: zed.messages.Envelope.lsp_ext_runnables_response:type_name -> zed.messages.LspExtRunnablesResponse
	281, // 278: zed.messages.Envelope.get_debug_adapter_binary:type_name -> zed.messages.GetDebugAdapterBinary
	282, // 279: zed.messages.Envelope.debug_adapter_binary:type_name -> zed.messages.DebugAdapterBinary
	283, // 280: zed.messages.Envelope.run_debug_locators:type_name -> zed.messages.RunDebugLocators
	284, // 281: zed.messages.Envelope.debug_request:type_name -> zed.messages.DebugRequest
	285, // 282: zed.messages.Envelope.lsp_ext_go_to_parent_module:type_name -> zed.messages.LspExtGoToParentModule
	286, // 283: zed.messages.Envelope.lsp_ext_go_to_parent_module_response:type_name -> zed.messages.LspExtGoToParentModuleResponse
	287, // 284: zed.messages.Envelope.lsp_ext_cancel_flycheck:type_name -> zed.messages.LspExtCancelFlycheck
	288, // 285: zed.messages.Envelope.lsp_ext_run_flycheck:type_name -> zed.messages.LspExtRunFlycheck
	289, // 286: zed.messages.Envelope.lsp_ext_clear_flycheck:type_name -> zed.messages.LspExtClearFlycheck
	290, // 287: zed.messages.Envelope.log_to_debug_console:type_name -> zed.messages.LogToDebugConsole
	10,  // 288: zed.messages.Hello.peer_id:type_name -> zed.messages.PeerId
	0,   // 289: zed.messages.Error.code:type_name -> zed.messages.ErrorCode
	290, // [290:290] is the sub-list for method output_type
	290, // [290:290] is the sub-list for method input_type
	290, // [290:290] is the sub-list for extension type_name
	290, // [290:290] is the sub-list for extension extendee
	0,   // [0:290] is the sub-list for field type_name
}

func init() { file_zed_proto_init() }
func file_zed_proto_init() {
	if File_zed_proto != nil {
		return
	}
	file_ai_proto_init()
	file_app_proto_init()
	file_buffer_proto_init()
	file_call_proto_init()
	file_channel_proto_init()
	file_core_proto_init()
	file_debugger_proto_init()
	file_git_proto_init()
	file_lsp_proto_init()
	file_notification_proto_init()
	file_task_proto_init()
	file_toolchain_proto_init()
	file_worktree_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushBufferedMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zed_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushBufferedMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zed_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Envelope_Hello)(nil),
		(*Envelope_Ack)(nil),
		(*Envelope_Error)(nil),
		(*Envelope_Ping)(nil),
		(*Envelope_Test)(nil),
		(*Envelope_EndStream)(nil),
		(*Envelope_CreateRoom)(nil),
		(*Envelope_CreateRoomResponse)(nil),
		(*Envelope_JoinRoom)(nil),
		(*Envelope_JoinRoomResponse)(nil),
		(*Envelope_RejoinRoom)(nil),
		(*Envelope_RejoinRoomResponse)(nil),
		(*Envelope_LeaveRoom)(nil),
		(*Envelope_Call)(nil),
		(*Envelope_IncomingCall)(nil),
		(*Envelope_CallCanceled)(nil),
		(*Envelope_CancelCall)(nil),
		(*Envelope_DeclineCall)(nil),
		(*Envelope_UpdateParticipantLocation)(nil),
		(*Envelope_RoomUpdated)(nil),
		(*Envelope_ShareProject)(nil),
		(*Envelope_ShareProjectResponse)(nil),
		(*Envelope_UnshareProject)(nil),
		(*Envelope_JoinProject)(nil),
		(*Envelope_JoinProjectResponse)(nil),
		(*Envelope_LeaveProject)(nil),
		(*Envelope_AddProjectCollaborator)(nil),
		(*Envelope_UpdateProjectCollaborator)(nil),
		(*Envelope_RemoveProjectCollaborator)(nil),
		(*Envelope_GetDefinition)(nil),
		(*Envelope_GetDefinitionResponse)(nil),
		(*Envelope_GetDeclaration)(nil),
		(*Envelope_GetDeclarationResponse)(nil),
		(*Envelope_GetTypeDefinition)(nil),
		(*Envelope_GetTypeDefinitionResponse)(nil),
		(*Envelope_GetReferences)(nil),
		(*Envelope_GetReferencesResponse)(nil),
		(*Envelope_GetDocumentHighlights)(nil),
		(*Envelope_GetDocumentHighlightsResponse)(nil),
		(*Envelope_GetProjectSymbols)(nil),
		(*Envelope_GetProjectSymbolsResponse)(nil),
		(*Envelope_OpenBufferForSymbol)(nil),
		(*Envelope_OpenBufferForSymbolResponse)(nil),
		(*Envelope_UpdateProject)(nil),
		(*Envelope_UpdateWorktree)(nil),
		(*Envelope_CreateProjectEntry)(nil),
		(*Envelope_RenameProjectEntry)(nil),
		(*Envelope_CopyProjectEntry)(nil),
		(*Envelope_DeleteProjectEntry)(nil),
		(*Envelope_ProjectEntryResponse)(nil),
		(*Envelope_ExpandProjectEntry)(nil),
		(*Envelope_ExpandProjectEntryResponse)(nil),
		(*Envelope_ExpandAllForProjectEntry)(nil),
		(*Envelope_ExpandAllForProjectEntryResponse)(nil),
		(*Envelope_UpdateDiagnosticSummary)(nil),
		(*Envelope_StartLanguageServer)(nil),
		(*Envelope_UpdateLanguageServer)(nil),
		(*Envelope_OpenBufferById)(nil),
		(*Envelope_OpenBufferByPath)(nil),
		(*Envelope_OpenBufferResponse)(nil),
		(*Envelope_CreateBufferForPeer)(nil),
		(*Envelope_UpdateBuffer)(nil),
		(*Envelope_UpdateBufferFile)(nil),
		(*Envelope_SaveBuffer)(nil),
		(*Envelope_BufferSaved)(nil),
		(*Envelope_BufferReloaded)(nil),
		(*Envelope_ReloadBuffers)(nil),
		(*Envelope_ReloadBuffersResponse)(nil),
		(*Envelope_SynchronizeBuffers)(nil),
		(*Envelope_SynchronizeBuffersResponse)(nil),
		(*Envelope_FormatBuffers)(nil),
		(*Envelope_FormatBuffersResponse)(nil),
		(*Envelope_GetCompletions)(nil),
		(*Envelope_GetCompletionsResponse)(nil),
		(*Envelope_ResolveCompletionDocumentation)(nil),
		(*Envelope_ResolveCompletionDocumentationResponse)(nil),
		(*Envelope_ApplyCompletionAdditionalEdits)(nil),
		(*Envelope_ApplyCompletionAdditionalEditsResponse)(nil),
		(*Envelope_GetCodeActions)(nil),
		(*Envelope_GetCodeActionsResponse)(nil),
		(*Envelope_GetHover)(nil),
		(*Envelope_GetHoverResponse)(nil),
		(*Envelope_ApplyCodeAction)(nil),
		(*Envelope_ApplyCodeActionResponse)(nil),
		(*Envelope_PrepareRename)(nil),
		(*Envelope_PrepareRenameResponse)(nil),
		(*Envelope_PerformRename)(nil),
		(*Envelope_PerformRenameResponse)(nil),
		(*Envelope_UpdateContacts)(nil),
		(*Envelope_UpdateInviteInfo)(nil),
		(*Envelope_ShowContacts)(nil),
		(*Envelope_GetUsers)(nil),
		(*Envelope_FuzzySearchUsers)(nil),
		(*Envelope_UsersResponse)(nil),
		(*Envelope_RequestContact)(nil),
		(*Envelope_RespondToContactRequest)(nil),
		(*Envelope_RemoveContact)(nil),
		(*Envelope_Follow)(nil),
		(*Envelope_FollowResponse)(nil),
		(*Envelope_UpdateFollowers)(nil),
		(*Envelope_Unfollow)(nil),
		(*Envelope_GetPrivateUserInfo)(nil),
		(*Envelope_GetPrivateUserInfoResponse)(nil),
		(*Envelope_UpdateUserPlan)(nil),
		(*Envelope_UpdateDiffBases)(nil),
		(*Envelope_AcceptTermsOfService)(nil),
		(*Envelope_AcceptTermsOfServiceResponse)(nil),
		(*Envelope_OnTypeFormatting)(nil),
		(*Envelope_OnTypeFormattingResponse)(nil),
		(*Envelope_UpdateWorktreeSettings)(nil),
		(*Envelope_InlayHints)(nil),
		(*Envelope_InlayHintsResponse)(nil),
		(*Envelope_ResolveInlayHint)(nil),
		(*Envelope_ResolveInlayHintResponse)(nil),
		(*Envelope_RefreshInlayHints)(nil),
		(*Envelope_CreateChannel)(nil),
		(*Envelope_CreateChannelResponse)(nil),
		(*Envelope_InviteChannelMember)(nil),
		(*Envelope_RemoveChannelMember)(nil),
		(*Envelope_RespondToChannelInvite)(nil),
		(*Envelope_UpdateChannels)(nil),
		(*Envelope_JoinChannel)(nil),
		(*Envelope_DeleteChannel)(nil),
		(*Envelope_GetChannelMembers)(nil),
		(*Envelope_GetChannelMembersResponse)(nil),
		(*Envelope_SetChannelMemberRole)(nil),
		(*Envelope_RenameChannel)(nil),
		(*Envelope_RenameChannelResponse)(nil),
		(*Envelope_SubscribeToChannels)(nil),
		(*Envelope_JoinChannelBuffer)(nil),
		(*Envelope_JoinChannelBufferResponse)(nil),
		(*Envelope_UpdateChannelBuffer)(nil),
		(*Envelope_LeaveChannelBuffer)(nil),
		(*Envelope_UpdateChannelBufferCollaborators)(nil),
		(*Envelope_RejoinChannelBuffers)(nil),
		(*Envelope_RejoinChannelBuffersResponse)(nil),
		(*Envelope_AckBufferOperation)(nil),
		(*Envelope_JoinChannelChat)(nil),
		(*Envelope_JoinChannelChatResponse)(nil),
		(*Envelope_LeaveChannelChat)(nil),
		(*Envelope_SendChannelMessage)(nil),
		(*Envelope_SendChannelMessageResponse)(nil),
		(*Envelope_ChannelMessageSent)(nil),
		(*Envelope_GetChannelMessages)(nil),
		(*Envelope_GetChannelMessagesResponse)(nil),
		(*Envelope_RemoveChannelMessage)(nil),
		(*Envelope_AckChannelMessage)(nil),
		(*Envelope_GetChannelMessagesById)(nil),
		(*Envelope_MoveChannel)(nil),
		(*Envelope_SetChannelVisibility)(nil),
		(*Envelope_AddNotification)(nil),
		(*Envelope_GetNotifications)(nil),
		(*Envelope_GetNotificationsResponse)(nil),
		(*Envelope_DeleteNotification)(nil),
		(*Envelope_MarkNotificationRead)(nil),
		(*Envelope_LspExtExpandMacro)(nil),
		(*Envelope_LspExtExpandMacroResponse)(nil),
		(*Envelope_SetRoomParticipantRole)(nil),
		(*Envelope_UpdateUserChannels)(nil),
		(*Envelope_GetImplementation)(nil),
		(*Envelope_GetImplementationResponse)(nil),
		(*Envelope_UpdateChannelMessage)(nil),
		(*Envelope_ChannelMessageUpdate)(nil),
		(*Envelope_BlameBuffer)(nil),
		(*Envelope_BlameBufferResponse)(nil),
		(*Envelope_UpdateNotification)(nil),
		(*Envelope_MultiLspQuery)(nil),
		(*Envelope_MultiLspQueryResponse)(nil),
		(*Envelope_RestartLanguageServers)(nil),
		(*Envelope_RejoinRemoteProjects)(nil),
		(*Envelope_RejoinRemoteProjectsResponse)(nil),
		(*Envelope_OpenNewBuffer)(nil),
		(*Envelope_GetSupermavenApiKey)(nil),
		(*Envelope_GetSupermavenApiKeyResponse)(nil),
		(*Envelope_TaskContextForLocation)(nil),
		(*Envelope_TaskContext)(nil),
		(*Envelope_LinkedEditingRange)(nil),
		(*Envelope_LinkedEditingRangeResponse)(nil),
		(*Envelope_AdvertiseContexts)(nil),
		(*Envelope_OpenContext)(nil),
		(*Envelope_OpenContextResponse)(nil),
		(*Envelope_CreateContext)(nil),
		(*Envelope_CreateContextResponse)(nil),
		(*Envelope_UpdateContext)(nil),
		(*Envelope_SynchronizeContexts)(nil),
		(*Envelope_SynchronizeContextsResponse)(nil),
		(*Envelope_GetSignatureHelp)(nil),
		(*Envelope_GetSignatureHelpResponse)(nil),
		(*Envelope_ListRemoteDirectory)(nil),
		(*Envelope_ListRemoteDirectoryResponse)(nil),
		(*Envelope_AddWorktree)(nil),
		(*Envelope_AddWorktreeResponse)(nil),
		(*Envelope_GetLlmToken)(nil),
		(*Envelope_GetLlmTokenResponse)(nil),
		(*Envelope_RefreshLlmToken)(nil),
		(*Envelope_LspExtSwitchSourceHeader)(nil),
		(*Envelope_LspExtSwitchSourceHeaderResponse)(nil),
		(*Envelope_FindSearchCandidates)(nil),
		(*Envelope_FindSearchCandidatesResponse)(nil),
		(*Envelope_CloseBuffer)(nil),
		(*Envelope_ShutdownRemoteServer)(nil),
		(*Envelope_RemoveWorktree)(nil),
		(*Envelope_LanguageServerLog)(nil),
		(*Envelope_Toast)(nil),
		(*Envelope_HideToast)(nil),
		(*Envelope_OpenServerSettings)(nil),
		(*Envelope_GetPermalinkToLine)(nil),
		(*Envelope_GetPermalinkToLineResponse)(nil),
		(*Envelope_FlushBufferedMessages)(nil),
		(*Envelope_LanguageServerPromptRequest)(nil),
		(*Envelope_LanguageServerPromptResponse)(nil),
		(*Envelope_GitBranchesResponse)(nil),
		(*Envelope_UpdateGitBranch)(nil),
		(*Envelope_ListToolchains)(nil),
		(*Envelope_ListToolchainsResponse)(nil),
		(*Envelope_ActivateToolchain)(nil),
		(*Envelope_ActiveToolchain)(nil),
		(*Envelope_ActiveToolchainResponse)(nil),
		(*Envelope_GetPathMetadata)(nil),
		(*Envelope_GetPathMetadataResponse)(nil),
		(*Envelope_GetPanicFiles)(nil),
		(*Envelope_GetPanicFilesResponse)(nil),
		(*Envelope_CancelLanguageServerWork)(nil),
		(*Envelope_LspExtOpenDocs)(nil),
		(*Envelope_LspExtOpenDocsResponse)(nil),
		(*Envelope_SyncExtensions)(nil),
		(*Envelope_SyncExtensionsResponse)(nil),
		(*Envelope_InstallExtension)(nil),
		(*Envelope_OpenUnstagedDiff)(nil),
		(*Envelope_OpenUnstagedDiffResponse)(nil),
		(*Envelope_RegisterBufferWithLanguageServers)(nil),
		(*Envelope_Stage)(nil),
		(*Envelope_Unstage)(nil),
		(*Envelope_Commit)(nil),
		(*Envelope_OpenCommitMessageBuffer)(nil),
		(*Envelope_OpenUncommittedDiff)(nil),
		(*Envelope_OpenUncommittedDiffResponse)(nil),
		(*Envelope_SetIndexText)(nil),
		(*Envelope_GitShow)(nil),
		(*Envelope_GitReset)(nil),
		(*Envelope_GitCommitDetails)(nil),
		(*Envelope_GitCheckoutFiles)(nil),
		(*Envelope_Push)(nil),
		(*Envelope_Fetch)(nil),
		(*Envelope_GetRemotes)(nil),
		(*Envelope_GetRemotesResponse)(nil),
		(*Envelope_Pull)(nil),
		(*Envelope_ApplyCodeActionKind)(nil),
		(*Envelope_ApplyCodeActionKindResponse)(nil),
		(*Envelope_RemoteMessageResponse)(nil),
		(*Envelope_GitGetBranches)(nil),
		(*Envelope_GitCreateBranch)(nil),
		(*Envelope_GitChangeBranch)(nil),
		(*Envelope_CheckForPushedCommits)(nil),
		(*Envelope_CheckForPushedCommitsResponse)(nil),
		(*Envelope_AskPassRequest)(nil),
		(*Envelope_AskPassResponse)(nil),
		(*Envelope_GitDiff)(nil),
		(*Envelope_GitDiffResponse)(nil),
		(*Envelope_GitInit)(nil),
		(*Envelope_CodeLens)(nil),
		(*Envelope_GetCodeLens_)(nil),
		(*Envelope_GetCodeLensResponse)(nil),
		(*Envelope_RefreshCodeLens)(nil),
		(*Envelope_ToggleBreakpoint)(nil),
		(*Envelope_BreakpointsForFile)(nil),
		(*Envelope_UpdateRepository)(nil),
		(*Envelope_RemoveRepository)(nil),
		(*Envelope_GetDocumentSymbols)(nil),
		(*Envelope_GetDocumentSymbolsResponse)(nil),
		(*Envelope_LanguageServerIdForName)(nil),
		(*Envelope_LanguageServerIdForNameResponse)(nil),
		(*Envelope_LoadCommitDiff)(nil),
		(*Envelope_LoadCommitDiffResponse)(nil),
		(*Envelope_StopLanguageServers)(nil),
		(*Envelope_LspExtRunnables)(nil),
		(*Envelope_LspExtRunnablesResponse)(nil),
		(*Envelope_GetDebugAdapterBinary)(nil),
		(*Envelope_DebugAdapterBinary_)(nil),
		(*Envelope_RunDebugLocators)(nil),
		(*Envelope_DebugRequest)(nil),
		(*Envelope_LspExtGoToParentModule)(nil),
		(*Envelope_LspExtGoToParentModuleResponse)(nil),
		(*Envelope_LspExtCancelFlycheck)(nil),
		(*Envelope_LspExtRunFlycheck)(nil),
		(*Envelope_LspExtClearFlycheck)(nil),
		(*Envelope_LogToDebugConsole)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zed_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zed_proto_goTypes,
		DependencyIndexes: file_zed_proto_depIdxs,
		EnumInfos:         file_zed_proto_enumTypes,
		MessageInfos:      file_zed_proto_msgTypes,
	}.Build()
	File_zed_proto = out.File
	file_zed_proto_rawDesc = nil
	file_zed_proto_goTypes = nil
	file_zed_proto_depIdxs = nil
}
