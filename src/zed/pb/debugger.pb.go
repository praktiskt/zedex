// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: debugger.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BreakpointState int32

const (
	BreakpointState_Enabled  BreakpointState = 0
	BreakpointState_Disabled BreakpointState = 1
)

// Enum value maps for BreakpointState.
var (
	BreakpointState_name = map[int32]string{
		0: "Enabled",
		1: "Disabled",
	}
	BreakpointState_value = map[string]int32{
		"Enabled":  0,
		"Disabled": 1,
	}
)

func (x BreakpointState) Enum() *BreakpointState {
	p := new(BreakpointState)
	*p = x
	return p
}

func (x BreakpointState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BreakpointState) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[0].Descriptor()
}

func (BreakpointState) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[0]
}

func (x BreakpointState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BreakpointState.Descriptor instead.
func (BreakpointState) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{0}
}

type DebuggerThreadItem int32

const (
	DebuggerThreadItem_Console      DebuggerThreadItem = 0
	DebuggerThreadItem_LoadedSource DebuggerThreadItem = 1
	DebuggerThreadItem_Modules      DebuggerThreadItem = 2
	DebuggerThreadItem_Variables    DebuggerThreadItem = 3
)

// Enum value maps for DebuggerThreadItem.
var (
	DebuggerThreadItem_name = map[int32]string{
		0: "Console",
		1: "LoadedSource",
		2: "Modules",
		3: "Variables",
	}
	DebuggerThreadItem_value = map[string]int32{
		"Console":      0,
		"LoadedSource": 1,
		"Modules":      2,
		"Variables":    3,
	}
)

func (x DebuggerThreadItem) Enum() *DebuggerThreadItem {
	p := new(DebuggerThreadItem)
	*p = x
	return p
}

func (x DebuggerThreadItem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebuggerThreadItem) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[1].Descriptor()
}

func (DebuggerThreadItem) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[1]
}

func (x DebuggerThreadItem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DebuggerThreadItem.Descriptor instead.
func (DebuggerThreadItem) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{1}
}

type DapThreadStatus int32

const (
	DapThreadStatus_Running DapThreadStatus = 0
	DapThreadStatus_Stopped DapThreadStatus = 1
	DapThreadStatus_Exited  DapThreadStatus = 2
	DapThreadStatus_Ended   DapThreadStatus = 3
)

// Enum value maps for DapThreadStatus.
var (
	DapThreadStatus_name = map[int32]string{
		0: "Running",
		1: "Stopped",
		2: "Exited",
		3: "Ended",
	}
	DapThreadStatus_value = map[string]int32{
		"Running": 0,
		"Stopped": 1,
		"Exited":  2,
		"Ended":   3,
	}
)

func (x DapThreadStatus) Enum() *DapThreadStatus {
	p := new(DapThreadStatus)
	*p = x
	return p
}

func (x DapThreadStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DapThreadStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[2].Descriptor()
}

func (DapThreadStatus) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[2]
}

func (x DapThreadStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DapThreadStatus.Descriptor instead.
func (DapThreadStatus) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{2}
}

type VariablesArgumentsFilter int32

const (
	VariablesArgumentsFilter_Indexed VariablesArgumentsFilter = 0
	VariablesArgumentsFilter_Named   VariablesArgumentsFilter = 1
)

// Enum value maps for VariablesArgumentsFilter.
var (
	VariablesArgumentsFilter_name = map[int32]string{
		0: "Indexed",
		1: "Named",
	}
	VariablesArgumentsFilter_value = map[string]int32{
		"Indexed": 0,
		"Named":   1,
	}
)

func (x VariablesArgumentsFilter) Enum() *VariablesArgumentsFilter {
	p := new(VariablesArgumentsFilter)
	*p = x
	return p
}

func (x VariablesArgumentsFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariablesArgumentsFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[3].Descriptor()
}

func (VariablesArgumentsFilter) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[3]
}

func (x VariablesArgumentsFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariablesArgumentsFilter.Descriptor instead.
func (VariablesArgumentsFilter) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{3}
}

type SteppingGranularity int32

const (
	SteppingGranularity_Statement   SteppingGranularity = 0
	SteppingGranularity_Line        SteppingGranularity = 1
	SteppingGranularity_Instruction SteppingGranularity = 2
)

// Enum value maps for SteppingGranularity.
var (
	SteppingGranularity_name = map[int32]string{
		0: "Statement",
		1: "Line",
		2: "Instruction",
	}
	SteppingGranularity_value = map[string]int32{
		"Statement":   0,
		"Line":        1,
		"Instruction": 2,
	}
)

func (x SteppingGranularity) Enum() *SteppingGranularity {
	p := new(SteppingGranularity)
	*p = x
	return p
}

func (x SteppingGranularity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SteppingGranularity) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[4].Descriptor()
}

func (SteppingGranularity) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[4]
}

func (x SteppingGranularity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SteppingGranularity.Descriptor instead.
func (SteppingGranularity) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{4}
}

type DapEvaluateContext int32

const (
	DapEvaluateContext_Repl              DapEvaluateContext = 0
	DapEvaluateContext_Watch             DapEvaluateContext = 1
	DapEvaluateContext_Hover             DapEvaluateContext = 2
	DapEvaluateContext_Clipboard         DapEvaluateContext = 3
	DapEvaluateContext_EvaluateVariables DapEvaluateContext = 4
	DapEvaluateContext_EvaluateUnknown   DapEvaluateContext = 5
)

// Enum value maps for DapEvaluateContext.
var (
	DapEvaluateContext_name = map[int32]string{
		0: "Repl",
		1: "Watch",
		2: "Hover",
		3: "Clipboard",
		4: "EvaluateVariables",
		5: "EvaluateUnknown",
	}
	DapEvaluateContext_value = map[string]int32{
		"Repl":              0,
		"Watch":             1,
		"Hover":             2,
		"Clipboard":         3,
		"EvaluateVariables": 4,
		"EvaluateUnknown":   5,
	}
)

func (x DapEvaluateContext) Enum() *DapEvaluateContext {
	p := new(DapEvaluateContext)
	*p = x
	return p
}

func (x DapEvaluateContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DapEvaluateContext) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[5].Descriptor()
}

func (DapEvaluateContext) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[5]
}

func (x DapEvaluateContext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DapEvaluateContext.Descriptor instead.
func (DapEvaluateContext) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{5}
}

type DapCompletionItemType int32

const (
	DapCompletionItemType_Method             DapCompletionItemType = 0
	DapCompletionItemType_Function           DapCompletionItemType = 1
	DapCompletionItemType_Constructor        DapCompletionItemType = 2
	DapCompletionItemType_Field              DapCompletionItemType = 3
	DapCompletionItemType_Variable           DapCompletionItemType = 4
	DapCompletionItemType_Class              DapCompletionItemType = 5
	DapCompletionItemType_Interface          DapCompletionItemType = 6
	DapCompletionItemType_Module             DapCompletionItemType = 7
	DapCompletionItemType_Property           DapCompletionItemType = 8
	DapCompletionItemType_Unit               DapCompletionItemType = 9
	DapCompletionItemType_Value              DapCompletionItemType = 10
	DapCompletionItemType_Enum               DapCompletionItemType = 11
	DapCompletionItemType_Keyword            DapCompletionItemType = 12
	DapCompletionItemType_Snippet            DapCompletionItemType = 13
	DapCompletionItemType_Text               DapCompletionItemType = 14
	DapCompletionItemType_Color              DapCompletionItemType = 15
	DapCompletionItemType_CompletionItemFile DapCompletionItemType = 16
	DapCompletionItemType_Reference          DapCompletionItemType = 17
	DapCompletionItemType_Customcolor        DapCompletionItemType = 19
)

// Enum value maps for DapCompletionItemType.
var (
	DapCompletionItemType_name = map[int32]string{
		0:  "Method",
		1:  "Function",
		2:  "Constructor",
		3:  "Field",
		4:  "Variable",
		5:  "Class",
		6:  "Interface",
		7:  "Module",
		8:  "Property",
		9:  "Unit",
		10: "Value",
		11: "Enum",
		12: "Keyword",
		13: "Snippet",
		14: "Text",
		15: "Color",
		16: "CompletionItemFile",
		17: "Reference",
		19: "Customcolor",
	}
	DapCompletionItemType_value = map[string]int32{
		"Method":             0,
		"Function":           1,
		"Constructor":        2,
		"Field":              3,
		"Variable":           4,
		"Class":              5,
		"Interface":          6,
		"Module":             7,
		"Property":           8,
		"Unit":               9,
		"Value":              10,
		"Enum":               11,
		"Keyword":            12,
		"Snippet":            13,
		"Text":               14,
		"Color":              15,
		"CompletionItemFile": 16,
		"Reference":          17,
		"Customcolor":        19,
	}
)

func (x DapCompletionItemType) Enum() *DapCompletionItemType {
	p := new(DapCompletionItemType)
	*p = x
	return p
}

func (x DapCompletionItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DapCompletionItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[6].Descriptor()
}

func (DapCompletionItemType) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[6]
}

func (x DapCompletionItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DapCompletionItemType.Descriptor instead.
func (DapCompletionItemType) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{6}
}

type DapOutputCategory int32

const (
	DapOutputCategory_ConsoleOutput DapOutputCategory = 0
	DapOutputCategory_Important     DapOutputCategory = 1
	DapOutputCategory_Stdout        DapOutputCategory = 2
	DapOutputCategory_Stderr        DapOutputCategory = 3
	DapOutputCategory_Unknown       DapOutputCategory = 4
)

// Enum value maps for DapOutputCategory.
var (
	DapOutputCategory_name = map[int32]string{
		0: "ConsoleOutput",
		1: "Important",
		2: "Stdout",
		3: "Stderr",
		4: "Unknown",
	}
	DapOutputCategory_value = map[string]int32{
		"ConsoleOutput": 0,
		"Important":     1,
		"Stdout":        2,
		"Stderr":        3,
		"Unknown":       4,
	}
)

func (x DapOutputCategory) Enum() *DapOutputCategory {
	p := new(DapOutputCategory)
	*p = x
	return p
}

func (x DapOutputCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DapOutputCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[7].Descriptor()
}

func (DapOutputCategory) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[7]
}

func (x DapOutputCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DapOutputCategory.Descriptor instead.
func (DapOutputCategory) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{7}
}

type DapOutputEventGroup int32

const (
	DapOutputEventGroup_Start          DapOutputEventGroup = 0
	DapOutputEventGroup_StartCollapsed DapOutputEventGroup = 1
	DapOutputEventGroup_End            DapOutputEventGroup = 2
)

// Enum value maps for DapOutputEventGroup.
var (
	DapOutputEventGroup_name = map[int32]string{
		0: "Start",
		1: "StartCollapsed",
		2: "End",
	}
	DapOutputEventGroup_value = map[string]int32{
		"Start":          0,
		"StartCollapsed": 1,
		"End":            2,
	}
)

func (x DapOutputEventGroup) Enum() *DapOutputEventGroup {
	p := new(DapOutputEventGroup)
	*p = x
	return p
}

func (x DapOutputEventGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DapOutputEventGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[8].Descriptor()
}

func (DapOutputEventGroup) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[8]
}

func (x DapOutputEventGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DapOutputEventGroup.Descriptor instead.
func (DapOutputEventGroup) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{8}
}

type DapChecksumAlgorithm int32

const (
	DapChecksumAlgorithm_CHECKSUM_ALGORITHM_UNSPECIFIED DapChecksumAlgorithm = 0
	DapChecksumAlgorithm_MD5                            DapChecksumAlgorithm = 1
	DapChecksumAlgorithm_SHA1                           DapChecksumAlgorithm = 2
	DapChecksumAlgorithm_SHA256                         DapChecksumAlgorithm = 3
	DapChecksumAlgorithm_TIMESTAMP                      DapChecksumAlgorithm = 4
)

// Enum value maps for DapChecksumAlgorithm.
var (
	DapChecksumAlgorithm_name = map[int32]string{
		0: "CHECKSUM_ALGORITHM_UNSPECIFIED",
		1: "MD5",
		2: "SHA1",
		3: "SHA256",
		4: "TIMESTAMP",
	}
	DapChecksumAlgorithm_value = map[string]int32{
		"CHECKSUM_ALGORITHM_UNSPECIFIED": 0,
		"MD5":                            1,
		"SHA1":                           2,
		"SHA256":                         3,
		"TIMESTAMP":                      4,
	}
)

func (x DapChecksumAlgorithm) Enum() *DapChecksumAlgorithm {
	p := new(DapChecksumAlgorithm)
	*p = x
	return p
}

func (x DapChecksumAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DapChecksumAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[9].Descriptor()
}

func (DapChecksumAlgorithm) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[9]
}

func (x DapChecksumAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DapChecksumAlgorithm.Descriptor instead.
func (DapChecksumAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{9}
}

type DapScopePresentationHint int32

const (
	DapScopePresentationHint_Arguments    DapScopePresentationHint = 0
	DapScopePresentationHint_Locals       DapScopePresentationHint = 1
	DapScopePresentationHint_Registers    DapScopePresentationHint = 2
	DapScopePresentationHint_ReturnValue  DapScopePresentationHint = 3
	DapScopePresentationHint_ScopeUnknown DapScopePresentationHint = 4
)

// Enum value maps for DapScopePresentationHint.
var (
	DapScopePresentationHint_name = map[int32]string{
		0: "Arguments",
		1: "Locals",
		2: "Registers",
		3: "ReturnValue",
		4: "ScopeUnknown",
	}
	DapScopePresentationHint_value = map[string]int32{
		"Arguments":    0,
		"Locals":       1,
		"Registers":    2,
		"ReturnValue":  3,
		"ScopeUnknown": 4,
	}
)

func (x DapScopePresentationHint) Enum() *DapScopePresentationHint {
	p := new(DapScopePresentationHint)
	*p = x
	return p
}

func (x DapScopePresentationHint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DapScopePresentationHint) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[10].Descriptor()
}

func (DapScopePresentationHint) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[10]
}

func (x DapScopePresentationHint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DapScopePresentationHint.Descriptor instead.
func (DapScopePresentationHint) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{10}
}

type DapSourcePresentationHint int32

const (
	DapSourcePresentationHint_SourceNormal  DapSourcePresentationHint = 0
	DapSourcePresentationHint_Emphasize     DapSourcePresentationHint = 1
	DapSourcePresentationHint_Deemphasize   DapSourcePresentationHint = 2
	DapSourcePresentationHint_SourceUnknown DapSourcePresentationHint = 3
)

// Enum value maps for DapSourcePresentationHint.
var (
	DapSourcePresentationHint_name = map[int32]string{
		0: "SourceNormal",
		1: "Emphasize",
		2: "Deemphasize",
		3: "SourceUnknown",
	}
	DapSourcePresentationHint_value = map[string]int32{
		"SourceNormal":  0,
		"Emphasize":     1,
		"Deemphasize":   2,
		"SourceUnknown": 3,
	}
)

func (x DapSourcePresentationHint) Enum() *DapSourcePresentationHint {
	p := new(DapSourcePresentationHint)
	*p = x
	return p
}

func (x DapSourcePresentationHint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DapSourcePresentationHint) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[11].Descriptor()
}

func (DapSourcePresentationHint) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[11]
}

func (x DapSourcePresentationHint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DapSourcePresentationHint.Descriptor instead.
func (DapSourcePresentationHint) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{11}
}

type DapStackPresentationHint int32

const (
	DapStackPresentationHint_StackNormal  DapStackPresentationHint = 0
	DapStackPresentationHint_Label        DapStackPresentationHint = 1
	DapStackPresentationHint_Subtle       DapStackPresentationHint = 2
	DapStackPresentationHint_StackUnknown DapStackPresentationHint = 3
)

// Enum value maps for DapStackPresentationHint.
var (
	DapStackPresentationHint_name = map[int32]string{
		0: "StackNormal",
		1: "Label",
		2: "Subtle",
		3: "StackUnknown",
	}
	DapStackPresentationHint_value = map[string]int32{
		"StackNormal":  0,
		"Label":        1,
		"Subtle":       2,
		"StackUnknown": 3,
	}
)

func (x DapStackPresentationHint) Enum() *DapStackPresentationHint {
	p := new(DapStackPresentationHint)
	*p = x
	return p
}

func (x DapStackPresentationHint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DapStackPresentationHint) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[12].Descriptor()
}

func (DapStackPresentationHint) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[12]
}

func (x DapStackPresentationHint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DapStackPresentationHint.Descriptor instead.
func (DapStackPresentationHint) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{12}
}

type DebugAdapterBinary_LaunchType int32

const (
	DebugAdapterBinary_Attach DebugAdapterBinary_LaunchType = 0
	DebugAdapterBinary_Launch DebugAdapterBinary_LaunchType = 1
)

// Enum value maps for DebugAdapterBinary_LaunchType.
var (
	DebugAdapterBinary_LaunchType_name = map[int32]string{
		0: "Attach",
		1: "Launch",
	}
	DebugAdapterBinary_LaunchType_value = map[string]int32{
		"Attach": 0,
		"Launch": 1,
	}
)

func (x DebugAdapterBinary_LaunchType) Enum() *DebugAdapterBinary_LaunchType {
	p := new(DebugAdapterBinary_LaunchType)
	*p = x
	return p
}

func (x DebugAdapterBinary_LaunchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugAdapterBinary_LaunchType) Descriptor() protoreflect.EnumDescriptor {
	return file_debugger_proto_enumTypes[13].Descriptor()
}

func (DebugAdapterBinary_LaunchType) Type() protoreflect.EnumType {
	return &file_debugger_proto_enumTypes[13]
}

func (x DebugAdapterBinary_LaunchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DebugAdapterBinary_LaunchType.Descriptor instead.
func (DebugAdapterBinary_LaunchType) EnumDescriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{64, 0}
}

type Breakpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position     *Anchor         `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	State        BreakpointState `protobuf:"varint,2,opt,name=state,proto3,enum=zed.messages.BreakpointState" json:"state,omitempty"`
	Message      *string         `protobuf:"bytes,4,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Condition    *string         `protobuf:"bytes,5,opt,name=condition,proto3,oneof" json:"condition,omitempty"`
	HitCondition *string         `protobuf:"bytes,6,opt,name=hit_condition,json=hitCondition,proto3,oneof" json:"hit_condition,omitempty"`
}

func (x *Breakpoint) Reset() {
	*x = Breakpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Breakpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Breakpoint) ProtoMessage() {}

func (x *Breakpoint) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Breakpoint.ProtoReflect.Descriptor instead.
func (*Breakpoint) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{0}
}

func (x *Breakpoint) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Breakpoint) GetState() BreakpointState {
	if x != nil {
		return x.State
	}
	return BreakpointState_Enabled
}

func (x *Breakpoint) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *Breakpoint) GetCondition() string {
	if x != nil && x.Condition != nil {
		return *x.Condition
	}
	return ""
}

func (x *Breakpoint) GetHitCondition() string {
	if x != nil && x.HitCondition != nil {
		return *x.HitCondition
	}
	return ""
}

type BreakpointsForFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   uint64        `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Path        string        `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Breakpoints []*Breakpoint `protobuf:"bytes,3,rep,name=breakpoints,proto3" json:"breakpoints,omitempty"`
}

func (x *BreakpointsForFile) Reset() {
	*x = BreakpointsForFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakpointsForFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakpointsForFile) ProtoMessage() {}

func (x *BreakpointsForFile) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakpointsForFile.ProtoReflect.Descriptor instead.
func (*BreakpointsForFile) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{1}
}

func (x *BreakpointsForFile) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *BreakpointsForFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *BreakpointsForFile) GetBreakpoints() []*Breakpoint {
	if x != nil {
		return x.Breakpoints
	}
	return nil
}

type ToggleBreakpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  uint64      `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Path       string      `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Breakpoint *Breakpoint `protobuf:"bytes,3,opt,name=breakpoint,proto3" json:"breakpoint,omitempty"`
}

func (x *ToggleBreakpoint) Reset() {
	*x = ToggleBreakpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleBreakpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleBreakpoint) ProtoMessage() {}

func (x *ToggleBreakpoint) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleBreakpoint.ProtoReflect.Descriptor instead.
func (*ToggleBreakpoint) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{2}
}

func (x *ToggleBreakpoint) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ToggleBreakpoint) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ToggleBreakpoint) GetBreakpoint() *Breakpoint {
	if x != nil {
		return x.Breakpoint
	}
	return nil
}

type DebuggerSetVariableState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Scope                    *DapScope `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	Value                    string    `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	StackFrameId             uint64    `protobuf:"varint,4,opt,name=stack_frame_id,json=stackFrameId,proto3" json:"stack_frame_id,omitempty"`
	EvaluateName             *string   `protobuf:"bytes,5,opt,name=evaluate_name,json=evaluateName,proto3,oneof" json:"evaluate_name,omitempty"`
	ParentVariablesReference uint64    `protobuf:"varint,6,opt,name=parent_variables_reference,json=parentVariablesReference,proto3" json:"parent_variables_reference,omitempty"`
}

func (x *DebuggerSetVariableState) Reset() {
	*x = DebuggerSetVariableState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebuggerSetVariableState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebuggerSetVariableState) ProtoMessage() {}

func (x *DebuggerSetVariableState) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebuggerSetVariableState.ProtoReflect.Descriptor instead.
func (*DebuggerSetVariableState) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{3}
}

func (x *DebuggerSetVariableState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DebuggerSetVariableState) GetScope() *DapScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *DebuggerSetVariableState) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DebuggerSetVariableState) GetStackFrameId() uint64 {
	if x != nil {
		return x.StackFrameId
	}
	return 0
}

func (x *DebuggerSetVariableState) GetEvaluateName() string {
	if x != nil && x.EvaluateName != nil {
		return *x.EvaluateName
	}
	return ""
}

func (x *DebuggerSetVariableState) GetParentVariablesReference() uint64 {
	if x != nil {
		return x.ParentVariablesReference
	}
	return 0
}

type VariableListOpenEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//
	//	*VariableListOpenEntry_Scope
	//	*VariableListOpenEntry_Variable
	Entry isVariableListOpenEntry_Entry `protobuf_oneof:"entry"`
}

func (x *VariableListOpenEntry) Reset() {
	*x = VariableListOpenEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableListOpenEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableListOpenEntry) ProtoMessage() {}

func (x *VariableListOpenEntry) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableListOpenEntry.ProtoReflect.Descriptor instead.
func (*VariableListOpenEntry) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{4}
}

func (m *VariableListOpenEntry) GetEntry() isVariableListOpenEntry_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *VariableListOpenEntry) GetScope() *DebuggerOpenEntryScope {
	if x, ok := x.GetEntry().(*VariableListOpenEntry_Scope); ok {
		return x.Scope
	}
	return nil
}

func (x *VariableListOpenEntry) GetVariable() *DebuggerOpenEntryVariable {
	if x, ok := x.GetEntry().(*VariableListOpenEntry_Variable); ok {
		return x.Variable
	}
	return nil
}

type isVariableListOpenEntry_Entry interface {
	isVariableListOpenEntry_Entry()
}

type VariableListOpenEntry_Scope struct {
	Scope *DebuggerOpenEntryScope `protobuf:"bytes,1,opt,name=scope,proto3,oneof"`
}

type VariableListOpenEntry_Variable struct {
	Variable *DebuggerOpenEntryVariable `protobuf:"bytes,2,opt,name=variable,proto3,oneof"`
}

func (*VariableListOpenEntry_Scope) isVariableListOpenEntry_Entry() {}

func (*VariableListOpenEntry_Variable) isVariableListOpenEntry_Entry() {}

type DebuggerOpenEntryScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DebuggerOpenEntryScope) Reset() {
	*x = DebuggerOpenEntryScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebuggerOpenEntryScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebuggerOpenEntryScope) ProtoMessage() {}

func (x *DebuggerOpenEntryScope) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebuggerOpenEntryScope.ProtoReflect.Descriptor instead.
func (*DebuggerOpenEntryScope) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{5}
}

func (x *DebuggerOpenEntryScope) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DebuggerOpenEntryVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeName string `protobuf:"bytes,1,opt,name=scope_name,json=scopeName,proto3" json:"scope_name,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Depth     uint64 `protobuf:"varint,3,opt,name=depth,proto3" json:"depth,omitempty"`
}

func (x *DebuggerOpenEntryVariable) Reset() {
	*x = DebuggerOpenEntryVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebuggerOpenEntryVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebuggerOpenEntryVariable) ProtoMessage() {}

func (x *DebuggerOpenEntryVariable) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebuggerOpenEntryVariable.ProtoReflect.Descriptor instead.
func (*DebuggerOpenEntryVariable) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{6}
}

func (x *DebuggerOpenEntryVariable) GetScopeName() string {
	if x != nil {
		return x.ScopeName
	}
	return ""
}

func (x *DebuggerOpenEntryVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DebuggerOpenEntryVariable) GetDepth() uint64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

type VariableListEntrySetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Depth uint64                    `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
	State *DebuggerSetVariableState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *VariableListEntrySetState) Reset() {
	*x = VariableListEntrySetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableListEntrySetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableListEntrySetState) ProtoMessage() {}

func (x *VariableListEntrySetState) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableListEntrySetState.ProtoReflect.Descriptor instead.
func (*VariableListEntrySetState) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{7}
}

func (x *VariableListEntrySetState) GetDepth() uint64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *VariableListEntrySetState) GetState() *DebuggerSetVariableState {
	if x != nil {
		return x.State
	}
	return nil
}

type VariableListEntryVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Depth              uint64       `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
	Scope              *DapScope    `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	Variable           *DapVariable `protobuf:"bytes,3,opt,name=variable,proto3" json:"variable,omitempty"`
	HasChildren        bool         `protobuf:"varint,4,opt,name=has_children,json=hasChildren,proto3" json:"has_children,omitempty"`
	ContainerReference uint64       `protobuf:"varint,5,opt,name=container_reference,json=containerReference,proto3" json:"container_reference,omitempty"`
}

func (x *VariableListEntryVariable) Reset() {
	*x = VariableListEntryVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableListEntryVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableListEntryVariable) ProtoMessage() {}

func (x *VariableListEntryVariable) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableListEntryVariable.ProtoReflect.Descriptor instead.
func (*VariableListEntryVariable) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{8}
}

func (x *VariableListEntryVariable) GetDepth() uint64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *VariableListEntryVariable) GetScope() *DapScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *VariableListEntryVariable) GetVariable() *DapVariable {
	if x != nil {
		return x.Variable
	}
	return nil
}

func (x *VariableListEntryVariable) GetHasChildren() bool {
	if x != nil {
		return x.HasChildren
	}
	return false
}

func (x *VariableListEntryVariable) GetContainerReference() uint64 {
	if x != nil {
		return x.ContainerReference
	}
	return 0
}

type DebuggerScopeVariableIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FetchedIds []uint64                     `protobuf:"varint,1,rep,packed,name=fetched_ids,json=fetchedIds,proto3" json:"fetched_ids,omitempty"`
	Variables  []*DebuggerVariableContainer `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *DebuggerScopeVariableIndex) Reset() {
	*x = DebuggerScopeVariableIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebuggerScopeVariableIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebuggerScopeVariableIndex) ProtoMessage() {}

func (x *DebuggerScopeVariableIndex) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebuggerScopeVariableIndex.ProtoReflect.Descriptor instead.
func (*DebuggerScopeVariableIndex) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{9}
}

func (x *DebuggerScopeVariableIndex) GetFetchedIds() []uint64 {
	if x != nil {
		return x.FetchedIds
	}
	return nil
}

func (x *DebuggerScopeVariableIndex) GetVariables() []*DebuggerVariableContainer {
	if x != nil {
		return x.Variables
	}
	return nil
}

type DebuggerVariableContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerReference uint64       `protobuf:"varint,1,opt,name=container_reference,json=containerReference,proto3" json:"container_reference,omitempty"`
	Variable           *DapVariable `protobuf:"bytes,2,opt,name=variable,proto3" json:"variable,omitempty"`
	Depth              uint64       `protobuf:"varint,3,opt,name=depth,proto3" json:"depth,omitempty"`
}

func (x *DebuggerVariableContainer) Reset() {
	*x = DebuggerVariableContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebuggerVariableContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebuggerVariableContainer) ProtoMessage() {}

func (x *DebuggerVariableContainer) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebuggerVariableContainer.ProtoReflect.Descriptor instead.
func (*DebuggerVariableContainer) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{10}
}

func (x *DebuggerVariableContainer) GetContainerReference() uint64 {
	if x != nil {
		return x.ContainerReference
	}
	return 0
}

func (x *DebuggerVariableContainer) GetVariable() *DapVariable {
	if x != nil {
		return x.Variable
	}
	return nil
}

func (x *DebuggerVariableContainer) GetDepth() uint64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

type VariableListScopes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StackFrameId uint64      `protobuf:"varint,1,opt,name=stack_frame_id,json=stackFrameId,proto3" json:"stack_frame_id,omitempty"`
	Scopes       []*DapScope `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *VariableListScopes) Reset() {
	*x = VariableListScopes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableListScopes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableListScopes) ProtoMessage() {}

func (x *VariableListScopes) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableListScopes.ProtoReflect.Descriptor instead.
func (*VariableListScopes) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{11}
}

func (x *VariableListScopes) GetStackFrameId() uint64 {
	if x != nil {
		return x.StackFrameId
	}
	return 0
}

func (x *VariableListScopes) GetScopes() []*DapScope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type VariableListVariables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StackFrameId uint64                      `protobuf:"varint,1,opt,name=stack_frame_id,json=stackFrameId,proto3" json:"stack_frame_id,omitempty"`
	ScopeId      uint64                      `protobuf:"varint,2,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`
	Variables    *DebuggerScopeVariableIndex `protobuf:"bytes,3,opt,name=variables,proto3" json:"variables,omitempty"`
}

func (x *VariableListVariables) Reset() {
	*x = VariableListVariables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableListVariables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableListVariables) ProtoMessage() {}

func (x *VariableListVariables) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableListVariables.ProtoReflect.Descriptor instead.
func (*VariableListVariables) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{12}
}

func (x *VariableListVariables) GetStackFrameId() uint64 {
	if x != nil {
		return x.StackFrameId
	}
	return 0
}

func (x *VariableListVariables) GetScopeId() uint64 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

func (x *VariableListVariables) GetVariables() *DebuggerScopeVariableIndex {
	if x != nil {
		return x.Variables
	}
	return nil
}

type ValueFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hex *bool `protobuf:"varint,1,opt,name=hex,proto3,oneof" json:"hex,omitempty"`
}

func (x *ValueFormat) Reset() {
	*x = ValueFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueFormat) ProtoMessage() {}

func (x *ValueFormat) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueFormat.ProtoReflect.Descriptor instead.
func (*ValueFormat) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{13}
}

func (x *ValueFormat) GetHex() bool {
	if x != nil && x.Hex != nil {
		return *x.Hex
	}
	return false
}

type VariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          uint64                    `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId           uint64                    `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	VariablesReference uint64                    `protobuf:"varint,3,opt,name=variables_reference,json=variablesReference,proto3" json:"variables_reference,omitempty"`
	Filter             *VariablesArgumentsFilter `protobuf:"varint,4,opt,name=filter,proto3,enum=zed.messages.VariablesArgumentsFilter,oneof" json:"filter,omitempty"`
	Start              *uint64                   `protobuf:"varint,5,opt,name=start,proto3,oneof" json:"start,omitempty"`
	Count              *uint64                   `protobuf:"varint,6,opt,name=count,proto3,oneof" json:"count,omitempty"`
	Format             *ValueFormat              `protobuf:"bytes,7,opt,name=format,proto3,oneof" json:"format,omitempty"`
}

func (x *VariablesRequest) Reset() {
	*x = VariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariablesRequest) ProtoMessage() {}

func (x *VariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariablesRequest.ProtoReflect.Descriptor instead.
func (*VariablesRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{14}
}

func (x *VariablesRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *VariablesRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *VariablesRequest) GetVariablesReference() uint64 {
	if x != nil {
		return x.VariablesReference
	}
	return 0
}

func (x *VariablesRequest) GetFilter() VariablesArgumentsFilter {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return VariablesArgumentsFilter_Indexed
}

func (x *VariablesRequest) GetStart() uint64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *VariablesRequest) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *VariablesRequest) GetFormat() *ValueFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

type DapLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId         uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SessionId         uint64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	LocationReference uint64 `protobuf:"varint,3,opt,name=location_reference,json=locationReference,proto3" json:"location_reference,omitempty"`
}

func (x *DapLocationsRequest) Reset() {
	*x = DapLocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapLocationsRequest) ProtoMessage() {}

func (x *DapLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapLocationsRequest.ProtoReflect.Descriptor instead.
func (*DapLocationsRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{15}
}

func (x *DapLocationsRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapLocationsRequest) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *DapLocationsRequest) GetLocationReference() uint64 {
	if x != nil {
		return x.LocationReference
	}
	return 0
}

type DapLocationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    *DapSource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Line      uint64     `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	Column    *uint64    `protobuf:"varint,3,opt,name=column,proto3,oneof" json:"column,omitempty"`
	EndLine   *uint64    `protobuf:"varint,4,opt,name=end_line,json=endLine,proto3,oneof" json:"end_line,omitempty"`
	EndColumn *uint64    `protobuf:"varint,5,opt,name=end_column,json=endColumn,proto3,oneof" json:"end_column,omitempty"`
}

func (x *DapLocationsResponse) Reset() {
	*x = DapLocationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapLocationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapLocationsResponse) ProtoMessage() {}

func (x *DapLocationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapLocationsResponse.ProtoReflect.Descriptor instead.
func (*DapLocationsResponse) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{16}
}

func (x *DapLocationsResponse) GetSource() *DapSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DapLocationsResponse) GetLine() uint64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *DapLocationsResponse) GetColumn() uint64 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *DapLocationsResponse) GetEndLine() uint64 {
	if x != nil && x.EndLine != nil {
		return *x.EndLine
	}
	return 0
}

func (x *DapLocationsResponse) GetEndColumn() uint64 {
	if x != nil && x.EndColumn != nil {
		return *x.EndColumn
	}
	return 0
}

type DapEvaluateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId   uint64              `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Expression string              `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	FrameId    *uint64             `protobuf:"varint,4,opt,name=frame_id,json=frameId,proto3,oneof" json:"frame_id,omitempty"`
	Context    *DapEvaluateContext `protobuf:"varint,5,opt,name=context,proto3,enum=zed.messages.DapEvaluateContext,oneof" json:"context,omitempty"`
}

func (x *DapEvaluateRequest) Reset() {
	*x = DapEvaluateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapEvaluateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapEvaluateRequest) ProtoMessage() {}

func (x *DapEvaluateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapEvaluateRequest.ProtoReflect.Descriptor instead.
func (*DapEvaluateRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{17}
}

func (x *DapEvaluateRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapEvaluateRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapEvaluateRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *DapEvaluateRequest) GetFrameId() uint64 {
	if x != nil && x.FrameId != nil {
		return *x.FrameId
	}
	return 0
}

func (x *DapEvaluateRequest) GetContext() DapEvaluateContext {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return DapEvaluateContext_Repl
}

type DapEvaluateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result            string  `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	EvaluateType      *string `protobuf:"bytes,2,opt,name=evaluate_type,json=evaluateType,proto3,oneof" json:"evaluate_type,omitempty"`
	VariableReference uint64  `protobuf:"varint,3,opt,name=variable_reference,json=variableReference,proto3" json:"variable_reference,omitempty"`
	NamedVariables    *uint64 `protobuf:"varint,4,opt,name=named_variables,json=namedVariables,proto3,oneof" json:"named_variables,omitempty"`
	IndexedVariables  *uint64 `protobuf:"varint,5,opt,name=indexed_variables,json=indexedVariables,proto3,oneof" json:"indexed_variables,omitempty"`
	MemoryReference   *string `protobuf:"bytes,6,opt,name=memory_reference,json=memoryReference,proto3,oneof" json:"memory_reference,omitempty"`
}

func (x *DapEvaluateResponse) Reset() {
	*x = DapEvaluateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapEvaluateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapEvaluateResponse) ProtoMessage() {}

func (x *DapEvaluateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapEvaluateResponse.ProtoReflect.Descriptor instead.
func (*DapEvaluateResponse) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{18}
}

func (x *DapEvaluateResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *DapEvaluateResponse) GetEvaluateType() string {
	if x != nil && x.EvaluateType != nil {
		return *x.EvaluateType
	}
	return ""
}

func (x *DapEvaluateResponse) GetVariableReference() uint64 {
	if x != nil {
		return x.VariableReference
	}
	return 0
}

func (x *DapEvaluateResponse) GetNamedVariables() uint64 {
	if x != nil && x.NamedVariables != nil {
		return *x.NamedVariables
	}
	return 0
}

func (x *DapEvaluateResponse) GetIndexedVariables() uint64 {
	if x != nil && x.IndexedVariables != nil {
		return *x.IndexedVariables
	}
	return 0
}

func (x *DapEvaluateResponse) GetMemoryReference() string {
	if x != nil && x.MemoryReference != nil {
		return *x.MemoryReference
	}
	return ""
}

type DapCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId  uint64  `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Query     string  `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	FrameId   *uint64 `protobuf:"varint,4,opt,name=frame_id,json=frameId,proto3,oneof" json:"frame_id,omitempty"`
	Line      *uint64 `protobuf:"varint,5,opt,name=line,proto3,oneof" json:"line,omitempty"`
	Column    uint64  `protobuf:"varint,6,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *DapCompletionRequest) Reset() {
	*x = DapCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapCompletionRequest) ProtoMessage() {}

func (x *DapCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapCompletionRequest.ProtoReflect.Descriptor instead.
func (*DapCompletionRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{19}
}

func (x *DapCompletionRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapCompletionRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapCompletionRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *DapCompletionRequest) GetFrameId() uint64 {
	if x != nil && x.FrameId != nil {
		return *x.FrameId
	}
	return 0
}

func (x *DapCompletionRequest) GetLine() uint64 {
	if x != nil && x.Line != nil {
		return *x.Line
	}
	return 0
}

func (x *DapCompletionRequest) GetColumn() uint64 {
	if x != nil {
		return x.Column
	}
	return 0
}

type DapCompletionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label           string                 `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Text            *string                `protobuf:"bytes,2,opt,name=text,proto3,oneof" json:"text,omitempty"`
	SortText        *string                `protobuf:"bytes,3,opt,name=sort_text,json=sortText,proto3,oneof" json:"sort_text,omitempty"`
	Detail          *string                `protobuf:"bytes,4,opt,name=detail,proto3,oneof" json:"detail,omitempty"`
	Typ             *DapCompletionItemType `protobuf:"varint,5,opt,name=typ,proto3,enum=zed.messages.DapCompletionItemType,oneof" json:"typ,omitempty"`
	Start           *uint64                `protobuf:"varint,6,opt,name=start,proto3,oneof" json:"start,omitempty"`
	Length          *uint64                `protobuf:"varint,7,opt,name=length,proto3,oneof" json:"length,omitempty"`
	SelectionStart  *uint64                `protobuf:"varint,8,opt,name=selection_start,json=selectionStart,proto3,oneof" json:"selection_start,omitempty"`
	SelectionLength *uint64                `protobuf:"varint,9,opt,name=selection_length,json=selectionLength,proto3,oneof" json:"selection_length,omitempty"`
}

func (x *DapCompletionItem) Reset() {
	*x = DapCompletionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapCompletionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapCompletionItem) ProtoMessage() {}

func (x *DapCompletionItem) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapCompletionItem.ProtoReflect.Descriptor instead.
func (*DapCompletionItem) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{20}
}

func (x *DapCompletionItem) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DapCompletionItem) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *DapCompletionItem) GetSortText() string {
	if x != nil && x.SortText != nil {
		return *x.SortText
	}
	return ""
}

func (x *DapCompletionItem) GetDetail() string {
	if x != nil && x.Detail != nil {
		return *x.Detail
	}
	return ""
}

func (x *DapCompletionItem) GetTyp() DapCompletionItemType {
	if x != nil && x.Typ != nil {
		return *x.Typ
	}
	return DapCompletionItemType_Method
}

func (x *DapCompletionItem) GetStart() uint64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *DapCompletionItem) GetLength() uint64 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *DapCompletionItem) GetSelectionStart() uint64 {
	if x != nil && x.SelectionStart != nil {
		return *x.SelectionStart
	}
	return 0
}

func (x *DapCompletionItem) GetSelectionLength() uint64 {
	if x != nil && x.SelectionLength != nil {
		return *x.SelectionLength
	}
	return 0
}

type DapCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId    uint64               `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Completions []*DapCompletionItem `protobuf:"bytes,2,rep,name=completions,proto3" json:"completions,omitempty"`
}

func (x *DapCompletionResponse) Reset() {
	*x = DapCompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapCompletionResponse) ProtoMessage() {}

func (x *DapCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapCompletionResponse.ProtoReflect.Descriptor instead.
func (*DapCompletionResponse) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{21}
}

func (x *DapCompletionResponse) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapCompletionResponse) GetCompletions() []*DapCompletionItem {
	if x != nil {
		return x.Completions
	}
	return nil
}

type DapScopesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId     uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	StackFrameId uint64 `protobuf:"varint,3,opt,name=stack_frame_id,json=stackFrameId,proto3" json:"stack_frame_id,omitempty"`
}

func (x *DapScopesRequest) Reset() {
	*x = DapScopesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapScopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapScopesRequest) ProtoMessage() {}

func (x *DapScopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapScopesRequest.ProtoReflect.Descriptor instead.
func (*DapScopesRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{22}
}

func (x *DapScopesRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapScopesRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapScopesRequest) GetStackFrameId() uint64 {
	if x != nil {
		return x.StackFrameId
	}
	return 0
}

type DapScopesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes []*DapScope `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *DapScopesResponse) Reset() {
	*x = DapScopesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapScopesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapScopesResponse) ProtoMessage() {}

func (x *DapScopesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapScopesResponse.ProtoReflect.Descriptor instead.
func (*DapScopesResponse) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{23}
}

func (x *DapScopesResponse) GetScopes() []*DapScope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type DapSetVariableValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId           uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Name               string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Value              string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	VariablesReference uint64 `protobuf:"varint,5,opt,name=variables_reference,json=variablesReference,proto3" json:"variables_reference,omitempty"`
}

func (x *DapSetVariableValueRequest) Reset() {
	*x = DapSetVariableValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapSetVariableValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapSetVariableValueRequest) ProtoMessage() {}

func (x *DapSetVariableValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapSetVariableValueRequest.ProtoReflect.Descriptor instead.
func (*DapSetVariableValueRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{24}
}

func (x *DapSetVariableValueRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapSetVariableValueRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapSetVariableValueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DapSetVariableValueRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DapSetVariableValueRequest) GetVariablesReference() uint64 {
	if x != nil {
		return x.VariablesReference
	}
	return 0
}

type DapSetVariableValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId           uint64  `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Value              string  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	VariableType       *string `protobuf:"bytes,3,opt,name=variable_type,json=variableType,proto3,oneof" json:"variable_type,omitempty"`
	VariablesReference *uint64 `protobuf:"varint,4,opt,name=variables_reference,json=variablesReference,proto3,oneof" json:"variables_reference,omitempty"`
	NamedVariables     *uint64 `protobuf:"varint,5,opt,name=named_variables,json=namedVariables,proto3,oneof" json:"named_variables,omitempty"`
	IndexedVariables   *uint64 `protobuf:"varint,6,opt,name=indexed_variables,json=indexedVariables,proto3,oneof" json:"indexed_variables,omitempty"`
	MemoryReference    *string `protobuf:"bytes,7,opt,name=memory_reference,json=memoryReference,proto3,oneof" json:"memory_reference,omitempty"`
}

func (x *DapSetVariableValueResponse) Reset() {
	*x = DapSetVariableValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapSetVariableValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapSetVariableValueResponse) ProtoMessage() {}

func (x *DapSetVariableValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapSetVariableValueResponse.ProtoReflect.Descriptor instead.
func (*DapSetVariableValueResponse) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{25}
}

func (x *DapSetVariableValueResponse) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapSetVariableValueResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DapSetVariableValueResponse) GetVariableType() string {
	if x != nil && x.VariableType != nil {
		return *x.VariableType
	}
	return ""
}

func (x *DapSetVariableValueResponse) GetVariablesReference() uint64 {
	if x != nil && x.VariablesReference != nil {
		return *x.VariablesReference
	}
	return 0
}

func (x *DapSetVariableValueResponse) GetNamedVariables() uint64 {
	if x != nil && x.NamedVariables != nil {
		return *x.NamedVariables
	}
	return 0
}

func (x *DapSetVariableValueResponse) GetIndexedVariables() uint64 {
	if x != nil && x.IndexedVariables != nil {
		return *x.IndexedVariables
	}
	return 0
}

func (x *DapSetVariableValueResponse) GetMemoryReference() string {
	if x != nil && x.MemoryReference != nil {
		return *x.MemoryReference
	}
	return ""
}

type DapPauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId  uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ThreadId  uint64 `protobuf:"varint,3,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (x *DapPauseRequest) Reset() {
	*x = DapPauseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapPauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapPauseRequest) ProtoMessage() {}

func (x *DapPauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapPauseRequest.ProtoReflect.Descriptor instead.
func (*DapPauseRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{26}
}

func (x *DapPauseRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapPauseRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapPauseRequest) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

type DapDisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId         uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId          uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Restart           *bool  `protobuf:"varint,3,opt,name=restart,proto3,oneof" json:"restart,omitempty"`
	TerminateDebuggee *bool  `protobuf:"varint,4,opt,name=terminate_debuggee,json=terminateDebuggee,proto3,oneof" json:"terminate_debuggee,omitempty"`
	SuspendDebuggee   *bool  `protobuf:"varint,5,opt,name=suspend_debuggee,json=suspendDebuggee,proto3,oneof" json:"suspend_debuggee,omitempty"`
}

func (x *DapDisconnectRequest) Reset() {
	*x = DapDisconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapDisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapDisconnectRequest) ProtoMessage() {}

func (x *DapDisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapDisconnectRequest.ProtoReflect.Descriptor instead.
func (*DapDisconnectRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{27}
}

func (x *DapDisconnectRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapDisconnectRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapDisconnectRequest) GetRestart() bool {
	if x != nil && x.Restart != nil {
		return *x.Restart
	}
	return false
}

func (x *DapDisconnectRequest) GetTerminateDebuggee() bool {
	if x != nil && x.TerminateDebuggee != nil {
		return *x.TerminateDebuggee
	}
	return false
}

func (x *DapDisconnectRequest) GetSuspendDebuggee() bool {
	if x != nil && x.SuspendDebuggee != nil {
		return *x.SuspendDebuggee
	}
	return false
}

type DapTerminateThreadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64   `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId  uint64   `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ThreadIds []uint64 `protobuf:"varint,3,rep,packed,name=thread_ids,json=threadIds,proto3" json:"thread_ids,omitempty"`
}

func (x *DapTerminateThreadsRequest) Reset() {
	*x = DapTerminateThreadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapTerminateThreadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapTerminateThreadsRequest) ProtoMessage() {}

func (x *DapTerminateThreadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapTerminateThreadsRequest.ProtoReflect.Descriptor instead.
func (*DapTerminateThreadsRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{28}
}

func (x *DapTerminateThreadsRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapTerminateThreadsRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapTerminateThreadsRequest) GetThreadIds() []uint64 {
	if x != nil {
		return x.ThreadIds
	}
	return nil
}

type DapThreadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId  uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *DapThreadsRequest) Reset() {
	*x = DapThreadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapThreadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapThreadsRequest) ProtoMessage() {}

func (x *DapThreadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapThreadsRequest.ProtoReflect.Descriptor instead.
func (*DapThreadsRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{29}
}

func (x *DapThreadsRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapThreadsRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type DapThreadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threads []*DapThread `protobuf:"bytes,1,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (x *DapThreadsResponse) Reset() {
	*x = DapThreadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapThreadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapThreadsResponse) ProtoMessage() {}

func (x *DapThreadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapThreadsResponse.ProtoReflect.Descriptor instead.
func (*DapThreadsResponse) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{30}
}

func (x *DapThreadsResponse) GetThreads() []*DapThread {
	if x != nil {
		return x.Threads
	}
	return nil
}

type DapTerminateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId  uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Restart   *bool  `protobuf:"varint,3,opt,name=restart,proto3,oneof" json:"restart,omitempty"`
}

func (x *DapTerminateRequest) Reset() {
	*x = DapTerminateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapTerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapTerminateRequest) ProtoMessage() {}

func (x *DapTerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapTerminateRequest.ProtoReflect.Descriptor instead.
func (*DapTerminateRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{31}
}

func (x *DapTerminateRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapTerminateRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapTerminateRequest) GetRestart() bool {
	if x != nil && x.Restart != nil {
		return *x.Restart
	}
	return false
}

type DapRestartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId  uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	RawArgs   []byte `protobuf:"bytes,3,opt,name=raw_args,json=rawArgs,proto3" json:"raw_args,omitempty"`
}

func (x *DapRestartRequest) Reset() {
	*x = DapRestartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapRestartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapRestartRequest) ProtoMessage() {}

func (x *DapRestartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapRestartRequest.ProtoReflect.Descriptor instead.
func (*DapRestartRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{32}
}

func (x *DapRestartRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapRestartRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapRestartRequest) GetRawArgs() []byte {
	if x != nil {
		return x.RawArgs
	}
	return nil
}

type DapRestartStackFrameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId     uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	StackFrameId uint64 `protobuf:"varint,3,opt,name=stack_frame_id,json=stackFrameId,proto3" json:"stack_frame_id,omitempty"`
}

func (x *DapRestartStackFrameRequest) Reset() {
	*x = DapRestartStackFrameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapRestartStackFrameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapRestartStackFrameRequest) ProtoMessage() {}

func (x *DapRestartStackFrameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapRestartStackFrameRequest.ProtoReflect.Descriptor instead.
func (*DapRestartStackFrameRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{33}
}

func (x *DapRestartStackFrameRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapRestartStackFrameRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapRestartStackFrameRequest) GetStackFrameId() uint64 {
	if x != nil {
		return x.StackFrameId
	}
	return 0
}

type ToggleIgnoreBreakpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SessionId uint32 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *ToggleIgnoreBreakpoints) Reset() {
	*x = ToggleIgnoreBreakpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleIgnoreBreakpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleIgnoreBreakpoints) ProtoMessage() {}

func (x *ToggleIgnoreBreakpoints) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleIgnoreBreakpoints.ProtoReflect.Descriptor instead.
func (*ToggleIgnoreBreakpoints) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{34}
}

func (x *ToggleIgnoreBreakpoints) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ToggleIgnoreBreakpoints) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

type IgnoreBreakpointState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SessionId uint64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Ignore    bool   `protobuf:"varint,3,opt,name=ignore,proto3" json:"ignore,omitempty"`
}

func (x *IgnoreBreakpointState) Reset() {
	*x = IgnoreBreakpointState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IgnoreBreakpointState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IgnoreBreakpointState) ProtoMessage() {}

func (x *IgnoreBreakpointState) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IgnoreBreakpointState.ProtoReflect.Descriptor instead.
func (*IgnoreBreakpointState) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{35}
}

func (x *IgnoreBreakpointState) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *IgnoreBreakpointState) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *IgnoreBreakpointState) GetIgnore() bool {
	if x != nil {
		return x.Ignore
	}
	return false
}

type DapNextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64               `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId     uint64               `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ThreadId     uint64               `protobuf:"varint,3,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	SingleThread *bool                `protobuf:"varint,4,opt,name=single_thread,json=singleThread,proto3,oneof" json:"single_thread,omitempty"`
	Granularity  *SteppingGranularity `protobuf:"varint,5,opt,name=granularity,proto3,enum=zed.messages.SteppingGranularity,oneof" json:"granularity,omitempty"`
}

func (x *DapNextRequest) Reset() {
	*x = DapNextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapNextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapNextRequest) ProtoMessage() {}

func (x *DapNextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapNextRequest.ProtoReflect.Descriptor instead.
func (*DapNextRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{36}
}

func (x *DapNextRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapNextRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapNextRequest) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *DapNextRequest) GetSingleThread() bool {
	if x != nil && x.SingleThread != nil {
		return *x.SingleThread
	}
	return false
}

func (x *DapNextRequest) GetGranularity() SteppingGranularity {
	if x != nil && x.Granularity != nil {
		return *x.Granularity
	}
	return SteppingGranularity_Statement
}

type DapStepInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64               `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId     uint64               `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ThreadId     uint64               `protobuf:"varint,3,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	TargetId     *uint64              `protobuf:"varint,4,opt,name=target_id,json=targetId,proto3,oneof" json:"target_id,omitempty"`
	SingleThread *bool                `protobuf:"varint,5,opt,name=single_thread,json=singleThread,proto3,oneof" json:"single_thread,omitempty"`
	Granularity  *SteppingGranularity `protobuf:"varint,6,opt,name=granularity,proto3,enum=zed.messages.SteppingGranularity,oneof" json:"granularity,omitempty"`
}

func (x *DapStepInRequest) Reset() {
	*x = DapStepInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapStepInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapStepInRequest) ProtoMessage() {}

func (x *DapStepInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapStepInRequest.ProtoReflect.Descriptor instead.
func (*DapStepInRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{37}
}

func (x *DapStepInRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapStepInRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapStepInRequest) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *DapStepInRequest) GetTargetId() uint64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *DapStepInRequest) GetSingleThread() bool {
	if x != nil && x.SingleThread != nil {
		return *x.SingleThread
	}
	return false
}

func (x *DapStepInRequest) GetGranularity() SteppingGranularity {
	if x != nil && x.Granularity != nil {
		return *x.Granularity
	}
	return SteppingGranularity_Statement
}

type DapStepOutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64               `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId     uint64               `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ThreadId     uint64               `protobuf:"varint,3,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	SingleThread *bool                `protobuf:"varint,4,opt,name=single_thread,json=singleThread,proto3,oneof" json:"single_thread,omitempty"`
	Granularity  *SteppingGranularity `protobuf:"varint,5,opt,name=granularity,proto3,enum=zed.messages.SteppingGranularity,oneof" json:"granularity,omitempty"`
}

func (x *DapStepOutRequest) Reset() {
	*x = DapStepOutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapStepOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapStepOutRequest) ProtoMessage() {}

func (x *DapStepOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapStepOutRequest.ProtoReflect.Descriptor instead.
func (*DapStepOutRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{38}
}

func (x *DapStepOutRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapStepOutRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapStepOutRequest) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *DapStepOutRequest) GetSingleThread() bool {
	if x != nil && x.SingleThread != nil {
		return *x.SingleThread
	}
	return false
}

func (x *DapStepOutRequest) GetGranularity() SteppingGranularity {
	if x != nil && x.Granularity != nil {
		return *x.Granularity
	}
	return SteppingGranularity_Statement
}

type DapStepBackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64               `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId     uint64               `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ThreadId     uint64               `protobuf:"varint,3,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	SingleThread *bool                `protobuf:"varint,4,opt,name=single_thread,json=singleThread,proto3,oneof" json:"single_thread,omitempty"`
	Granularity  *SteppingGranularity `protobuf:"varint,5,opt,name=granularity,proto3,enum=zed.messages.SteppingGranularity,oneof" json:"granularity,omitempty"`
}

func (x *DapStepBackRequest) Reset() {
	*x = DapStepBackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapStepBackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapStepBackRequest) ProtoMessage() {}

func (x *DapStepBackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapStepBackRequest.ProtoReflect.Descriptor instead.
func (*DapStepBackRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{39}
}

func (x *DapStepBackRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapStepBackRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapStepBackRequest) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *DapStepBackRequest) GetSingleThread() bool {
	if x != nil && x.SingleThread != nil {
		return *x.SingleThread
	}
	return false
}

func (x *DapStepBackRequest) GetGranularity() SteppingGranularity {
	if x != nil && x.Granularity != nil {
		return *x.Granularity
	}
	return SteppingGranularity_Statement
}

type DapContinueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId     uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ThreadId     uint64 `protobuf:"varint,3,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	SingleThread *bool  `protobuf:"varint,4,opt,name=single_thread,json=singleThread,proto3,oneof" json:"single_thread,omitempty"`
}

func (x *DapContinueRequest) Reset() {
	*x = DapContinueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapContinueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapContinueRequest) ProtoMessage() {}

func (x *DapContinueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapContinueRequest.ProtoReflect.Descriptor instead.
func (*DapContinueRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{40}
}

func (x *DapContinueRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapContinueRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapContinueRequest) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *DapContinueRequest) GetSingleThread() bool {
	if x != nil && x.SingleThread != nil {
		return *x.SingleThread
	}
	return false
}

type DapContinueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId            uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AllThreadsContinued *bool  `protobuf:"varint,2,opt,name=all_threads_continued,json=allThreadsContinued,proto3,oneof" json:"all_threads_continued,omitempty"`
}

func (x *DapContinueResponse) Reset() {
	*x = DapContinueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapContinueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapContinueResponse) ProtoMessage() {}

func (x *DapContinueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapContinueResponse.ProtoReflect.Descriptor instead.
func (*DapContinueResponse) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{41}
}

func (x *DapContinueResponse) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapContinueResponse) GetAllThreadsContinued() bool {
	if x != nil && x.AllThreadsContinued != nil {
		return *x.AllThreadsContinued
	}
	return false
}

type DapModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId  uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *DapModulesRequest) Reset() {
	*x = DapModulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapModulesRequest) ProtoMessage() {}

func (x *DapModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapModulesRequest.ProtoReflect.Descriptor instead.
func (*DapModulesRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{42}
}

func (x *DapModulesRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapModulesRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type DapModulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64       `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Modules  []*DapModule `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *DapModulesResponse) Reset() {
	*x = DapModulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapModulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapModulesResponse) ProtoMessage() {}

func (x *DapModulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapModulesResponse.ProtoReflect.Descriptor instead.
func (*DapModulesResponse) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{43}
}

func (x *DapModulesResponse) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapModulesResponse) GetModules() []*DapModule {
	if x != nil {
		return x.Modules
	}
	return nil
}

type DapLoadedSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId  uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *DapLoadedSourcesRequest) Reset() {
	*x = DapLoadedSourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapLoadedSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapLoadedSourcesRequest) ProtoMessage() {}

func (x *DapLoadedSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapLoadedSourcesRequest.ProtoReflect.Descriptor instead.
func (*DapLoadedSourcesRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{44}
}

func (x *DapLoadedSourcesRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapLoadedSourcesRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

type DapLoadedSourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64       `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Sources  []*DapSource `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *DapLoadedSourcesResponse) Reset() {
	*x = DapLoadedSourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapLoadedSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapLoadedSourcesResponse) ProtoMessage() {}

func (x *DapLoadedSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapLoadedSourcesResponse.ProtoReflect.Descriptor instead.
func (*DapLoadedSourcesResponse) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{45}
}

func (x *DapLoadedSourcesResponse) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapLoadedSourcesResponse) GetSources() []*DapSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

type DapStackTraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        uint64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId         uint64  `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ThreadId         uint64  `protobuf:"varint,3,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	StartFrame       *uint64 `protobuf:"varint,4,opt,name=start_frame,json=startFrame,proto3,oneof" json:"start_frame,omitempty"`
	StackTraceLevels *uint64 `protobuf:"varint,5,opt,name=stack_trace_levels,json=stackTraceLevels,proto3,oneof" json:"stack_trace_levels,omitempty"`
}

func (x *DapStackTraceRequest) Reset() {
	*x = DapStackTraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapStackTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapStackTraceRequest) ProtoMessage() {}

func (x *DapStackTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapStackTraceRequest.ProtoReflect.Descriptor instead.
func (*DapStackTraceRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{46}
}

func (x *DapStackTraceRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DapStackTraceRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapStackTraceRequest) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *DapStackTraceRequest) GetStartFrame() uint64 {
	if x != nil && x.StartFrame != nil {
		return *x.StartFrame
	}
	return 0
}

func (x *DapStackTraceRequest) GetStackTraceLevels() uint64 {
	if x != nil && x.StackTraceLevels != nil {
		return *x.StackTraceLevels
	}
	return 0
}

type DapStackTraceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frames []*DapStackFrame `protobuf:"bytes,1,rep,name=frames,proto3" json:"frames,omitempty"`
}

func (x *DapStackTraceResponse) Reset() {
	*x = DapStackTraceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapStackTraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapStackTraceResponse) ProtoMessage() {}

func (x *DapStackTraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapStackTraceResponse.ProtoReflect.Descriptor instead.
func (*DapStackTraceResponse) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{47}
}

func (x *DapStackTraceResponse) GetFrames() []*DapStackFrame {
	if x != nil {
		return x.Frames
	}
	return nil
}

type DapStackFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          uint64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                        string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Source                      *DapSource                `protobuf:"bytes,3,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Line                        uint64                    `protobuf:"varint,4,opt,name=line,proto3" json:"line,omitempty"`
	Column                      uint64                    `protobuf:"varint,5,opt,name=column,proto3" json:"column,omitempty"`
	EndLine                     *uint64                   `protobuf:"varint,6,opt,name=end_line,json=endLine,proto3,oneof" json:"end_line,omitempty"`
	EndColumn                   *uint64                   `protobuf:"varint,7,opt,name=end_column,json=endColumn,proto3,oneof" json:"end_column,omitempty"`
	CanRestart                  *bool                     `protobuf:"varint,8,opt,name=can_restart,json=canRestart,proto3,oneof" json:"can_restart,omitempty"`
	InstructionPointerReference *string                   `protobuf:"bytes,9,opt,name=instruction_pointer_reference,json=instructionPointerReference,proto3,oneof" json:"instruction_pointer_reference,omitempty"`
	ModuleId                    *DapModuleId              `protobuf:"bytes,10,opt,name=module_id,json=moduleId,proto3,oneof" json:"module_id,omitempty"`
	PresentationHint            *DapStackPresentationHint `protobuf:"varint,11,opt,name=presentation_hint,json=presentationHint,proto3,enum=zed.messages.DapStackPresentationHint,oneof" json:"presentation_hint,omitempty"`
}

func (x *DapStackFrame) Reset() {
	*x = DapStackFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapStackFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapStackFrame) ProtoMessage() {}

func (x *DapStackFrame) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapStackFrame.ProtoReflect.Descriptor instead.
func (*DapStackFrame) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{48}
}

func (x *DapStackFrame) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DapStackFrame) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DapStackFrame) GetSource() *DapSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DapStackFrame) GetLine() uint64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *DapStackFrame) GetColumn() uint64 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *DapStackFrame) GetEndLine() uint64 {
	if x != nil && x.EndLine != nil {
		return *x.EndLine
	}
	return 0
}

func (x *DapStackFrame) GetEndColumn() uint64 {
	if x != nil && x.EndColumn != nil {
		return *x.EndColumn
	}
	return 0
}

func (x *DapStackFrame) GetCanRestart() bool {
	if x != nil && x.CanRestart != nil {
		return *x.CanRestart
	}
	return false
}

func (x *DapStackFrame) GetInstructionPointerReference() string {
	if x != nil && x.InstructionPointerReference != nil {
		return *x.InstructionPointerReference
	}
	return ""
}

func (x *DapStackFrame) GetModuleId() *DapModuleId {
	if x != nil {
		return x.ModuleId
	}
	return nil
}

func (x *DapStackFrame) GetPresentationHint() DapStackPresentationHint {
	if x != nil && x.PresentationHint != nil {
		return *x.PresentationHint
	}
	return DapStackPresentationHint_StackNormal
}

type DebuggerLoadedSourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64       `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Sources  []*DapSource `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *DebuggerLoadedSourceList) Reset() {
	*x = DebuggerLoadedSourceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebuggerLoadedSourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebuggerLoadedSourceList) ProtoMessage() {}

func (x *DebuggerLoadedSourceList) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebuggerLoadedSourceList.ProtoReflect.Descriptor instead.
func (*DebuggerLoadedSourceList) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{49}
}

func (x *DebuggerLoadedSourceList) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DebuggerLoadedSourceList) GetSources() []*DapSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

type DapVariables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  uint64         `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Variables []*DapVariable `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *DapVariables) Reset() {
	*x = DapVariables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapVariables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapVariables) ProtoMessage() {}

func (x *DapVariables) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapVariables.ProtoReflect.Descriptor instead.
func (*DapVariables) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{50}
}

func (x *DapVariables) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *DapVariables) GetVariables() []*DapVariable {
	if x != nil {
		return x.Variables
	}
	return nil
}

// Remote Debugging: Dap Types
type DapVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type  *string `protobuf:"bytes,3,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// optional DapVariablePresentationHint presentation_hint = 4;
	EvaluateName       *string `protobuf:"bytes,5,opt,name=evaluate_name,json=evaluateName,proto3,oneof" json:"evaluate_name,omitempty"`
	VariablesReference uint64  `protobuf:"varint,6,opt,name=variables_reference,json=variablesReference,proto3" json:"variables_reference,omitempty"`
	NamedVariables     *uint64 `protobuf:"varint,7,opt,name=named_variables,json=namedVariables,proto3,oneof" json:"named_variables,omitempty"`
	IndexedVariables   *uint64 `protobuf:"varint,8,opt,name=indexed_variables,json=indexedVariables,proto3,oneof" json:"indexed_variables,omitempty"`
	MemoryReference    *string `protobuf:"bytes,9,opt,name=memory_reference,json=memoryReference,proto3,oneof" json:"memory_reference,omitempty"`
}

func (x *DapVariable) Reset() {
	*x = DapVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapVariable) ProtoMessage() {}

func (x *DapVariable) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapVariable.ProtoReflect.Descriptor instead.
func (*DapVariable) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{51}
}

func (x *DapVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DapVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DapVariable) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *DapVariable) GetEvaluateName() string {
	if x != nil && x.EvaluateName != nil {
		return *x.EvaluateName
	}
	return ""
}

func (x *DapVariable) GetVariablesReference() uint64 {
	if x != nil {
		return x.VariablesReference
	}
	return 0
}

func (x *DapVariable) GetNamedVariables() uint64 {
	if x != nil && x.NamedVariables != nil {
		return *x.NamedVariables
	}
	return 0
}

func (x *DapVariable) GetIndexedVariables() uint64 {
	if x != nil && x.IndexedVariables != nil {
		return *x.IndexedVariables
	}
	return 0
}

func (x *DapVariable) GetMemoryReference() string {
	if x != nil && x.MemoryReference != nil {
		return *x.MemoryReference
	}
	return ""
}

type DapThread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DapThread) Reset() {
	*x = DapThread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapThread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapThread) ProtoMessage() {}

func (x *DapThread) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapThread.ProtoReflect.Descriptor instead.
func (*DapThread) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{52}
}

func (x *DapThread) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DapThread) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DapScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PresentationHint   *DapScopePresentationHint `protobuf:"varint,2,opt,name=presentation_hint,json=presentationHint,proto3,enum=zed.messages.DapScopePresentationHint,oneof" json:"presentation_hint,omitempty"`
	VariablesReference uint64                    `protobuf:"varint,3,opt,name=variables_reference,json=variablesReference,proto3" json:"variables_reference,omitempty"`
	NamedVariables     *uint64                   `protobuf:"varint,4,opt,name=named_variables,json=namedVariables,proto3,oneof" json:"named_variables,omitempty"`
	IndexedVariables   *uint64                   `protobuf:"varint,5,opt,name=indexed_variables,json=indexedVariables,proto3,oneof" json:"indexed_variables,omitempty"`
	Expensive          bool                      `protobuf:"varint,6,opt,name=expensive,proto3" json:"expensive,omitempty"`
	Source             *DapSource                `protobuf:"bytes,7,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Line               *uint64                   `protobuf:"varint,8,opt,name=line,proto3,oneof" json:"line,omitempty"`
	Column             *uint64                   `protobuf:"varint,9,opt,name=column,proto3,oneof" json:"column,omitempty"`
	EndLine            *uint64                   `protobuf:"varint,10,opt,name=end_line,json=endLine,proto3,oneof" json:"end_line,omitempty"`
	EndColumn          *uint64                   `protobuf:"varint,11,opt,name=end_column,json=endColumn,proto3,oneof" json:"end_column,omitempty"`
}

func (x *DapScope) Reset() {
	*x = DapScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapScope) ProtoMessage() {}

func (x *DapScope) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapScope.ProtoReflect.Descriptor instead.
func (*DapScope) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{53}
}

func (x *DapScope) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DapScope) GetPresentationHint() DapScopePresentationHint {
	if x != nil && x.PresentationHint != nil {
		return *x.PresentationHint
	}
	return DapScopePresentationHint_Arguments
}

func (x *DapScope) GetVariablesReference() uint64 {
	if x != nil {
		return x.VariablesReference
	}
	return 0
}

func (x *DapScope) GetNamedVariables() uint64 {
	if x != nil && x.NamedVariables != nil {
		return *x.NamedVariables
	}
	return 0
}

func (x *DapScope) GetIndexedVariables() uint64 {
	if x != nil && x.IndexedVariables != nil {
		return *x.IndexedVariables
	}
	return 0
}

func (x *DapScope) GetExpensive() bool {
	if x != nil {
		return x.Expensive
	}
	return false
}

func (x *DapScope) GetSource() *DapSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DapScope) GetLine() uint64 {
	if x != nil && x.Line != nil {
		return *x.Line
	}
	return 0
}

func (x *DapScope) GetColumn() uint64 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *DapScope) GetEndLine() uint64 {
	if x != nil && x.EndLine != nil {
		return *x.EndLine
	}
	return 0
}

func (x *DapScope) GetEndColumn() uint64 {
	if x != nil && x.EndColumn != nil {
		return *x.EndColumn
	}
	return 0
}

type DapSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *string                    `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Path             *string                    `protobuf:"bytes,2,opt,name=path,proto3,oneof" json:"path,omitempty"`
	SourceReference  *uint64                    `protobuf:"varint,3,opt,name=source_reference,json=sourceReference,proto3,oneof" json:"source_reference,omitempty"`
	PresentationHint *DapSourcePresentationHint `protobuf:"varint,4,opt,name=presentation_hint,json=presentationHint,proto3,enum=zed.messages.DapSourcePresentationHint,oneof" json:"presentation_hint,omitempty"`
	Origin           *string                    `protobuf:"bytes,5,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
	Sources          []*DapSource               `protobuf:"bytes,6,rep,name=sources,proto3" json:"sources,omitempty"`
	AdapterData      []byte                     `protobuf:"bytes,7,opt,name=adapter_data,json=adapterData,proto3,oneof" json:"adapter_data,omitempty"`
	Checksums        []*DapChecksum             `protobuf:"bytes,8,rep,name=checksums,proto3" json:"checksums,omitempty"`
}

func (x *DapSource) Reset() {
	*x = DapSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapSource) ProtoMessage() {}

func (x *DapSource) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapSource.ProtoReflect.Descriptor instead.
func (*DapSource) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{54}
}

func (x *DapSource) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DapSource) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *DapSource) GetSourceReference() uint64 {
	if x != nil && x.SourceReference != nil {
		return *x.SourceReference
	}
	return 0
}

func (x *DapSource) GetPresentationHint() DapSourcePresentationHint {
	if x != nil && x.PresentationHint != nil {
		return *x.PresentationHint
	}
	return DapSourcePresentationHint_SourceNormal
}

func (x *DapSource) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *DapSource) GetSources() []*DapSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *DapSource) GetAdapterData() []byte {
	if x != nil {
		return x.AdapterData
	}
	return nil
}

func (x *DapSource) GetChecksums() []*DapChecksum {
	if x != nil {
		return x.Checksums
	}
	return nil
}

type DapOutputEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output             string               `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Category           *DapOutputCategory   `protobuf:"varint,2,opt,name=category,proto3,enum=zed.messages.DapOutputCategory,oneof" json:"category,omitempty"`
	VariablesReference *uint64              `protobuf:"varint,3,opt,name=variables_reference,json=variablesReference,proto3,oneof" json:"variables_reference,omitempty"`
	Group              *DapOutputEventGroup `protobuf:"varint,4,opt,name=group,proto3,enum=zed.messages.DapOutputEventGroup,oneof" json:"group,omitempty"`
	Source             *DapSource           `protobuf:"bytes,5,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Line               *uint32              `protobuf:"varint,6,opt,name=line,proto3,oneof" json:"line,omitempty"`
	Column             *uint32              `protobuf:"varint,7,opt,name=column,proto3,oneof" json:"column,omitempty"`
}

func (x *DapOutputEvent) Reset() {
	*x = DapOutputEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapOutputEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapOutputEvent) ProtoMessage() {}

func (x *DapOutputEvent) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapOutputEvent.ProtoReflect.Descriptor instead.
func (*DapOutputEvent) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{55}
}

func (x *DapOutputEvent) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *DapOutputEvent) GetCategory() DapOutputCategory {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return DapOutputCategory_ConsoleOutput
}

func (x *DapOutputEvent) GetVariablesReference() uint64 {
	if x != nil && x.VariablesReference != nil {
		return *x.VariablesReference
	}
	return 0
}

func (x *DapOutputEvent) GetGroup() DapOutputEventGroup {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return DapOutputEventGroup_Start
}

func (x *DapOutputEvent) GetSource() *DapSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DapOutputEvent) GetLine() uint32 {
	if x != nil && x.Line != nil {
		return *x.Line
	}
	return 0
}

func (x *DapOutputEvent) GetColumn() uint32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

type DapChecksum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm DapChecksumAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=zed.messages.DapChecksumAlgorithm" json:"algorithm,omitempty"`
	Checksum  string               `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *DapChecksum) Reset() {
	*x = DapChecksum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapChecksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapChecksum) ProtoMessage() {}

func (x *DapChecksum) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapChecksum.ProtoReflect.Descriptor instead.
func (*DapChecksum) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{56}
}

func (x *DapChecksum) GetAlgorithm() DapChecksumAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return DapChecksumAlgorithm_CHECKSUM_ALGORITHM_UNSPECIFIED
}

func (x *DapChecksum) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

type DapModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *DapModuleId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path           *string      `protobuf:"bytes,3,opt,name=path,proto3,oneof" json:"path,omitempty"`
	IsOptimized    *bool        `protobuf:"varint,4,opt,name=is_optimized,json=isOptimized,proto3,oneof" json:"is_optimized,omitempty"`
	IsUserCode     *bool        `protobuf:"varint,5,opt,name=is_user_code,json=isUserCode,proto3,oneof" json:"is_user_code,omitempty"`
	Version        *string      `protobuf:"bytes,6,opt,name=version,proto3,oneof" json:"version,omitempty"`
	SymbolStatus   *string      `protobuf:"bytes,7,opt,name=symbol_status,json=symbolStatus,proto3,oneof" json:"symbol_status,omitempty"`
	SymbolFilePath *string      `protobuf:"bytes,8,opt,name=symbol_file_path,json=symbolFilePath,proto3,oneof" json:"symbol_file_path,omitempty"`
	DateTimeStamp  *string      `protobuf:"bytes,9,opt,name=date_time_stamp,json=dateTimeStamp,proto3,oneof" json:"date_time_stamp,omitempty"`
	AddressRange   *string      `protobuf:"bytes,10,opt,name=address_range,json=addressRange,proto3,oneof" json:"address_range,omitempty"`
}

func (x *DapModule) Reset() {
	*x = DapModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapModule) ProtoMessage() {}

func (x *DapModule) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapModule.ProtoReflect.Descriptor instead.
func (*DapModule) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{57}
}

func (x *DapModule) GetId() *DapModuleId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DapModule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DapModule) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *DapModule) GetIsOptimized() bool {
	if x != nil && x.IsOptimized != nil {
		return *x.IsOptimized
	}
	return false
}

func (x *DapModule) GetIsUserCode() bool {
	if x != nil && x.IsUserCode != nil {
		return *x.IsUserCode
	}
	return false
}

func (x *DapModule) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *DapModule) GetSymbolStatus() string {
	if x != nil && x.SymbolStatus != nil {
		return *x.SymbolStatus
	}
	return ""
}

func (x *DapModule) GetSymbolFilePath() string {
	if x != nil && x.SymbolFilePath != nil {
		return *x.SymbolFilePath
	}
	return ""
}

func (x *DapModule) GetDateTimeStamp() string {
	if x != nil && x.DateTimeStamp != nil {
		return *x.DateTimeStamp
	}
	return ""
}

func (x *DapModule) GetAddressRange() string {
	if x != nil && x.AddressRange != nil {
		return *x.AddressRange
	}
	return ""
}

type DebugTaskDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adapter string `protobuf:"bytes,1,opt,name=adapter,proto3" json:"adapter,omitempty"`
	Label   string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// Types that are assignable to Request:
	//
	//	*DebugTaskDefinition_DebugLaunchRequest
	//	*DebugTaskDefinition_DebugAttachRequest
	Request        isDebugTaskDefinition_Request `protobuf_oneof:"request"`
	InitializeArgs *string                       `protobuf:"bytes,5,opt,name=initialize_args,json=initializeArgs,proto3,oneof" json:"initialize_args,omitempty"`
	TcpConnection  *TcpHost                      `protobuf:"bytes,6,opt,name=tcp_connection,json=tcpConnection,proto3,oneof" json:"tcp_connection,omitempty"`
	StopOnEntry    *bool                         `protobuf:"varint,7,opt,name=stop_on_entry,json=stopOnEntry,proto3,oneof" json:"stop_on_entry,omitempty"`
}

func (x *DebugTaskDefinition) Reset() {
	*x = DebugTaskDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugTaskDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugTaskDefinition) ProtoMessage() {}

func (x *DebugTaskDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugTaskDefinition.ProtoReflect.Descriptor instead.
func (*DebugTaskDefinition) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{58}
}

func (x *DebugTaskDefinition) GetAdapter() string {
	if x != nil {
		return x.Adapter
	}
	return ""
}

func (x *DebugTaskDefinition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (m *DebugTaskDefinition) GetRequest() isDebugTaskDefinition_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *DebugTaskDefinition) GetDebugLaunchRequest() *DebugLaunchRequest {
	if x, ok := x.GetRequest().(*DebugTaskDefinition_DebugLaunchRequest); ok {
		return x.DebugLaunchRequest
	}
	return nil
}

func (x *DebugTaskDefinition) GetDebugAttachRequest() *DebugAttachRequest {
	if x, ok := x.GetRequest().(*DebugTaskDefinition_DebugAttachRequest); ok {
		return x.DebugAttachRequest
	}
	return nil
}

func (x *DebugTaskDefinition) GetInitializeArgs() string {
	if x != nil && x.InitializeArgs != nil {
		return *x.InitializeArgs
	}
	return ""
}

func (x *DebugTaskDefinition) GetTcpConnection() *TcpHost {
	if x != nil {
		return x.TcpConnection
	}
	return nil
}

func (x *DebugTaskDefinition) GetStopOnEntry() bool {
	if x != nil && x.StopOnEntry != nil {
		return *x.StopOnEntry
	}
	return false
}

type isDebugTaskDefinition_Request interface {
	isDebugTaskDefinition_Request()
}

type DebugTaskDefinition_DebugLaunchRequest struct {
	DebugLaunchRequest *DebugLaunchRequest `protobuf:"bytes,3,opt,name=debug_launch_request,json=debugLaunchRequest,proto3,oneof"`
}

type DebugTaskDefinition_DebugAttachRequest struct {
	DebugAttachRequest *DebugAttachRequest `protobuf:"bytes,4,opt,name=debug_attach_request,json=debugAttachRequest,proto3,oneof"`
}

func (*DebugTaskDefinition_DebugLaunchRequest) isDebugTaskDefinition_Request() {}

func (*DebugTaskDefinition_DebugAttachRequest) isDebugTaskDefinition_Request() {}

type TcpHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port    *uint32 `protobuf:"varint,1,opt,name=port,proto3,oneof" json:"port,omitempty"`
	Host    *string `protobuf:"bytes,2,opt,name=host,proto3,oneof" json:"host,omitempty"`
	Timeout *uint64 `protobuf:"varint,3,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
}

func (x *TcpHost) Reset() {
	*x = TcpHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpHost) ProtoMessage() {}

func (x *TcpHost) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpHost.ProtoReflect.Descriptor instead.
func (*TcpHost) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{59}
}

func (x *TcpHost) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *TcpHost) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *TcpHost) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type DebugLaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Program string            `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Cwd     *string           `protobuf:"bytes,2,opt,name=cwd,proto3,oneof" json:"cwd,omitempty"`
	Args    []string          `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	Env     map[string]string `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DebugLaunchRequest) Reset() {
	*x = DebugLaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugLaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugLaunchRequest) ProtoMessage() {}

func (x *DebugLaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugLaunchRequest.ProtoReflect.Descriptor instead.
func (*DebugLaunchRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{60}
}

func (x *DebugLaunchRequest) GetProgram() string {
	if x != nil {
		return x.Program
	}
	return ""
}

func (x *DebugLaunchRequest) GetCwd() string {
	if x != nil && x.Cwd != nil {
		return *x.Cwd
	}
	return ""
}

func (x *DebugLaunchRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *DebugLaunchRequest) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

type DebugAttachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId uint32 `protobuf:"varint,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
}

func (x *DebugAttachRequest) Reset() {
	*x = DebugAttachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugAttachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugAttachRequest) ProtoMessage() {}

func (x *DebugAttachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugAttachRequest.ProtoReflect.Descriptor instead.
func (*DebugAttachRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{61}
}

func (x *DebugAttachRequest) GetProcessId() uint32 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

type DapModuleId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*DapModuleId_Number
	//	*DapModuleId_String_
	Id isDapModuleId_Id `protobuf_oneof:"id"`
}

func (x *DapModuleId) Reset() {
	*x = DapModuleId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DapModuleId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DapModuleId) ProtoMessage() {}

func (x *DapModuleId) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DapModuleId.ProtoReflect.Descriptor instead.
func (*DapModuleId) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{62}
}

func (m *DapModuleId) GetId() isDapModuleId_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *DapModuleId) GetNumber() uint32 {
	if x, ok := x.GetId().(*DapModuleId_Number); ok {
		return x.Number
	}
	return 0
}

func (x *DapModuleId) GetString_() string {
	if x, ok := x.GetId().(*DapModuleId_String_); ok {
		return x.String_
	}
	return ""
}

type isDapModuleId_Id interface {
	isDapModuleId_Id()
}

type DapModuleId_Number struct {
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3,oneof"`
}

type DapModuleId_String_ struct {
	String_ string `protobuf:"bytes,2,opt,name=string,proto3,oneof"`
}

func (*DapModuleId_Number) isDapModuleId_Id() {}

func (*DapModuleId_String_) isDapModuleId_Id() {}

type GetDebugAdapterBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  uint64               `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Definition *DebugTaskDefinition `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *GetDebugAdapterBinary) Reset() {
	*x = GetDebugAdapterBinary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDebugAdapterBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebugAdapterBinary) ProtoMessage() {}

func (x *GetDebugAdapterBinary) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebugAdapterBinary.ProtoReflect.Descriptor instead.
func (*GetDebugAdapterBinary) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{63}
}

func (x *GetDebugAdapterBinary) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetDebugAdapterBinary) GetDefinition() *DebugTaskDefinition {
	if x != nil {
		return x.Definition
	}
	return nil
}

type DebugAdapterBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command       string                        `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Arguments     []string                      `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Envs          map[string]string             `protobuf:"bytes,3,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cwd           *string                       `protobuf:"bytes,4,opt,name=cwd,proto3,oneof" json:"cwd,omitempty"`
	Connection    *TcpHost                      `protobuf:"bytes,5,opt,name=connection,proto3,oneof" json:"connection,omitempty"`
	Configuration string                        `protobuf:"bytes,7,opt,name=configuration,proto3" json:"configuration,omitempty"`
	LaunchType    DebugAdapterBinary_LaunchType `protobuf:"varint,8,opt,name=launch_type,json=launchType,proto3,enum=zed.messages.DebugAdapterBinary_LaunchType" json:"launch_type,omitempty"`
}

func (x *DebugAdapterBinary) Reset() {
	*x = DebugAdapterBinary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugAdapterBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugAdapterBinary) ProtoMessage() {}

func (x *DebugAdapterBinary) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugAdapterBinary.ProtoReflect.Descriptor instead.
func (*DebugAdapterBinary) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{64}
}

func (x *DebugAdapterBinary) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *DebugAdapterBinary) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *DebugAdapterBinary) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *DebugAdapterBinary) GetCwd() string {
	if x != nil && x.Cwd != nil {
		return *x.Cwd
	}
	return ""
}

func (x *DebugAdapterBinary) GetConnection() *TcpHost {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *DebugAdapterBinary) GetConfiguration() string {
	if x != nil {
		return x.Configuration
	}
	return ""
}

func (x *DebugAdapterBinary) GetLaunchType() DebugAdapterBinary_LaunchType {
	if x != nil {
		return x.LaunchType
	}
	return DebugAdapterBinary_Attach
}

type RunDebugLocators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64           `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BuildCommand *SpawnInTerminal `protobuf:"bytes,2,opt,name=build_command,json=buildCommand,proto3" json:"build_command,omitempty"`
}

func (x *RunDebugLocators) Reset() {
	*x = RunDebugLocators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunDebugLocators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDebugLocators) ProtoMessage() {}

func (x *RunDebugLocators) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDebugLocators.ProtoReflect.Descriptor instead.
func (*RunDebugLocators) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{65}
}

func (x *RunDebugLocators) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *RunDebugLocators) GetBuildCommand() *SpawnInTerminal {
	if x != nil {
		return x.BuildCommand
	}
	return nil
}

type DebugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*DebugRequest_DebugLaunchRequest
	//	*DebugRequest_DebugAttachRequest
	Request isDebugRequest_Request `protobuf_oneof:"request"`
}

func (x *DebugRequest) Reset() {
	*x = DebugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugRequest) ProtoMessage() {}

func (x *DebugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugRequest.ProtoReflect.Descriptor instead.
func (*DebugRequest) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{66}
}

func (m *DebugRequest) GetRequest() isDebugRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *DebugRequest) GetDebugLaunchRequest() *DebugLaunchRequest {
	if x, ok := x.GetRequest().(*DebugRequest_DebugLaunchRequest); ok {
		return x.DebugLaunchRequest
	}
	return nil
}

func (x *DebugRequest) GetDebugAttachRequest() *DebugAttachRequest {
	if x, ok := x.GetRequest().(*DebugRequest_DebugAttachRequest); ok {
		return x.DebugAttachRequest
	}
	return nil
}

type isDebugRequest_Request interface {
	isDebugRequest_Request()
}

type DebugRequest_DebugLaunchRequest struct {
	DebugLaunchRequest *DebugLaunchRequest `protobuf:"bytes,1,opt,name=debug_launch_request,json=debugLaunchRequest,proto3,oneof"`
}

type DebugRequest_DebugAttachRequest struct {
	DebugAttachRequest *DebugAttachRequest `protobuf:"bytes,2,opt,name=debug_attach_request,json=debugAttachRequest,proto3,oneof"`
}

func (*DebugRequest_DebugLaunchRequest) isDebugRequest_Request() {}

func (*DebugRequest_DebugAttachRequest) isDebugRequest_Request() {}

type DebugScenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label         string        `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Adapter       string        `protobuf:"bytes,2,opt,name=adapter,proto3" json:"adapter,omitempty"`
	Request       *DebugRequest `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	Connection    *TcpHost      `protobuf:"bytes,5,opt,name=connection,proto3,oneof" json:"connection,omitempty"`
	StopOnEntry   *bool         `protobuf:"varint,6,opt,name=stop_on_entry,json=stopOnEntry,proto3,oneof" json:"stop_on_entry,omitempty"`
	Configuration *string       `protobuf:"bytes,7,opt,name=configuration,proto3,oneof" json:"configuration,omitempty"`
}

func (x *DebugScenario) Reset() {
	*x = DebugScenario{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugScenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugScenario) ProtoMessage() {}

func (x *DebugScenario) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugScenario.ProtoReflect.Descriptor instead.
func (*DebugScenario) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{67}
}

func (x *DebugScenario) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DebugScenario) GetAdapter() string {
	if x != nil {
		return x.Adapter
	}
	return ""
}

func (x *DebugScenario) GetRequest() *DebugRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *DebugScenario) GetConnection() *TcpHost {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *DebugScenario) GetStopOnEntry() bool {
	if x != nil && x.StopOnEntry != nil {
		return *x.StopOnEntry
	}
	return false
}

func (x *DebugScenario) GetConfiguration() string {
	if x != nil && x.Configuration != nil {
		return *x.Configuration
	}
	return ""
}

type SpawnInTerminal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label   string            `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Command string            `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Args    []string          `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	Env     map[string]string `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cwd     *string           `protobuf:"bytes,5,opt,name=cwd,proto3,oneof" json:"cwd,omitempty"`
}

func (x *SpawnInTerminal) Reset() {
	*x = SpawnInTerminal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debugger_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpawnInTerminal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnInTerminal) ProtoMessage() {}

func (x *SpawnInTerminal) ProtoReflect() protoreflect.Message {
	mi := &file_debugger_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnInTerminal.ProtoReflect.Descriptor instead.
func (*SpawnInTerminal) Descriptor() ([]byte, []int) {
	return file_debugger_proto_rawDescGZIP(), []int{68}
}

func (x *SpawnInTerminal) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SpawnInTerminal) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *SpawnInTerminal) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *SpawnInTerminal) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *SpawnInTerminal) GetCwd() string {
	if x != nil && x.Cwd != nil {
		return *x.Cwd
	}
	return ""
}

var File_debugger_proto protoreflect.FileDescriptor

var file_debugger_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0c, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x0a,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x02, 0x0a, 0x0a, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x68, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x83, 0x01, 0x0a,
	0x12, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0b, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0x7f, 0x0a, 0x10, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0d, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x45, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0x2c, 0x0a, 0x16, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x64,
	0x0a, 0x19, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x22, 0x6f, 0x0a, 0x19, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x19, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x49,
	0x64, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x22, 0x6a, 0x0a, 0x12, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x44, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x22, 0x2c, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x03, 0x68, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x68,
	0x65, 0x78, 0x22, 0xdc, 0x02, 0x0a, 0x10, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x03, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x44, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x14, 0x44, 0x61, 0x70, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44,
	0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xea, 0x01, 0x0a,
	0x12, 0x44, 0x61, 0x70, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x44, 0x61, 0x70, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xe7, 0x02, 0x0a, 0x13, 0x44, 0x61,
	0x70, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x12, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0e, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x11, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x10, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x14, 0x44, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e,
	0x0a, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x11, 0x44, 0x61, 0x70, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x03, 0x74, 0x79, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x03, 0x74,
	0x79, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x07, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x74, 0x79, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x22, 0x77, 0x0a, 0x15, 0x44, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x74, 0x0a, 0x10,
	0x44, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x22, 0x43, 0x0a, 0x11, 0x44, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x1a, 0x44, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xa9, 0x03,
	0x0a, 0x1b, 0x44, 0x61, 0x70, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x28, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x12, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0e, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x6a, 0x0a, 0x0f, 0x44, 0x61, 0x70,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x14, 0x44, 0x61, 0x70, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x11, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0f, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x67, 0x65, 0x65, 0x22, 0x77, 0x0a, 0x1a, 0x44, 0x61, 0x70, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x73, 0x22, 0x4f,
	0x0a, 0x11, 0x44, 0x61, 0x70, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x47, 0x0a, 0x12, 0x44, 0x61, 0x70, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x7c, 0x0a, 0x13, 0x44, 0x61, 0x70, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x6a, 0x0a, 0x11, 0x44, 0x61, 0x70, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x61, 0x77, 0x41, 0x72,
	0x67, 0x73, 0x22, 0x7f, 0x0a, 0x1b, 0x44, 0x61, 0x70, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x17, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x15,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x0e,
	0x44, 0x61, 0x70, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x48, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x48, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x61,
	0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0xb1, 0x02,
	0x0a, 0x10, 0x44, 0x61, 0x70, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x48,
	0x02, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x82, 0x02, 0x0a, 0x11, 0x44, 0x61, 0x70, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x67, 0x72,
	0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x65, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x48, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0x83, 0x02, 0x0a, 0x12, 0x44, 0x61, 0x70, 0x53, 0x74,
	0x65, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61,
	0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x48, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa9, 0x01, 0x0a,
	0x12, 0x44, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x44, 0x61, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x15, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x13,
	0x61, 0x6c, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64,
	0x22, 0x4f, 0x0a, 0x11, 0x44, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x64, 0x0a, 0x12, 0x44, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x17, 0x44, 0x61, 0x70, 0x4c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6a,
	0x0a, 0x18, 0x44, 0x61, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x14, 0x44,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0x4c, 0x0a, 0x15,
	0x44, 0x61, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xdc, 0x04, 0x0a, 0x0d, 0x44,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x44, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1d,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x1b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x48, 0x05, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x58, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x69, 0x6e, 0x74, 0x48, 0x06, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x18, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x0c, 0x44, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x95, 0x03, 0x0a, 0x0b,
	0x44, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x02, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x2f, 0x0a, 0x09, 0x44, 0x61, 0x70, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd2, 0x04, 0x0a, 0x08, 0x44, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x44, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x13, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0e, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x10, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61,
	0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x04, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x07,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x68, 0x69, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xd2, 0x03, 0x0a, 0x09, 0x44, 0x61,
	0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x11, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x48, 0x03, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x44, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x0b, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x09,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44,
	0x61, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69,
	0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x98,
	0x03, 0x0a, 0x0e, 0x44, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x12, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3c, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x44, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x48, 0x02, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44,
	0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x6b, 0x0a, 0x0b, 0x44, 0x61, 0x70,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x70, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x85, 0x04, 0x0a, 0x09, 0x44, 0x61, 0x70, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x44, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x69, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xcf,
	0x03, 0x0a, 0x13, 0x44, 0x65, 0x62, 0x75, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x54, 0x0a, 0x14, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x14,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x48,
	0x02, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x70, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0x78, 0x0a, 0x07, 0x54, 0x63, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x12, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x03, 0x63,
	0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x63, 0x77, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x63, 0x77, 0x64, 0x22, 0x33, 0x0a, 0x12, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x0b, 0x44, 0x61, 0x70, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x04, 0x0a, 0x02, 0x69,
	0x64, 0x22, 0x79, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x03, 0x0a,
	0x12, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x65,
	0x6e, 0x76, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x76, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x63,
	0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x63, 0x77, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x63, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x48, 0x01, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x0a, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x10,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x77, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x49, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0xc5, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x14, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x14, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x62, 0x75, 0x67, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbe, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x54, 0x63, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xe6, 0x01, 0x0a, 0x0f, 0x53, 0x70, 0x61,
	0x77, 0x6e, 0x49, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x38, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x61,
	0x77, 0x6e, 0x49, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x77,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x63, 0x77, 0x64, 0x88, 0x01,
	0x01, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x77,
	0x64, 0x2a, 0x2c, 0x0a, 0x0f, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x2a,
	0x4f, 0x0a, 0x12, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x10, 0x03,
	0x2a, 0x42, 0x0a, 0x0f, 0x44, 0x61, 0x70, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x45, 0x78, 0x69, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6e, 0x64,
	0x65, 0x64, 0x10, 0x03, 0x2a, 0x32, 0x0a, 0x18, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x10, 0x01, 0x2a, 0x3f, 0x0a, 0x13, 0x53, 0x74, 0x65, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0x6f, 0x0a, 0x12, 0x44, 0x61, 0x70,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x08, 0x0a, 0x04, 0x52, 0x65, 0x70, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x05, 0x2a, 0x95, 0x02, 0x0a, 0x15, 0x44,
	0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x07, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04,
	0x55, 0x6e, 0x69, 0x74, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10,
	0x0a, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x6e, 0x69, 0x70,
	0x70, 0x65, 0x74, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x10, 0x0e, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65,
	0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x10,
	0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x10, 0x13, 0x2a, 0x5a, 0x0a, 0x11, 0x44, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x04, 0x2a, 0x3d,
	0x0a, 0x13, 0x44, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x10, 0x02, 0x2a, 0x68, 0x0a,
	0x14, 0x44, 0x61, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x55,
	0x4d, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x44, 0x35,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x48, 0x41, 0x31, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x04, 0x2a, 0x67, 0x0a, 0x18, 0x44, 0x61, 0x70, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x6e, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x04,
	0x2a, 0x60, 0x0a, 0x19, 0x44, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x03, 0x2a, 0x54, 0x0a, 0x18, 0x44, 0x61, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x75,
	0x62, 0x74, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x03, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_debugger_proto_rawDescOnce sync.Once
	file_debugger_proto_rawDescData = file_debugger_proto_rawDesc
)

func file_debugger_proto_rawDescGZIP() []byte {
	file_debugger_proto_rawDescOnce.Do(func() {
		file_debugger_proto_rawDescData = protoimpl.X.CompressGZIP(file_debugger_proto_rawDescData)
	})
	return file_debugger_proto_rawDescData
}

var file_debugger_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_debugger_proto_msgTypes = make([]protoimpl.MessageInfo, 72)
var file_debugger_proto_goTypes = []interface{}{
	(BreakpointState)(0),                // 0: zed.messages.BreakpointState
	(DebuggerThreadItem)(0),             // 1: zed.messages.DebuggerThreadItem
	(DapThreadStatus)(0),                // 2: zed.messages.DapThreadStatus
	(VariablesArgumentsFilter)(0),       // 3: zed.messages.VariablesArgumentsFilter
	(SteppingGranularity)(0),            // 4: zed.messages.SteppingGranularity
	(DapEvaluateContext)(0),             // 5: zed.messages.DapEvaluateContext
	(DapCompletionItemType)(0),          // 6: zed.messages.DapCompletionItemType
	(DapOutputCategory)(0),              // 7: zed.messages.DapOutputCategory
	(DapOutputEventGroup)(0),            // 8: zed.messages.DapOutputEventGroup
	(DapChecksumAlgorithm)(0),           // 9: zed.messages.DapChecksumAlgorithm
	(DapScopePresentationHint)(0),       // 10: zed.messages.DapScopePresentationHint
	(DapSourcePresentationHint)(0),      // 11: zed.messages.DapSourcePresentationHint
	(DapStackPresentationHint)(0),       // 12: zed.messages.DapStackPresentationHint
	(DebugAdapterBinary_LaunchType)(0),  // 13: zed.messages.DebugAdapterBinary.LaunchType
	(*Breakpoint)(nil),                  // 14: zed.messages.Breakpoint
	(*BreakpointsForFile)(nil),          // 15: zed.messages.BreakpointsForFile
	(*ToggleBreakpoint)(nil),            // 16: zed.messages.ToggleBreakpoint
	(*DebuggerSetVariableState)(nil),    // 17: zed.messages.DebuggerSetVariableState
	(*VariableListOpenEntry)(nil),       // 18: zed.messages.VariableListOpenEntry
	(*DebuggerOpenEntryScope)(nil),      // 19: zed.messages.DebuggerOpenEntryScope
	(*DebuggerOpenEntryVariable)(nil),   // 20: zed.messages.DebuggerOpenEntryVariable
	(*VariableListEntrySetState)(nil),   // 21: zed.messages.VariableListEntrySetState
	(*VariableListEntryVariable)(nil),   // 22: zed.messages.VariableListEntryVariable
	(*DebuggerScopeVariableIndex)(nil),  // 23: zed.messages.DebuggerScopeVariableIndex
	(*DebuggerVariableContainer)(nil),   // 24: zed.messages.DebuggerVariableContainer
	(*VariableListScopes)(nil),          // 25: zed.messages.VariableListScopes
	(*VariableListVariables)(nil),       // 26: zed.messages.VariableListVariables
	(*ValueFormat)(nil),                 // 27: zed.messages.ValueFormat
	(*VariablesRequest)(nil),            // 28: zed.messages.VariablesRequest
	(*DapLocationsRequest)(nil),         // 29: zed.messages.DapLocationsRequest
	(*DapLocationsResponse)(nil),        // 30: zed.messages.DapLocationsResponse
	(*DapEvaluateRequest)(nil),          // 31: zed.messages.DapEvaluateRequest
	(*DapEvaluateResponse)(nil),         // 32: zed.messages.DapEvaluateResponse
	(*DapCompletionRequest)(nil),        // 33: zed.messages.DapCompletionRequest
	(*DapCompletionItem)(nil),           // 34: zed.messages.DapCompletionItem
	(*DapCompletionResponse)(nil),       // 35: zed.messages.DapCompletionResponse
	(*DapScopesRequest)(nil),            // 36: zed.messages.DapScopesRequest
	(*DapScopesResponse)(nil),           // 37: zed.messages.DapScopesResponse
	(*DapSetVariableValueRequest)(nil),  // 38: zed.messages.DapSetVariableValueRequest
	(*DapSetVariableValueResponse)(nil), // 39: zed.messages.DapSetVariableValueResponse
	(*DapPauseRequest)(nil),             // 40: zed.messages.DapPauseRequest
	(*DapDisconnectRequest)(nil),        // 41: zed.messages.DapDisconnectRequest
	(*DapTerminateThreadsRequest)(nil),  // 42: zed.messages.DapTerminateThreadsRequest
	(*DapThreadsRequest)(nil),           // 43: zed.messages.DapThreadsRequest
	(*DapThreadsResponse)(nil),          // 44: zed.messages.DapThreadsResponse
	(*DapTerminateRequest)(nil),         // 45: zed.messages.DapTerminateRequest
	(*DapRestartRequest)(nil),           // 46: zed.messages.DapRestartRequest
	(*DapRestartStackFrameRequest)(nil), // 47: zed.messages.DapRestartStackFrameRequest
	(*ToggleIgnoreBreakpoints)(nil),     // 48: zed.messages.ToggleIgnoreBreakpoints
	(*IgnoreBreakpointState)(nil),       // 49: zed.messages.IgnoreBreakpointState
	(*DapNextRequest)(nil),              // 50: zed.messages.DapNextRequest
	(*DapStepInRequest)(nil),            // 51: zed.messages.DapStepInRequest
	(*DapStepOutRequest)(nil),           // 52: zed.messages.DapStepOutRequest
	(*DapStepBackRequest)(nil),          // 53: zed.messages.DapStepBackRequest
	(*DapContinueRequest)(nil),          // 54: zed.messages.DapContinueRequest
	(*DapContinueResponse)(nil),         // 55: zed.messages.DapContinueResponse
	(*DapModulesRequest)(nil),           // 56: zed.messages.DapModulesRequest
	(*DapModulesResponse)(nil),          // 57: zed.messages.DapModulesResponse
	(*DapLoadedSourcesRequest)(nil),     // 58: zed.messages.DapLoadedSourcesRequest
	(*DapLoadedSourcesResponse)(nil),    // 59: zed.messages.DapLoadedSourcesResponse
	(*DapStackTraceRequest)(nil),        // 60: zed.messages.DapStackTraceRequest
	(*DapStackTraceResponse)(nil),       // 61: zed.messages.DapStackTraceResponse
	(*DapStackFrame)(nil),               // 62: zed.messages.DapStackFrame
	(*DebuggerLoadedSourceList)(nil),    // 63: zed.messages.DebuggerLoadedSourceList
	(*DapVariables)(nil),                // 64: zed.messages.DapVariables
	(*DapVariable)(nil),                 // 65: zed.messages.DapVariable
	(*DapThread)(nil),                   // 66: zed.messages.DapThread
	(*DapScope)(nil),                    // 67: zed.messages.DapScope
	(*DapSource)(nil),                   // 68: zed.messages.DapSource
	(*DapOutputEvent)(nil),              // 69: zed.messages.DapOutputEvent
	(*DapChecksum)(nil),                 // 70: zed.messages.DapChecksum
	(*DapModule)(nil),                   // 71: zed.messages.DapModule
	(*DebugTaskDefinition)(nil),         // 72: zed.messages.DebugTaskDefinition
	(*TcpHost)(nil),                     // 73: zed.messages.TcpHost
	(*DebugLaunchRequest)(nil),          // 74: zed.messages.DebugLaunchRequest
	(*DebugAttachRequest)(nil),          // 75: zed.messages.DebugAttachRequest
	(*DapModuleId)(nil),                 // 76: zed.messages.DapModuleId
	(*GetDebugAdapterBinary)(nil),       // 77: zed.messages.GetDebugAdapterBinary
	(*DebugAdapterBinary)(nil),          // 78: zed.messages.DebugAdapterBinary
	(*RunDebugLocators)(nil),            // 79: zed.messages.RunDebugLocators
	(*DebugRequest)(nil),                // 80: zed.messages.DebugRequest
	(*DebugScenario)(nil),               // 81: zed.messages.DebugScenario
	(*SpawnInTerminal)(nil),             // 82: zed.messages.SpawnInTerminal
	nil,                                 // 83: zed.messages.DebugLaunchRequest.EnvEntry
	nil,                                 // 84: zed.messages.DebugAdapterBinary.EnvsEntry
	nil,                                 // 85: zed.messages.SpawnInTerminal.EnvEntry
	(*Anchor)(nil),                      // 86: zed.messages.Anchor
}
var file_debugger_proto_depIdxs = []int32{
	86, // 0: zed.messages.Breakpoint.position:type_name -> zed.messages.Anchor
	0,  // 1: zed.messages.Breakpoint.state:type_name -> zed.messages.BreakpointState
	14, // 2: zed.messages.BreakpointsForFile.breakpoints:type_name -> zed.messages.Breakpoint
	14, // 3: zed.messages.ToggleBreakpoint.breakpoint:type_name -> zed.messages.Breakpoint
	67, // 4: zed.messages.DebuggerSetVariableState.scope:type_name -> zed.messages.DapScope
	19, // 5: zed.messages.VariableListOpenEntry.scope:type_name -> zed.messages.DebuggerOpenEntryScope
	20, // 6: zed.messages.VariableListOpenEntry.variable:type_name -> zed.messages.DebuggerOpenEntryVariable
	17, // 7: zed.messages.VariableListEntrySetState.state:type_name -> zed.messages.DebuggerSetVariableState
	67, // 8: zed.messages.VariableListEntryVariable.scope:type_name -> zed.messages.DapScope
	65, // 9: zed.messages.VariableListEntryVariable.variable:type_name -> zed.messages.DapVariable
	24, // 10: zed.messages.DebuggerScopeVariableIndex.variables:type_name -> zed.messages.DebuggerVariableContainer
	65, // 11: zed.messages.DebuggerVariableContainer.variable:type_name -> zed.messages.DapVariable
	67, // 12: zed.messages.VariableListScopes.scopes:type_name -> zed.messages.DapScope
	23, // 13: zed.messages.VariableListVariables.variables:type_name -> zed.messages.DebuggerScopeVariableIndex
	3,  // 14: zed.messages.VariablesRequest.filter:type_name -> zed.messages.VariablesArgumentsFilter
	27, // 15: zed.messages.VariablesRequest.format:type_name -> zed.messages.ValueFormat
	68, // 16: zed.messages.DapLocationsResponse.source:type_name -> zed.messages.DapSource
	5,  // 17: zed.messages.DapEvaluateRequest.context:type_name -> zed.messages.DapEvaluateContext
	6,  // 18: zed.messages.DapCompletionItem.typ:type_name -> zed.messages.DapCompletionItemType
	34, // 19: zed.messages.DapCompletionResponse.completions:type_name -> zed.messages.DapCompletionItem
	67, // 20: zed.messages.DapScopesResponse.scopes:type_name -> zed.messages.DapScope
	66, // 21: zed.messages.DapThreadsResponse.threads:type_name -> zed.messages.DapThread
	4,  // 22: zed.messages.DapNextRequest.granularity:type_name -> zed.messages.SteppingGranularity
	4,  // 23: zed.messages.DapStepInRequest.granularity:type_name -> zed.messages.SteppingGranularity
	4,  // 24: zed.messages.DapStepOutRequest.granularity:type_name -> zed.messages.SteppingGranularity
	4,  // 25: zed.messages.DapStepBackRequest.granularity:type_name -> zed.messages.SteppingGranularity
	71, // 26: zed.messages.DapModulesResponse.modules:type_name -> zed.messages.DapModule
	68, // 27: zed.messages.DapLoadedSourcesResponse.sources:type_name -> zed.messages.DapSource
	62, // 28: zed.messages.DapStackTraceResponse.frames:type_name -> zed.messages.DapStackFrame
	68, // 29: zed.messages.DapStackFrame.source:type_name -> zed.messages.DapSource
	76, // 30: zed.messages.DapStackFrame.module_id:type_name -> zed.messages.DapModuleId
	12, // 31: zed.messages.DapStackFrame.presentation_hint:type_name -> zed.messages.DapStackPresentationHint
	68, // 32: zed.messages.DebuggerLoadedSourceList.sources:type_name -> zed.messages.DapSource
	65, // 33: zed.messages.DapVariables.variables:type_name -> zed.messages.DapVariable
	10, // 34: zed.messages.DapScope.presentation_hint:type_name -> zed.messages.DapScopePresentationHint
	68, // 35: zed.messages.DapScope.source:type_name -> zed.messages.DapSource
	11, // 36: zed.messages.DapSource.presentation_hint:type_name -> zed.messages.DapSourcePresentationHint
	68, // 37: zed.messages.DapSource.sources:type_name -> zed.messages.DapSource
	70, // 38: zed.messages.DapSource.checksums:type_name -> zed.messages.DapChecksum
	7,  // 39: zed.messages.DapOutputEvent.category:type_name -> zed.messages.DapOutputCategory
	8,  // 40: zed.messages.DapOutputEvent.group:type_name -> zed.messages.DapOutputEventGroup
	68, // 41: zed.messages.DapOutputEvent.source:type_name -> zed.messages.DapSource
	9,  // 42: zed.messages.DapChecksum.algorithm:type_name -> zed.messages.DapChecksumAlgorithm
	76, // 43: zed.messages.DapModule.id:type_name -> zed.messages.DapModuleId
	74, // 44: zed.messages.DebugTaskDefinition.debug_launch_request:type_name -> zed.messages.DebugLaunchRequest
	75, // 45: zed.messages.DebugTaskDefinition.debug_attach_request:type_name -> zed.messages.DebugAttachRequest
	73, // 46: zed.messages.DebugTaskDefinition.tcp_connection:type_name -> zed.messages.TcpHost
	83, // 47: zed.messages.DebugLaunchRequest.env:type_name -> zed.messages.DebugLaunchRequest.EnvEntry
	72, // 48: zed.messages.GetDebugAdapterBinary.definition:type_name -> zed.messages.DebugTaskDefinition
	84, // 49: zed.messages.DebugAdapterBinary.envs:type_name -> zed.messages.DebugAdapterBinary.EnvsEntry
	73, // 50: zed.messages.DebugAdapterBinary.connection:type_name -> zed.messages.TcpHost
	13, // 51: zed.messages.DebugAdapterBinary.launch_type:type_name -> zed.messages.DebugAdapterBinary.LaunchType
	82, // 52: zed.messages.RunDebugLocators.build_command:type_name -> zed.messages.SpawnInTerminal
	74, // 53: zed.messages.DebugRequest.debug_launch_request:type_name -> zed.messages.DebugLaunchRequest
	75, // 54: zed.messages.DebugRequest.debug_attach_request:type_name -> zed.messages.DebugAttachRequest
	80, // 55: zed.messages.DebugScenario.request:type_name -> zed.messages.DebugRequest
	73, // 56: zed.messages.DebugScenario.connection:type_name -> zed.messages.TcpHost
	85, // 57: zed.messages.SpawnInTerminal.env:type_name -> zed.messages.SpawnInTerminal.EnvEntry
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_debugger_proto_init() }
func file_debugger_proto_init() {
	if File_debugger_proto != nil {
		return
	}
	file_core_proto_init()
	file_buffer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_debugger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Breakpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakpointsForFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleBreakpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebuggerSetVariableState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableListOpenEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebuggerOpenEntryScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebuggerOpenEntryVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableListEntrySetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableListEntryVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebuggerScopeVariableIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebuggerVariableContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableListScopes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableListVariables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapLocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapLocationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapEvaluateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapEvaluateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapCompletionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapCompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapScopesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapScopesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapSetVariableValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapSetVariableValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapPauseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapDisconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapTerminateThreadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapThreadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapThreadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapTerminateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapRestartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapRestartStackFrameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleIgnoreBreakpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IgnoreBreakpointState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapNextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapStepInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapStepOutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapStepBackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapContinueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapContinueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapModulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapModulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapLoadedSourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapLoadedSourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapStackTraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapStackTraceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapStackFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebuggerLoadedSourceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapVariables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapThread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapOutputEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapChecksum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugTaskDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugLaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugAttachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DapModuleId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDebugAdapterBinary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugAdapterBinary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDebugLocators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugScenario); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debugger_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpawnInTerminal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_debugger_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*VariableListOpenEntry_Scope)(nil),
		(*VariableListOpenEntry_Variable)(nil),
	}
	file_debugger_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*DebugTaskDefinition_DebugLaunchRequest)(nil),
		(*DebugTaskDefinition_DebugAttachRequest)(nil),
	}
	file_debugger_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*DapModuleId_Number)(nil),
		(*DapModuleId_String_)(nil),
	}
	file_debugger_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[66].OneofWrappers = []interface{}{
		(*DebugRequest_DebugLaunchRequest)(nil),
		(*DebugRequest_DebugAttachRequest)(nil),
	}
	file_debugger_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_debugger_proto_msgTypes[68].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_debugger_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   72,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_debugger_proto_goTypes,
		DependencyIndexes: file_debugger_proto_depIdxs,
		EnumInfos:         file_debugger_proto_enumTypes,
		MessageInfos:      file_debugger_proto_msgTypes,
	}.Build()
	File_debugger_proto = out.File
	file_debugger_proto_rawDesc = nil
	file_debugger_proto_goTypes = nil
	file_debugger_proto_depIdxs = nil
}
