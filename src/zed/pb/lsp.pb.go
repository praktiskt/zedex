// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: lsp.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarkupKind int32

const (
	MarkupKind_PlainText MarkupKind = 0
	MarkupKind_Markdown  MarkupKind = 1
)

// Enum value maps for MarkupKind.
var (
	MarkupKind_name = map[int32]string{
		0: "PlainText",
		1: "Markdown",
	}
	MarkupKind_value = map[string]int32{
		"PlainText": 0,
		"Markdown":  1,
	}
)

func (x MarkupKind) Enum() *MarkupKind {
	p := new(MarkupKind)
	*p = x
	return p
}

func (x MarkupKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarkupKind) Descriptor() protoreflect.EnumDescriptor {
	return file_lsp_proto_enumTypes[0].Descriptor()
}

func (MarkupKind) Type() protoreflect.EnumType {
	return &file_lsp_proto_enumTypes[0]
}

func (x MarkupKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarkupKind.Descriptor instead.
func (MarkupKind) EnumDescriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{0}
}

type FormatTrigger int32

const (
	FormatTrigger_Save   FormatTrigger = 0
	FormatTrigger_Manual FormatTrigger = 1
)

// Enum value maps for FormatTrigger.
var (
	FormatTrigger_name = map[int32]string{
		0: "Save",
		1: "Manual",
	}
	FormatTrigger_value = map[string]int32{
		"Save":   0,
		"Manual": 1,
	}
)

func (x FormatTrigger) Enum() *FormatTrigger {
	p := new(FormatTrigger)
	*p = x
	return p
}

func (x FormatTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormatTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_lsp_proto_enumTypes[1].Descriptor()
}

func (FormatTrigger) Type() protoreflect.EnumType {
	return &file_lsp_proto_enumTypes[1]
}

func (x FormatTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FormatTrigger.Descriptor instead.
func (FormatTrigger) EnumDescriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{1}
}

type DocumentHighlight_Kind int32

const (
	DocumentHighlight_Text  DocumentHighlight_Kind = 0
	DocumentHighlight_Read  DocumentHighlight_Kind = 1
	DocumentHighlight_Write DocumentHighlight_Kind = 2
)

// Enum value maps for DocumentHighlight_Kind.
var (
	DocumentHighlight_Kind_name = map[int32]string{
		0: "Text",
		1: "Read",
		2: "Write",
	}
	DocumentHighlight_Kind_value = map[string]int32{
		"Text":  0,
		"Read":  1,
		"Write": 2,
	}
)

func (x DocumentHighlight_Kind) Enum() *DocumentHighlight_Kind {
	p := new(DocumentHighlight_Kind)
	*p = x
	return p
}

func (x DocumentHighlight_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentHighlight_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_lsp_proto_enumTypes[2].Descriptor()
}

func (DocumentHighlight_Kind) Type() protoreflect.EnumType {
	return &file_lsp_proto_enumTypes[2]
}

func (x DocumentHighlight_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentHighlight_Kind.Descriptor instead.
func (DocumentHighlight_Kind) EnumDescriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{13, 0}
}

type Completion_Source int32

const (
	Completion_Lsp        Completion_Source = 0
	Completion_Custom     Completion_Source = 1
	Completion_BufferWord Completion_Source = 2
)

// Enum value maps for Completion_Source.
var (
	Completion_Source_name = map[int32]string{
		0: "Lsp",
		1: "Custom",
		2: "BufferWord",
	}
	Completion_Source_value = map[string]int32{
		"Lsp":        0,
		"Custom":     1,
		"BufferWord": 2,
	}
)

func (x Completion_Source) Enum() *Completion_Source {
	p := new(Completion_Source)
	*p = x
	return p
}

func (x Completion_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Completion_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_lsp_proto_enumTypes[3].Descriptor()
}

func (Completion_Source) Type() protoreflect.EnumType {
	return &file_lsp_proto_enumTypes[3]
}

func (x Completion_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Completion_Source.Descriptor instead.
func (Completion_Source) EnumDescriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{34, 0}
}

type ResolveState_State int32

const (
	ResolveState_Resolved   ResolveState_State = 0
	ResolveState_CanResolve ResolveState_State = 1
	ResolveState_Resolving  ResolveState_State = 2
)

// Enum value maps for ResolveState_State.
var (
	ResolveState_State_name = map[int32]string{
		0: "Resolved",
		1: "CanResolve",
		2: "Resolving",
	}
	ResolveState_State_value = map[string]int32{
		"Resolved":   0,
		"CanResolve": 1,
		"Resolving":  2,
	}
)

func (x ResolveState_State) Enum() *ResolveState_State {
	p := new(ResolveState_State)
	*p = x
	return p
}

func (x ResolveState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolveState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_lsp_proto_enumTypes[4].Descriptor()
}

func (ResolveState_State) Type() protoreflect.EnumType {
	return &file_lsp_proto_enumTypes[4]
}

func (x ResolveState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolveState_State.Descriptor instead.
func (ResolveState_State) EnumDescriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{62, 0}
}

type CodeAction_Kind int32

const (
	CodeAction_Action   CodeAction_Kind = 0
	CodeAction_Command  CodeAction_Kind = 1
	CodeAction_CodeLens CodeAction_Kind = 2
)

// Enum value maps for CodeAction_Kind.
var (
	CodeAction_Kind_name = map[int32]string{
		0: "Action",
		1: "Command",
		2: "CodeLens",
	}
	CodeAction_Kind_value = map[string]int32{
		"Action":   0,
		"Command":  1,
		"CodeLens": 2,
	}
)

func (x CodeAction_Kind) Enum() *CodeAction_Kind {
	p := new(CodeAction_Kind)
	*p = x
	return p
}

func (x CodeAction_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeAction_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_lsp_proto_enumTypes[5].Descriptor()
}

func (CodeAction_Kind) Type() protoreflect.EnumType {
	return &file_lsp_proto_enumTypes[5]
}

func (x CodeAction_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeAction_Kind.Descriptor instead.
func (CodeAction_Kind) EnumDescriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{74, 0}
}

type GetDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor             `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,4,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetDefinition) Reset() {
	*x = GetDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefinition) ProtoMessage() {}

func (x *GetDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefinition.ProtoReflect.Descriptor instead.
func (*GetDefinition) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{0}
}

func (x *GetDefinition) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetDefinition) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *GetDefinition) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GetDefinition) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetDefinitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*LocationLink `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *GetDefinitionResponse) Reset() {
	*x = GetDefinitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefinitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefinitionResponse) ProtoMessage() {}

func (x *GetDefinitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefinitionResponse.ProtoReflect.Descriptor instead.
func (*GetDefinitionResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{1}
}

func (x *GetDefinitionResponse) GetLinks() []*LocationLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type GetDeclaration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor             `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,4,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetDeclaration) Reset() {
	*x = GetDeclaration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeclaration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeclaration) ProtoMessage() {}

func (x *GetDeclaration) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeclaration.ProtoReflect.Descriptor instead.
func (*GetDeclaration) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{2}
}

func (x *GetDeclaration) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetDeclaration) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *GetDeclaration) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GetDeclaration) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetDeclarationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*LocationLink `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *GetDeclarationResponse) Reset() {
	*x = GetDeclarationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeclarationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeclarationResponse) ProtoMessage() {}

func (x *GetDeclarationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeclarationResponse.ProtoReflect.Descriptor instead.
func (*GetDeclarationResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{3}
}

func (x *GetDeclarationResponse) GetLinks() []*LocationLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type GetTypeDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor             `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,4,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetTypeDefinition) Reset() {
	*x = GetTypeDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTypeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTypeDefinition) ProtoMessage() {}

func (x *GetTypeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTypeDefinition.ProtoReflect.Descriptor instead.
func (*GetTypeDefinition) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{4}
}

func (x *GetTypeDefinition) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetTypeDefinition) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *GetTypeDefinition) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GetTypeDefinition) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetTypeDefinitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*LocationLink `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *GetTypeDefinitionResponse) Reset() {
	*x = GetTypeDefinitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTypeDefinitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTypeDefinitionResponse) ProtoMessage() {}

func (x *GetTypeDefinitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTypeDefinitionResponse.ProtoReflect.Descriptor instead.
func (*GetTypeDefinitionResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{5}
}

func (x *GetTypeDefinitionResponse) GetLinks() []*LocationLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type GetImplementation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor             `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,4,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetImplementation) Reset() {
	*x = GetImplementation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImplementation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImplementation) ProtoMessage() {}

func (x *GetImplementation) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImplementation.ProtoReflect.Descriptor instead.
func (*GetImplementation) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{6}
}

func (x *GetImplementation) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetImplementation) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *GetImplementation) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GetImplementation) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetImplementationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*LocationLink `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *GetImplementationResponse) Reset() {
	*x = GetImplementationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImplementationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImplementationResponse) ProtoMessage() {}

func (x *GetImplementationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImplementationResponse.ProtoReflect.Descriptor instead.
func (*GetImplementationResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{7}
}

func (x *GetImplementationResponse) GetLinks() []*LocationLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type GetReferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor             `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,4,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetReferences) Reset() {
	*x = GetReferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferences) ProtoMessage() {}

func (x *GetReferences) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferences.ProtoReflect.Descriptor instead.
func (*GetReferences) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{8}
}

func (x *GetReferences) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetReferences) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *GetReferences) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GetReferences) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetReferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations []*Location `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *GetReferencesResponse) Reset() {
	*x = GetReferencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferencesResponse) ProtoMessage() {}

func (x *GetReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferencesResponse.ProtoReflect.Descriptor instead.
func (*GetReferencesResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{9}
}

func (x *GetReferencesResponse) GetLocations() []*Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

type GetDocumentHighlights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor             `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,4,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetDocumentHighlights) Reset() {
	*x = GetDocumentHighlights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentHighlights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentHighlights) ProtoMessage() {}

func (x *GetDocumentHighlights) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentHighlights.ProtoReflect.Descriptor instead.
func (*GetDocumentHighlights) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{10}
}

func (x *GetDocumentHighlights) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetDocumentHighlights) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *GetDocumentHighlights) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GetDocumentHighlights) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetDocumentHighlightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Highlights []*DocumentHighlight `protobuf:"bytes,1,rep,name=highlights,proto3" json:"highlights,omitempty"`
}

func (x *GetDocumentHighlightsResponse) Reset() {
	*x = GetDocumentHighlightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentHighlightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentHighlightsResponse) ProtoMessage() {}

func (x *GetDocumentHighlightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentHighlightsResponse.ProtoReflect.Descriptor instead.
func (*GetDocumentHighlightsResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{11}
}

func (x *GetDocumentHighlightsResponse) GetHighlights() []*DocumentHighlight {
	if x != nil {
		return x.Highlights
	}
	return nil
}

type LocationLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *Location `protobuf:"bytes,1,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
	Target *Location `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *LocationLink) Reset() {
	*x = LocationLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationLink) ProtoMessage() {}

func (x *LocationLink) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationLink.ProtoReflect.Descriptor instead.
func (*LocationLink) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{12}
}

func (x *LocationLink) GetOrigin() *Location {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *LocationLink) GetTarget() *Location {
	if x != nil {
		return x.Target
	}
	return nil
}

type DocumentHighlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind  DocumentHighlight_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=zed.messages.DocumentHighlight_Kind" json:"kind,omitempty"`
	Start *Anchor                `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End   *Anchor                `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *DocumentHighlight) Reset() {
	*x = DocumentHighlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentHighlight) ProtoMessage() {}

func (x *DocumentHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentHighlight.ProtoReflect.Descriptor instead.
func (*DocumentHighlight) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{13}
}

func (x *DocumentHighlight) GetKind() DocumentHighlight_Kind {
	if x != nil {
		return x.Kind
	}
	return DocumentHighlight_Text
}

func (x *DocumentHighlight) GetStart() *Anchor {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *DocumentHighlight) GetEnd() *Anchor {
	if x != nil {
		return x.End
	}
	return nil
}

type GetProjectSymbols struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Query     string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetProjectSymbols) Reset() {
	*x = GetProjectSymbols{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectSymbols) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectSymbols) ProtoMessage() {}

func (x *GetProjectSymbols) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectSymbols.ProtoReflect.Descriptor instead.
func (*GetProjectSymbols) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{14}
}

func (x *GetProjectSymbols) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetProjectSymbols) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type GetProjectSymbolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbols []*Symbol `protobuf:"bytes,4,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *GetProjectSymbolsResponse) Reset() {
	*x = GetProjectSymbolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectSymbolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectSymbolsResponse) ProtoMessage() {}

func (x *GetProjectSymbolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectSymbolsResponse.ProtoReflect.Descriptor instead.
func (*GetProjectSymbolsResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{15}
}

func (x *GetProjectSymbolsResponse) GetSymbols() []*Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceWorktreeId   uint64 `protobuf:"varint,1,opt,name=source_worktree_id,json=sourceWorktreeId,proto3" json:"source_worktree_id,omitempty"`
	WorktreeId         uint64 `protobuf:"varint,2,opt,name=worktree_id,json=worktreeId,proto3" json:"worktree_id,omitempty"`
	LanguageServerName string `protobuf:"bytes,3,opt,name=language_server_name,json=languageServerName,proto3" json:"language_server_name,omitempty"`
	Name               string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Kind               int32  `protobuf:"varint,5,opt,name=kind,proto3" json:"kind,omitempty"`
	Path               string `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	// Cannot use generate anchors for unopened files,
	// so we are forced to use point coords instead
	Start            *PointUtf16 `protobuf:"bytes,7,opt,name=start,proto3" json:"start,omitempty"`
	End              *PointUtf16 `protobuf:"bytes,8,opt,name=end,proto3" json:"end,omitempty"`
	Signature        []byte      `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
	LanguageServerId uint64      `protobuf:"varint,10,opt,name=language_server_id,json=languageServerId,proto3" json:"language_server_id,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{16}
}

func (x *Symbol) GetSourceWorktreeId() uint64 {
	if x != nil {
		return x.SourceWorktreeId
	}
	return 0
}

func (x *Symbol) GetWorktreeId() uint64 {
	if x != nil {
		return x.WorktreeId
	}
	return 0
}

func (x *Symbol) GetLanguageServerName() string {
	if x != nil {
		return x.LanguageServerName
	}
	return ""
}

func (x *Symbol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Symbol) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *Symbol) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Symbol) GetStart() *PointUtf16 {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Symbol) GetEnd() *PointUtf16 {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Symbol) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Symbol) GetLanguageServerId() uint64 {
	if x != nil {
		return x.LanguageServerId
	}
	return 0
}

type GetDocumentSymbols struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,3,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetDocumentSymbols) Reset() {
	*x = GetDocumentSymbols{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentSymbols) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentSymbols) ProtoMessage() {}

func (x *GetDocumentSymbols) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentSymbols.ProtoReflect.Descriptor instead.
func (*GetDocumentSymbols) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{17}
}

func (x *GetDocumentSymbols) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetDocumentSymbols) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *GetDocumentSymbols) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetDocumentSymbolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbols []*DocumentSymbol `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *GetDocumentSymbolsResponse) Reset() {
	*x = GetDocumentSymbolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentSymbolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentSymbolsResponse) ProtoMessage() {}

func (x *GetDocumentSymbolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentSymbolsResponse.ProtoReflect.Descriptor instead.
func (*GetDocumentSymbolsResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{18}
}

func (x *GetDocumentSymbolsResponse) GetSymbols() []*DocumentSymbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type DocumentSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind int32  `protobuf:"varint,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Cannot use generate anchors for unopened files,
	// so we are forced to use point coords instead
	Start          *PointUtf16       `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	End            *PointUtf16       `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	SelectionStart *PointUtf16       `protobuf:"bytes,5,opt,name=selection_start,json=selectionStart,proto3" json:"selection_start,omitempty"`
	SelectionEnd   *PointUtf16       `protobuf:"bytes,6,opt,name=selection_end,json=selectionEnd,proto3" json:"selection_end,omitempty"`
	Children       []*DocumentSymbol `protobuf:"bytes,7,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *DocumentSymbol) Reset() {
	*x = DocumentSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSymbol) ProtoMessage() {}

func (x *DocumentSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSymbol.ProtoReflect.Descriptor instead.
func (*DocumentSymbol) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{19}
}

func (x *DocumentSymbol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocumentSymbol) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *DocumentSymbol) GetStart() *PointUtf16 {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *DocumentSymbol) GetEnd() *PointUtf16 {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *DocumentSymbol) GetSelectionStart() *PointUtf16 {
	if x != nil {
		return x.SelectionStart
	}
	return nil
}

func (x *DocumentSymbol) GetSelectionEnd() *PointUtf16 {
	if x != nil {
		return x.SelectionEnd
	}
	return nil
}

func (x *DocumentSymbol) GetChildren() []*DocumentSymbol {
	if x != nil {
		return x.Children
	}
	return nil
}

type InlayHints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Start     *Anchor             `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	End       *Anchor             `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,5,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *InlayHints) Reset() {
	*x = InlayHints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlayHints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlayHints) ProtoMessage() {}

func (x *InlayHints) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlayHints.ProtoReflect.Descriptor instead.
func (*InlayHints) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{20}
}

func (x *InlayHints) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *InlayHints) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *InlayHints) GetStart() *Anchor {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *InlayHints) GetEnd() *Anchor {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *InlayHints) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type InlayHintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hints   []*InlayHint        `protobuf:"bytes,1,rep,name=hints,proto3" json:"hints,omitempty"`
	Version []*VectorClockEntry `protobuf:"bytes,2,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *InlayHintsResponse) Reset() {
	*x = InlayHintsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlayHintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlayHintsResponse) ProtoMessage() {}

func (x *InlayHintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlayHintsResponse.ProtoReflect.Descriptor instead.
func (*InlayHintsResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{21}
}

func (x *InlayHintsResponse) GetHints() []*InlayHint {
	if x != nil {
		return x.Hints
	}
	return nil
}

func (x *InlayHintsResponse) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type PointUtf16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row    uint32 `protobuf:"varint,1,opt,name=row,proto3" json:"row,omitempty"`
	Column uint32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *PointUtf16) Reset() {
	*x = PointUtf16{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointUtf16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointUtf16) ProtoMessage() {}

func (x *PointUtf16) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointUtf16.ProtoReflect.Descriptor instead.
func (*PointUtf16) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{22}
}

func (x *PointUtf16) GetRow() uint32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *PointUtf16) GetColumn() uint32 {
	if x != nil {
		return x.Column
	}
	return 0
}

type LspExtExpandMacro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64  `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *LspExtExpandMacro) Reset() {
	*x = LspExtExpandMacro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspExtExpandMacro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspExtExpandMacro) ProtoMessage() {}

func (x *LspExtExpandMacro) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspExtExpandMacro.ProtoReflect.Descriptor instead.
func (*LspExtExpandMacro) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{23}
}

func (x *LspExtExpandMacro) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LspExtExpandMacro) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *LspExtExpandMacro) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

type LspExtExpandMacroResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expansion string `protobuf:"bytes,2,opt,name=expansion,proto3" json:"expansion,omitempty"`
}

func (x *LspExtExpandMacroResponse) Reset() {
	*x = LspExtExpandMacroResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspExtExpandMacroResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspExtExpandMacroResponse) ProtoMessage() {}

func (x *LspExtExpandMacroResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspExtExpandMacroResponse.ProtoReflect.Descriptor instead.
func (*LspExtExpandMacroResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{24}
}

func (x *LspExtExpandMacroResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LspExtExpandMacroResponse) GetExpansion() string {
	if x != nil {
		return x.Expansion
	}
	return ""
}

type LspExtOpenDocs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64  `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *LspExtOpenDocs) Reset() {
	*x = LspExtOpenDocs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspExtOpenDocs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspExtOpenDocs) ProtoMessage() {}

func (x *LspExtOpenDocs) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspExtOpenDocs.ProtoReflect.Descriptor instead.
func (*LspExtOpenDocs) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{25}
}

func (x *LspExtOpenDocs) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LspExtOpenDocs) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *LspExtOpenDocs) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

type LspExtOpenDocsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Web   *string `protobuf:"bytes,1,opt,name=web,proto3,oneof" json:"web,omitempty"`
	Local *string `protobuf:"bytes,2,opt,name=local,proto3,oneof" json:"local,omitempty"`
}

func (x *LspExtOpenDocsResponse) Reset() {
	*x = LspExtOpenDocsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspExtOpenDocsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspExtOpenDocsResponse) ProtoMessage() {}

func (x *LspExtOpenDocsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspExtOpenDocsResponse.ProtoReflect.Descriptor instead.
func (*LspExtOpenDocsResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{26}
}

func (x *LspExtOpenDocsResponse) GetWeb() string {
	if x != nil && x.Web != nil {
		return *x.Web
	}
	return ""
}

func (x *LspExtOpenDocsResponse) GetLocal() string {
	if x != nil && x.Local != nil {
		return *x.Local
	}
	return ""
}

type LspExtSwitchSourceHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64 `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
}

func (x *LspExtSwitchSourceHeader) Reset() {
	*x = LspExtSwitchSourceHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspExtSwitchSourceHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspExtSwitchSourceHeader) ProtoMessage() {}

func (x *LspExtSwitchSourceHeader) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspExtSwitchSourceHeader.ProtoReflect.Descriptor instead.
func (*LspExtSwitchSourceHeader) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{27}
}

func (x *LspExtSwitchSourceHeader) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LspExtSwitchSourceHeader) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

type LspExtSwitchSourceHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetFile string `protobuf:"bytes,1,opt,name=target_file,json=targetFile,proto3" json:"target_file,omitempty"`
}

func (x *LspExtSwitchSourceHeaderResponse) Reset() {
	*x = LspExtSwitchSourceHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspExtSwitchSourceHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspExtSwitchSourceHeaderResponse) ProtoMessage() {}

func (x *LspExtSwitchSourceHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspExtSwitchSourceHeaderResponse.ProtoReflect.Descriptor instead.
func (*LspExtSwitchSourceHeaderResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{28}
}

func (x *LspExtSwitchSourceHeaderResponse) GetTargetFile() string {
	if x != nil {
		return x.TargetFile
	}
	return ""
}

type LspExtGoToParentModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64  `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *LspExtGoToParentModule) Reset() {
	*x = LspExtGoToParentModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspExtGoToParentModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspExtGoToParentModule) ProtoMessage() {}

func (x *LspExtGoToParentModule) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspExtGoToParentModule.ProtoReflect.Descriptor instead.
func (*LspExtGoToParentModule) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{29}
}

func (x *LspExtGoToParentModule) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LspExtGoToParentModule) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *LspExtGoToParentModule) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

type LspExtGoToParentModuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*LocationLink `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *LspExtGoToParentModuleResponse) Reset() {
	*x = LspExtGoToParentModuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspExtGoToParentModuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspExtGoToParentModuleResponse) ProtoMessage() {}

func (x *LspExtGoToParentModuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspExtGoToParentModuleResponse.ProtoReflect.Descriptor instead.
func (*LspExtGoToParentModuleResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{30}
}

func (x *LspExtGoToParentModuleResponse) GetLinks() []*LocationLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type GetCompletionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Completions []*Completion       `protobuf:"bytes,1,rep,name=completions,proto3" json:"completions,omitempty"`
	Version     []*VectorClockEntry `protobuf:"bytes,2,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetCompletionsResponse) Reset() {
	*x = GetCompletionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompletionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompletionsResponse) ProtoMessage() {}

func (x *GetCompletionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompletionsResponse.ProtoReflect.Descriptor instead.
func (*GetCompletionsResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{31}
}

func (x *GetCompletionsResponse) GetCompletions() []*Completion {
	if x != nil {
		return x.Completions
	}
	return nil
}

func (x *GetCompletionsResponse) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type ApplyCompletionAdditionalEdits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  uint64      `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId   uint64      `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Completion *Completion `protobuf:"bytes,3,opt,name=completion,proto3" json:"completion,omitempty"`
}

func (x *ApplyCompletionAdditionalEdits) Reset() {
	*x = ApplyCompletionAdditionalEdits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyCompletionAdditionalEdits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyCompletionAdditionalEdits) ProtoMessage() {}

func (x *ApplyCompletionAdditionalEdits) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyCompletionAdditionalEdits.ProtoReflect.Descriptor instead.
func (*ApplyCompletionAdditionalEdits) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{32}
}

func (x *ApplyCompletionAdditionalEdits) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ApplyCompletionAdditionalEdits) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *ApplyCompletionAdditionalEdits) GetCompletion() *Completion {
	if x != nil {
		return x.Completion
	}
	return nil
}

type ApplyCompletionAdditionalEditsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *ApplyCompletionAdditionalEditsResponse) Reset() {
	*x = ApplyCompletionAdditionalEditsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyCompletionAdditionalEditsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyCompletionAdditionalEditsResponse) ProtoMessage() {}

func (x *ApplyCompletionAdditionalEditsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyCompletionAdditionalEditsResponse.ProtoReflect.Descriptor instead.
func (*ApplyCompletionAdditionalEditsResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{33}
}

func (x *ApplyCompletionAdditionalEditsResponse) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type Completion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldReplaceStart *Anchor           `protobuf:"bytes,1,opt,name=old_replace_start,json=oldReplaceStart,proto3" json:"old_replace_start,omitempty"`
	OldReplaceEnd   *Anchor           `protobuf:"bytes,2,opt,name=old_replace_end,json=oldReplaceEnd,proto3" json:"old_replace_end,omitempty"`
	NewText         string            `protobuf:"bytes,3,opt,name=new_text,json=newText,proto3" json:"new_text,omitempty"`
	ServerId        uint64            `protobuf:"varint,4,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	LspCompletion   []byte            `protobuf:"bytes,5,opt,name=lsp_completion,json=lspCompletion,proto3" json:"lsp_completion,omitempty"`
	Resolved        bool              `protobuf:"varint,6,opt,name=resolved,proto3" json:"resolved,omitempty"`
	Source          Completion_Source `protobuf:"varint,7,opt,name=source,proto3,enum=zed.messages.Completion_Source" json:"source,omitempty"`
	LspDefaults     []byte            `protobuf:"bytes,8,opt,name=lsp_defaults,json=lspDefaults,proto3,oneof" json:"lsp_defaults,omitempty"`
	BufferWordStart *Anchor           `protobuf:"bytes,9,opt,name=buffer_word_start,json=bufferWordStart,proto3,oneof" json:"buffer_word_start,omitempty"`
	BufferWordEnd   *Anchor           `protobuf:"bytes,10,opt,name=buffer_word_end,json=bufferWordEnd,proto3,oneof" json:"buffer_word_end,omitempty"`
	OldInsertStart  *Anchor           `protobuf:"bytes,11,opt,name=old_insert_start,json=oldInsertStart,proto3" json:"old_insert_start,omitempty"`
	OldInsertEnd    *Anchor           `protobuf:"bytes,12,opt,name=old_insert_end,json=oldInsertEnd,proto3" json:"old_insert_end,omitempty"`
}

func (x *Completion) Reset() {
	*x = Completion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Completion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Completion) ProtoMessage() {}

func (x *Completion) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Completion.ProtoReflect.Descriptor instead.
func (*Completion) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{34}
}

func (x *Completion) GetOldReplaceStart() *Anchor {
	if x != nil {
		return x.OldReplaceStart
	}
	return nil
}

func (x *Completion) GetOldReplaceEnd() *Anchor {
	if x != nil {
		return x.OldReplaceEnd
	}
	return nil
}

func (x *Completion) GetNewText() string {
	if x != nil {
		return x.NewText
	}
	return ""
}

func (x *Completion) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *Completion) GetLspCompletion() []byte {
	if x != nil {
		return x.LspCompletion
	}
	return nil
}

func (x *Completion) GetResolved() bool {
	if x != nil {
		return x.Resolved
	}
	return false
}

func (x *Completion) GetSource() Completion_Source {
	if x != nil {
		return x.Source
	}
	return Completion_Lsp
}

func (x *Completion) GetLspDefaults() []byte {
	if x != nil {
		return x.LspDefaults
	}
	return nil
}

func (x *Completion) GetBufferWordStart() *Anchor {
	if x != nil {
		return x.BufferWordStart
	}
	return nil
}

func (x *Completion) GetBufferWordEnd() *Anchor {
	if x != nil {
		return x.BufferWordEnd
	}
	return nil
}

func (x *Completion) GetOldInsertStart() *Anchor {
	if x != nil {
		return x.OldInsertStart
	}
	return nil
}

func (x *Completion) GetOldInsertEnd() *Anchor {
	if x != nil {
		return x.OldInsertEnd
	}
	return nil
}

type GetCodeActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Start     *Anchor             `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	End       *Anchor             `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,5,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetCodeActions) Reset() {
	*x = GetCodeActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeActions) ProtoMessage() {}

func (x *GetCodeActions) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeActions.ProtoReflect.Descriptor instead.
func (*GetCodeActions) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{35}
}

func (x *GetCodeActions) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetCodeActions) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *GetCodeActions) GetStart() *Anchor {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetCodeActions) GetEnd() *Anchor {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *GetCodeActions) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetCodeActionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*CodeAction       `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	Version []*VectorClockEntry `protobuf:"bytes,2,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetCodeActionsResponse) Reset() {
	*x = GetCodeActionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeActionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeActionsResponse) ProtoMessage() {}

func (x *GetCodeActionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeActionsResponse.ProtoReflect.Descriptor instead.
func (*GetCodeActionsResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{36}
}

func (x *GetCodeActionsResponse) GetActions() []*CodeAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *GetCodeActionsResponse) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetSignatureHelp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor             `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,4,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetSignatureHelp) Reset() {
	*x = GetSignatureHelp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignatureHelp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignatureHelp) ProtoMessage() {}

func (x *GetSignatureHelp) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignatureHelp.ProtoReflect.Descriptor instead.
func (*GetSignatureHelp) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{37}
}

func (x *GetSignatureHelp) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetSignatureHelp) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *GetSignatureHelp) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GetSignatureHelp) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetSignatureHelpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignatureHelp *SignatureHelp `protobuf:"bytes,1,opt,name=signature_help,json=signatureHelp,proto3,oneof" json:"signature_help,omitempty"`
}

func (x *GetSignatureHelpResponse) Reset() {
	*x = GetSignatureHelpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignatureHelpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignatureHelpResponse) ProtoMessage() {}

func (x *GetSignatureHelpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignatureHelpResponse.ProtoReflect.Descriptor instead.
func (*GetSignatureHelpResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{38}
}

func (x *GetSignatureHelpResponse) GetSignatureHelp() *SignatureHelp {
	if x != nil {
		return x.SignatureHelp
	}
	return nil
}

type SignatureHelp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures      []*SignatureInformation `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	ActiveSignature *uint32                 `protobuf:"varint,2,opt,name=active_signature,json=activeSignature,proto3,oneof" json:"active_signature,omitempty"`
	ActiveParameter *uint32                 `protobuf:"varint,3,opt,name=active_parameter,json=activeParameter,proto3,oneof" json:"active_parameter,omitempty"`
}

func (x *SignatureHelp) Reset() {
	*x = SignatureHelp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureHelp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureHelp) ProtoMessage() {}

func (x *SignatureHelp) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureHelp.ProtoReflect.Descriptor instead.
func (*SignatureHelp) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{39}
}

func (x *SignatureHelp) GetSignatures() []*SignatureInformation {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *SignatureHelp) GetActiveSignature() uint32 {
	if x != nil && x.ActiveSignature != nil {
		return *x.ActiveSignature
	}
	return 0
}

func (x *SignatureHelp) GetActiveParameter() uint32 {
	if x != nil && x.ActiveParameter != nil {
		return *x.ActiveParameter
	}
	return 0
}

type SignatureInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label           string                  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Documentation   *Documentation          `protobuf:"bytes,2,opt,name=documentation,proto3,oneof" json:"documentation,omitempty"`
	Parameters      []*ParameterInformation `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty"`
	ActiveParameter *uint32                 `protobuf:"varint,4,opt,name=active_parameter,json=activeParameter,proto3,oneof" json:"active_parameter,omitempty"`
}

func (x *SignatureInformation) Reset() {
	*x = SignatureInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureInformation) ProtoMessage() {}

func (x *SignatureInformation) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureInformation.ProtoReflect.Descriptor instead.
func (*SignatureInformation) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{40}
}

func (x *SignatureInformation) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SignatureInformation) GetDocumentation() *Documentation {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *SignatureInformation) GetParameters() []*ParameterInformation {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *SignatureInformation) GetActiveParameter() uint32 {
	if x != nil && x.ActiveParameter != nil {
		return *x.ActiveParameter
	}
	return 0
}

type Documentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*Documentation_Value
	//	*Documentation_MarkupContent
	Content isDocumentation_Content `protobuf_oneof:"content"`
}

func (x *Documentation) Reset() {
	*x = Documentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Documentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Documentation) ProtoMessage() {}

func (x *Documentation) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Documentation.ProtoReflect.Descriptor instead.
func (*Documentation) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{41}
}

func (m *Documentation) GetContent() isDocumentation_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Documentation) GetValue() string {
	if x, ok := x.GetContent().(*Documentation_Value); ok {
		return x.Value
	}
	return ""
}

func (x *Documentation) GetMarkupContent() *MarkupContent {
	if x, ok := x.GetContent().(*Documentation_MarkupContent); ok {
		return x.MarkupContent
	}
	return nil
}

type isDocumentation_Content interface {
	isDocumentation_Content()
}

type Documentation_Value struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type Documentation_MarkupContent struct {
	MarkupContent *MarkupContent `protobuf:"bytes,2,opt,name=markup_content,json=markupContent,proto3,oneof"`
}

func (*Documentation_Value) isDocumentation_Content() {}

func (*Documentation_MarkupContent) isDocumentation_Content() {}

type ParameterInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Label:
	//
	//	*ParameterInformation_Simple
	//	*ParameterInformation_LabelOffsets
	Label         isParameterInformation_Label `protobuf_oneof:"label"`
	Documentation *Documentation               `protobuf:"bytes,3,opt,name=documentation,proto3,oneof" json:"documentation,omitempty"`
}

func (x *ParameterInformation) Reset() {
	*x = ParameterInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterInformation) ProtoMessage() {}

func (x *ParameterInformation) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterInformation.ProtoReflect.Descriptor instead.
func (*ParameterInformation) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{42}
}

func (m *ParameterInformation) GetLabel() isParameterInformation_Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (x *ParameterInformation) GetSimple() string {
	if x, ok := x.GetLabel().(*ParameterInformation_Simple); ok {
		return x.Simple
	}
	return ""
}

func (x *ParameterInformation) GetLabelOffsets() *LabelOffsets {
	if x, ok := x.GetLabel().(*ParameterInformation_LabelOffsets); ok {
		return x.LabelOffsets
	}
	return nil
}

func (x *ParameterInformation) GetDocumentation() *Documentation {
	if x != nil {
		return x.Documentation
	}
	return nil
}

type isParameterInformation_Label interface {
	isParameterInformation_Label()
}

type ParameterInformation_Simple struct {
	Simple string `protobuf:"bytes,1,opt,name=simple,proto3,oneof"`
}

type ParameterInformation_LabelOffsets struct {
	LabelOffsets *LabelOffsets `protobuf:"bytes,2,opt,name=label_offsets,json=labelOffsets,proto3,oneof"`
}

func (*ParameterInformation_Simple) isParameterInformation_Label() {}

func (*ParameterInformation_LabelOffsets) isParameterInformation_Label() {}

type LabelOffsets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   uint32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *LabelOffsets) Reset() {
	*x = LabelOffsets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelOffsets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelOffsets) ProtoMessage() {}

func (x *LabelOffsets) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelOffsets.ProtoReflect.Descriptor instead.
func (*LabelOffsets) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{43}
}

func (x *LabelOffsets) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *LabelOffsets) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type GetHover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor             `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,5,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetHover) Reset() {
	*x = GetHover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHover) ProtoMessage() {}

func (x *GetHover) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHover.ProtoReflect.Descriptor instead.
func (*GetHover) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{44}
}

func (x *GetHover) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetHover) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *GetHover) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GetHover) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetHoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start    *Anchor       `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	End      *Anchor       `protobuf:"bytes,2,opt,name=end,proto3,oneof" json:"end,omitempty"`
	Contents []*HoverBlock `protobuf:"bytes,3,rep,name=contents,proto3" json:"contents,omitempty"`
}

func (x *GetHoverResponse) Reset() {
	*x = GetHoverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHoverResponse) ProtoMessage() {}

func (x *GetHoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHoverResponse.ProtoReflect.Descriptor instead.
func (*GetHoverResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{45}
}

func (x *GetHoverResponse) GetStart() *Anchor {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetHoverResponse) GetEnd() *Anchor {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *GetHoverResponse) GetContents() []*HoverBlock {
	if x != nil {
		return x.Contents
	}
	return nil
}

type HoverBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Language   *string `protobuf:"bytes,2,opt,name=language,proto3,oneof" json:"language,omitempty"`
	IsMarkdown bool    `protobuf:"varint,3,opt,name=is_markdown,json=isMarkdown,proto3" json:"is_markdown,omitempty"`
}

func (x *HoverBlock) Reset() {
	*x = HoverBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoverBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoverBlock) ProtoMessage() {}

func (x *HoverBlock) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoverBlock.ProtoReflect.Descriptor instead.
func (*HoverBlock) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{46}
}

func (x *HoverBlock) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *HoverBlock) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *HoverBlock) GetIsMarkdown() bool {
	if x != nil {
		return x.IsMarkdown
	}
	return false
}

type ApplyCodeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64      `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64      `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Action    *CodeAction `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *ApplyCodeAction) Reset() {
	*x = ApplyCodeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyCodeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyCodeAction) ProtoMessage() {}

func (x *ApplyCodeAction) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyCodeAction.ProtoReflect.Descriptor instead.
func (*ApplyCodeAction) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{47}
}

func (x *ApplyCodeAction) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ApplyCodeAction) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *ApplyCodeAction) GetAction() *CodeAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type ApplyCodeActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *ProjectTransaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *ApplyCodeActionResponse) Reset() {
	*x = ApplyCodeActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyCodeActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyCodeActionResponse) ProtoMessage() {}

func (x *ApplyCodeActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyCodeActionResponse.ProtoReflect.Descriptor instead.
func (*ApplyCodeActionResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{48}
}

func (x *ApplyCodeActionResponse) GetTransaction() *ProjectTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type PrepareRename struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor             `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,4,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *PrepareRename) Reset() {
	*x = PrepareRename{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareRename) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRename) ProtoMessage() {}

func (x *PrepareRename) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRename.ProtoReflect.Descriptor instead.
func (*PrepareRename) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{49}
}

func (x *PrepareRename) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PrepareRename) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *PrepareRename) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PrepareRename) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type PrepareRenameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanRename                     bool                `protobuf:"varint,1,opt,name=can_rename,json=canRename,proto3" json:"can_rename,omitempty"`
	Start                         *Anchor             `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End                           *Anchor             `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	Version                       []*VectorClockEntry `protobuf:"bytes,4,rep,name=version,proto3" json:"version,omitempty"`
	OnlyUnpreparedRenameSupported bool                `protobuf:"varint,5,opt,name=only_unprepared_rename_supported,json=onlyUnpreparedRenameSupported,proto3" json:"only_unprepared_rename_supported,omitempty"`
}

func (x *PrepareRenameResponse) Reset() {
	*x = PrepareRenameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareRenameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRenameResponse) ProtoMessage() {}

func (x *PrepareRenameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRenameResponse.ProtoReflect.Descriptor instead.
func (*PrepareRenameResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{50}
}

func (x *PrepareRenameResponse) GetCanRename() bool {
	if x != nil {
		return x.CanRename
	}
	return false
}

func (x *PrepareRenameResponse) GetStart() *Anchor {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *PrepareRenameResponse) GetEnd() *Anchor {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *PrepareRenameResponse) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *PrepareRenameResponse) GetOnlyUnpreparedRenameSupported() bool {
	if x != nil {
		return x.OnlyUnpreparedRenameSupported
	}
	return false
}

type PerformRename struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor             `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	NewName   string              `protobuf:"bytes,4,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,5,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *PerformRename) Reset() {
	*x = PerformRename{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformRename) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformRename) ProtoMessage() {}

func (x *PerformRename) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformRename.ProtoReflect.Descriptor instead.
func (*PerformRename) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{51}
}

func (x *PerformRename) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PerformRename) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *PerformRename) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PerformRename) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *PerformRename) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type OnTypeFormatting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor             `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Trigger   string              `protobuf:"bytes,4,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,5,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *OnTypeFormatting) Reset() {
	*x = OnTypeFormatting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnTypeFormatting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnTypeFormatting) ProtoMessage() {}

func (x *OnTypeFormatting) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnTypeFormatting.ProtoReflect.Descriptor instead.
func (*OnTypeFormatting) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{52}
}

func (x *OnTypeFormatting) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *OnTypeFormatting) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *OnTypeFormatting) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *OnTypeFormatting) GetTrigger() string {
	if x != nil {
		return x.Trigger
	}
	return ""
}

func (x *OnTypeFormatting) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type OnTypeFormattingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *OnTypeFormattingResponse) Reset() {
	*x = OnTypeFormattingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnTypeFormattingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnTypeFormattingResponse) ProtoMessage() {}

func (x *OnTypeFormattingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnTypeFormattingResponse.ProtoReflect.Descriptor instead.
func (*OnTypeFormattingResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{53}
}

func (x *OnTypeFormattingResponse) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type LinkedEditingRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor             `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,4,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *LinkedEditingRange) Reset() {
	*x = LinkedEditingRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedEditingRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedEditingRange) ProtoMessage() {}

func (x *LinkedEditingRange) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedEditingRange.ProtoReflect.Descriptor instead.
func (*LinkedEditingRange) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{54}
}

func (x *LinkedEditingRange) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LinkedEditingRange) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *LinkedEditingRange) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *LinkedEditingRange) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type LinkedEditingRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items   []*AnchorRange      `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Version []*VectorClockEntry `protobuf:"bytes,4,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *LinkedEditingRangeResponse) Reset() {
	*x = LinkedEditingRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedEditingRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedEditingRangeResponse) ProtoMessage() {}

func (x *LinkedEditingRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedEditingRangeResponse.ProtoReflect.Descriptor instead.
func (*LinkedEditingRangeResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{55}
}

func (x *LinkedEditingRangeResponse) GetItems() []*AnchorRange {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *LinkedEditingRangeResponse) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type InlayHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position     *Anchor           `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Label        *InlayHintLabel   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Kind         *string           `protobuf:"bytes,3,opt,name=kind,proto3,oneof" json:"kind,omitempty"`
	PaddingLeft  bool              `protobuf:"varint,4,opt,name=padding_left,json=paddingLeft,proto3" json:"padding_left,omitempty"`
	PaddingRight bool              `protobuf:"varint,5,opt,name=padding_right,json=paddingRight,proto3" json:"padding_right,omitempty"`
	Tooltip      *InlayHintTooltip `protobuf:"bytes,6,opt,name=tooltip,proto3" json:"tooltip,omitempty"`
	ResolveState *ResolveState     `protobuf:"bytes,7,opt,name=resolve_state,json=resolveState,proto3" json:"resolve_state,omitempty"`
}

func (x *InlayHint) Reset() {
	*x = InlayHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlayHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlayHint) ProtoMessage() {}

func (x *InlayHint) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlayHint.ProtoReflect.Descriptor instead.
func (*InlayHint) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{56}
}

func (x *InlayHint) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *InlayHint) GetLabel() *InlayHintLabel {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *InlayHint) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *InlayHint) GetPaddingLeft() bool {
	if x != nil {
		return x.PaddingLeft
	}
	return false
}

func (x *InlayHint) GetPaddingRight() bool {
	if x != nil {
		return x.PaddingRight
	}
	return false
}

func (x *InlayHint) GetTooltip() *InlayHintTooltip {
	if x != nil {
		return x.Tooltip
	}
	return nil
}

func (x *InlayHint) GetResolveState() *ResolveState {
	if x != nil {
		return x.ResolveState
	}
	return nil
}

type InlayHintLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Label:
	//
	//	*InlayHintLabel_Value
	//	*InlayHintLabel_LabelParts
	Label isInlayHintLabel_Label `protobuf_oneof:"label"`
}

func (x *InlayHintLabel) Reset() {
	*x = InlayHintLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlayHintLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlayHintLabel) ProtoMessage() {}

func (x *InlayHintLabel) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlayHintLabel.ProtoReflect.Descriptor instead.
func (*InlayHintLabel) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{57}
}

func (m *InlayHintLabel) GetLabel() isInlayHintLabel_Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (x *InlayHintLabel) GetValue() string {
	if x, ok := x.GetLabel().(*InlayHintLabel_Value); ok {
		return x.Value
	}
	return ""
}

func (x *InlayHintLabel) GetLabelParts() *InlayHintLabelParts {
	if x, ok := x.GetLabel().(*InlayHintLabel_LabelParts); ok {
		return x.LabelParts
	}
	return nil
}

type isInlayHintLabel_Label interface {
	isInlayHintLabel_Label()
}

type InlayHintLabel_Value struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type InlayHintLabel_LabelParts struct {
	LabelParts *InlayHintLabelParts `protobuf:"bytes,2,opt,name=label_parts,json=labelParts,proto3,oneof"`
}

func (*InlayHintLabel_Value) isInlayHintLabel_Label() {}

func (*InlayHintLabel_LabelParts) isInlayHintLabel_Label() {}

type InlayHintLabelParts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parts []*InlayHintLabelPart `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *InlayHintLabelParts) Reset() {
	*x = InlayHintLabelParts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlayHintLabelParts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlayHintLabelParts) ProtoMessage() {}

func (x *InlayHintLabelParts) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlayHintLabelParts.ProtoReflect.Descriptor instead.
func (*InlayHintLabelParts) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{58}
}

func (x *InlayHintLabelParts) GetParts() []*InlayHintLabelPart {
	if x != nil {
		return x.Parts
	}
	return nil
}

type InlayHintLabelPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value              string                     `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Tooltip            *InlayHintLabelPartTooltip `protobuf:"bytes,2,opt,name=tooltip,proto3" json:"tooltip,omitempty"`
	LocationUrl        *string                    `protobuf:"bytes,3,opt,name=location_url,json=locationUrl,proto3,oneof" json:"location_url,omitempty"`
	LocationRangeStart *PointUtf16                `protobuf:"bytes,4,opt,name=location_range_start,json=locationRangeStart,proto3" json:"location_range_start,omitempty"`
	LocationRangeEnd   *PointUtf16                `protobuf:"bytes,5,opt,name=location_range_end,json=locationRangeEnd,proto3" json:"location_range_end,omitempty"`
	LanguageServerId   *uint64                    `protobuf:"varint,6,opt,name=language_server_id,json=languageServerId,proto3,oneof" json:"language_server_id,omitempty"`
}

func (x *InlayHintLabelPart) Reset() {
	*x = InlayHintLabelPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlayHintLabelPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlayHintLabelPart) ProtoMessage() {}

func (x *InlayHintLabelPart) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlayHintLabelPart.ProtoReflect.Descriptor instead.
func (*InlayHintLabelPart) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{59}
}

func (x *InlayHintLabelPart) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *InlayHintLabelPart) GetTooltip() *InlayHintLabelPartTooltip {
	if x != nil {
		return x.Tooltip
	}
	return nil
}

func (x *InlayHintLabelPart) GetLocationUrl() string {
	if x != nil && x.LocationUrl != nil {
		return *x.LocationUrl
	}
	return ""
}

func (x *InlayHintLabelPart) GetLocationRangeStart() *PointUtf16 {
	if x != nil {
		return x.LocationRangeStart
	}
	return nil
}

func (x *InlayHintLabelPart) GetLocationRangeEnd() *PointUtf16 {
	if x != nil {
		return x.LocationRangeEnd
	}
	return nil
}

func (x *InlayHintLabelPart) GetLanguageServerId() uint64 {
	if x != nil && x.LanguageServerId != nil {
		return *x.LanguageServerId
	}
	return 0
}

type InlayHintTooltip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*InlayHintTooltip_Value
	//	*InlayHintTooltip_MarkupContent
	Content isInlayHintTooltip_Content `protobuf_oneof:"content"`
}

func (x *InlayHintTooltip) Reset() {
	*x = InlayHintTooltip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlayHintTooltip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlayHintTooltip) ProtoMessage() {}

func (x *InlayHintTooltip) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlayHintTooltip.ProtoReflect.Descriptor instead.
func (*InlayHintTooltip) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{60}
}

func (m *InlayHintTooltip) GetContent() isInlayHintTooltip_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *InlayHintTooltip) GetValue() string {
	if x, ok := x.GetContent().(*InlayHintTooltip_Value); ok {
		return x.Value
	}
	return ""
}

func (x *InlayHintTooltip) GetMarkupContent() *MarkupContent {
	if x, ok := x.GetContent().(*InlayHintTooltip_MarkupContent); ok {
		return x.MarkupContent
	}
	return nil
}

type isInlayHintTooltip_Content interface {
	isInlayHintTooltip_Content()
}

type InlayHintTooltip_Value struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type InlayHintTooltip_MarkupContent struct {
	MarkupContent *MarkupContent `protobuf:"bytes,2,opt,name=markup_content,json=markupContent,proto3,oneof"`
}

func (*InlayHintTooltip_Value) isInlayHintTooltip_Content() {}

func (*InlayHintTooltip_MarkupContent) isInlayHintTooltip_Content() {}

type InlayHintLabelPartTooltip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*InlayHintLabelPartTooltip_Value
	//	*InlayHintLabelPartTooltip_MarkupContent
	Content isInlayHintLabelPartTooltip_Content `protobuf_oneof:"content"`
}

func (x *InlayHintLabelPartTooltip) Reset() {
	*x = InlayHintLabelPartTooltip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlayHintLabelPartTooltip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlayHintLabelPartTooltip) ProtoMessage() {}

func (x *InlayHintLabelPartTooltip) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlayHintLabelPartTooltip.ProtoReflect.Descriptor instead.
func (*InlayHintLabelPartTooltip) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{61}
}

func (m *InlayHintLabelPartTooltip) GetContent() isInlayHintLabelPartTooltip_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *InlayHintLabelPartTooltip) GetValue() string {
	if x, ok := x.GetContent().(*InlayHintLabelPartTooltip_Value); ok {
		return x.Value
	}
	return ""
}

func (x *InlayHintLabelPartTooltip) GetMarkupContent() *MarkupContent {
	if x, ok := x.GetContent().(*InlayHintLabelPartTooltip_MarkupContent); ok {
		return x.MarkupContent
	}
	return nil
}

type isInlayHintLabelPartTooltip_Content interface {
	isInlayHintLabelPartTooltip_Content()
}

type InlayHintLabelPartTooltip_Value struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type InlayHintLabelPartTooltip_MarkupContent struct {
	MarkupContent *MarkupContent `protobuf:"bytes,2,opt,name=markup_content,json=markupContent,proto3,oneof"`
}

func (*InlayHintLabelPartTooltip_Value) isInlayHintLabelPartTooltip_Content() {}

func (*InlayHintLabelPartTooltip_MarkupContent) isInlayHintLabelPartTooltip_Content() {}

type ResolveState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State           ResolveState_State            `protobuf:"varint,1,opt,name=state,proto3,enum=zed.messages.ResolveState_State" json:"state,omitempty"`
	LspResolveState *ResolveState_LspResolveState `protobuf:"bytes,2,opt,name=lsp_resolve_state,json=lspResolveState,proto3" json:"lsp_resolve_state,omitempty"`
}

func (x *ResolveState) Reset() {
	*x = ResolveState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveState) ProtoMessage() {}

func (x *ResolveState) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveState.ProtoReflect.Descriptor instead.
func (*ResolveState) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{62}
}

func (x *ResolveState) GetState() ResolveState_State {
	if x != nil {
		return x.State
	}
	return ResolveState_Resolved
}

func (x *ResolveState) GetLspResolveState() *ResolveState_LspResolveState {
	if x != nil {
		return x.LspResolveState
	}
	return nil
}

// This type is used to resolve more than just
// the documentation, but for backwards-compatibility
// reasons we can't rename the type.
type ResolveCompletionDocumentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	LanguageServerId uint64 `protobuf:"varint,2,opt,name=language_server_id,json=languageServerId,proto3" json:"language_server_id,omitempty"`
	LspCompletion    []byte `protobuf:"bytes,3,opt,name=lsp_completion,json=lspCompletion,proto3" json:"lsp_completion,omitempty"`
	BufferId         uint64 `protobuf:"varint,4,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
}

func (x *ResolveCompletionDocumentation) Reset() {
	*x = ResolveCompletionDocumentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveCompletionDocumentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveCompletionDocumentation) ProtoMessage() {}

func (x *ResolveCompletionDocumentation) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveCompletionDocumentation.ProtoReflect.Descriptor instead.
func (*ResolveCompletionDocumentation) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{63}
}

func (x *ResolveCompletionDocumentation) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ResolveCompletionDocumentation) GetLanguageServerId() uint64 {
	if x != nil {
		return x.LanguageServerId
	}
	return 0
}

func (x *ResolveCompletionDocumentation) GetLspCompletion() []byte {
	if x != nil {
		return x.LspCompletion
	}
	return nil
}

func (x *ResolveCompletionDocumentation) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

type ResolveCompletionDocumentationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documentation           string  `protobuf:"bytes,1,opt,name=documentation,proto3" json:"documentation,omitempty"`
	DocumentationIsMarkdown bool    `protobuf:"varint,2,opt,name=documentation_is_markdown,json=documentationIsMarkdown,proto3" json:"documentation_is_markdown,omitempty"`
	OldReplaceStart         *Anchor `protobuf:"bytes,3,opt,name=old_replace_start,json=oldReplaceStart,proto3" json:"old_replace_start,omitempty"`
	OldReplaceEnd           *Anchor `protobuf:"bytes,4,opt,name=old_replace_end,json=oldReplaceEnd,proto3" json:"old_replace_end,omitempty"`
	NewText                 string  `protobuf:"bytes,5,opt,name=new_text,json=newText,proto3" json:"new_text,omitempty"`
	LspCompletion           []byte  `protobuf:"bytes,6,opt,name=lsp_completion,json=lspCompletion,proto3" json:"lsp_completion,omitempty"`
	OldInsertStart          *Anchor `protobuf:"bytes,7,opt,name=old_insert_start,json=oldInsertStart,proto3" json:"old_insert_start,omitempty"`
	OldInsertEnd            *Anchor `protobuf:"bytes,8,opt,name=old_insert_end,json=oldInsertEnd,proto3" json:"old_insert_end,omitempty"`
}

func (x *ResolveCompletionDocumentationResponse) Reset() {
	*x = ResolveCompletionDocumentationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveCompletionDocumentationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveCompletionDocumentationResponse) ProtoMessage() {}

func (x *ResolveCompletionDocumentationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveCompletionDocumentationResponse.ProtoReflect.Descriptor instead.
func (*ResolveCompletionDocumentationResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{64}
}

func (x *ResolveCompletionDocumentationResponse) GetDocumentation() string {
	if x != nil {
		return x.Documentation
	}
	return ""
}

func (x *ResolveCompletionDocumentationResponse) GetDocumentationIsMarkdown() bool {
	if x != nil {
		return x.DocumentationIsMarkdown
	}
	return false
}

func (x *ResolveCompletionDocumentationResponse) GetOldReplaceStart() *Anchor {
	if x != nil {
		return x.OldReplaceStart
	}
	return nil
}

func (x *ResolveCompletionDocumentationResponse) GetOldReplaceEnd() *Anchor {
	if x != nil {
		return x.OldReplaceEnd
	}
	return nil
}

func (x *ResolveCompletionDocumentationResponse) GetNewText() string {
	if x != nil {
		return x.NewText
	}
	return ""
}

func (x *ResolveCompletionDocumentationResponse) GetLspCompletion() []byte {
	if x != nil {
		return x.LspCompletion
	}
	return nil
}

func (x *ResolveCompletionDocumentationResponse) GetOldInsertStart() *Anchor {
	if x != nil {
		return x.OldInsertStart
	}
	return nil
}

func (x *ResolveCompletionDocumentationResponse) GetOldInsertEnd() *Anchor {
	if x != nil {
		return x.OldInsertEnd
	}
	return nil
}

type ResolveInlayHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        uint64     `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId         uint64     `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	LanguageServerId uint64     `protobuf:"varint,3,opt,name=language_server_id,json=languageServerId,proto3" json:"language_server_id,omitempty"`
	Hint             *InlayHint `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *ResolveInlayHint) Reset() {
	*x = ResolveInlayHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveInlayHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveInlayHint) ProtoMessage() {}

func (x *ResolveInlayHint) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveInlayHint.ProtoReflect.Descriptor instead.
func (*ResolveInlayHint) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{65}
}

func (x *ResolveInlayHint) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ResolveInlayHint) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *ResolveInlayHint) GetLanguageServerId() uint64 {
	if x != nil {
		return x.LanguageServerId
	}
	return 0
}

func (x *ResolveInlayHint) GetHint() *InlayHint {
	if x != nil {
		return x.Hint
	}
	return nil
}

type ResolveInlayHintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hint *InlayHint `protobuf:"bytes,1,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *ResolveInlayHintResponse) Reset() {
	*x = ResolveInlayHintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveInlayHintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveInlayHintResponse) ProtoMessage() {}

func (x *ResolveInlayHintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveInlayHintResponse.ProtoReflect.Descriptor instead.
func (*ResolveInlayHintResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{66}
}

func (x *ResolveInlayHintResponse) GetHint() *InlayHint {
	if x != nil {
		return x.Hint
	}
	return nil
}

type RefreshInlayHints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *RefreshInlayHints) Reset() {
	*x = RefreshInlayHints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshInlayHints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshInlayHints) ProtoMessage() {}

func (x *RefreshInlayHints) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshInlayHints.ProtoReflect.Descriptor instead.
func (*RefreshInlayHints) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{67}
}

func (x *RefreshInlayHints) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type CodeLens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LspLens []byte `protobuf:"bytes,1,opt,name=lsp_lens,json=lspLens,proto3" json:"lsp_lens,omitempty"`
}

func (x *CodeLens) Reset() {
	*x = CodeLens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeLens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeLens) ProtoMessage() {}

func (x *CodeLens) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeLens.ProtoReflect.Descriptor instead.
func (*CodeLens) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{68}
}

func (x *CodeLens) GetLspLens() []byte {
	if x != nil {
		return x.LspLens
	}
	return nil
}

type GetCodeLens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,3,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetCodeLens) Reset() {
	*x = GetCodeLens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeLens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeLens) ProtoMessage() {}

func (x *GetCodeLens) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeLens.ProtoReflect.Descriptor instead.
func (*GetCodeLens) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{69}
}

func (x *GetCodeLens) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetCodeLens) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *GetCodeLens) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetCodeLensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LensActions []*CodeAction       `protobuf:"bytes,1,rep,name=lens_actions,json=lensActions,proto3" json:"lens_actions,omitempty"`
	Version     []*VectorClockEntry `protobuf:"bytes,2,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetCodeLensResponse) Reset() {
	*x = GetCodeLensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeLensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeLensResponse) ProtoMessage() {}

func (x *GetCodeLensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeLensResponse.ProtoReflect.Descriptor instead.
func (*GetCodeLensResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{70}
}

func (x *GetCodeLensResponse) GetLensActions() []*CodeAction {
	if x != nil {
		return x.LensActions
	}
	return nil
}

func (x *GetCodeLensResponse) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type RefreshCodeLens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *RefreshCodeLens) Reset() {
	*x = RefreshCodeLens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshCodeLens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshCodeLens) ProtoMessage() {}

func (x *RefreshCodeLens) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshCodeLens.ProtoReflect.Descriptor instead.
func (*RefreshCodeLens) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{71}
}

func (x *RefreshCodeLens) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type MarkupContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMarkdown bool   `protobuf:"varint,1,opt,name=is_markdown,json=isMarkdown,proto3" json:"is_markdown,omitempty"`
	Value      string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MarkupContent) Reset() {
	*x = MarkupContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkupContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkupContent) ProtoMessage() {}

func (x *MarkupContent) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkupContent.ProtoReflect.Descriptor instead.
func (*MarkupContent) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{72}
}

func (x *MarkupContent) GetIsMarkdown() bool {
	if x != nil {
		return x.IsMarkdown
	}
	return false
}

func (x *MarkupContent) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PerformRenameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *ProjectTransaction `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *PerformRenameResponse) Reset() {
	*x = PerformRenameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformRenameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformRenameResponse) ProtoMessage() {}

func (x *PerformRenameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformRenameResponse.ProtoReflect.Descriptor instead.
func (*PerformRenameResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{73}
}

func (x *PerformRenameResponse) GetTransaction() *ProjectTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type CodeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId  uint64          `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Start     *Anchor         `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End       *Anchor         `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	LspAction []byte          `protobuf:"bytes,4,opt,name=lsp_action,json=lspAction,proto3" json:"lsp_action,omitempty"`
	Kind      CodeAction_Kind `protobuf:"varint,5,opt,name=kind,proto3,enum=zed.messages.CodeAction_Kind" json:"kind,omitempty"`
	Resolved  bool            `protobuf:"varint,6,opt,name=resolved,proto3" json:"resolved,omitempty"`
}

func (x *CodeAction) Reset() {
	*x = CodeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeAction) ProtoMessage() {}

func (x *CodeAction) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeAction.ProtoReflect.Descriptor instead.
func (*CodeAction) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{74}
}

func (x *CodeAction) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *CodeAction) GetStart() *Anchor {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CodeAction) GetEnd() *Anchor {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *CodeAction) GetLspAction() []byte {
	if x != nil {
		return x.LspAction
	}
	return nil
}

func (x *CodeAction) GetKind() CodeAction_Kind {
	if x != nil {
		return x.Kind
	}
	return CodeAction_Action
}

func (x *CodeAction) GetResolved() bool {
	if x != nil {
		return x.Resolved
	}
	return false
}

type LanguageServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	WorktreeId *uint64 `protobuf:"varint,3,opt,name=worktree_id,json=worktreeId,proto3,oneof" json:"worktree_id,omitempty"`
}

func (x *LanguageServer) Reset() {
	*x = LanguageServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageServer) ProtoMessage() {}

func (x *LanguageServer) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageServer.ProtoReflect.Descriptor instead.
func (*LanguageServer) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{75}
}

func (x *LanguageServer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LanguageServer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LanguageServer) GetWorktreeId() uint64 {
	if x != nil && x.WorktreeId != nil {
		return *x.WorktreeId
	}
	return 0
}

type StartLanguageServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64          `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Server    *LanguageServer `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *StartLanguageServer) Reset() {
	*x = StartLanguageServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartLanguageServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartLanguageServer) ProtoMessage() {}

func (x *StartLanguageServer) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartLanguageServer.ProtoReflect.Descriptor instead.
func (*StartLanguageServer) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{76}
}

func (x *StartLanguageServer) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *StartLanguageServer) GetServer() *LanguageServer {
	if x != nil {
		return x.Server
	}
	return nil
}

type UpdateDiagnosticSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  uint64             `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	WorktreeId uint64             `protobuf:"varint,2,opt,name=worktree_id,json=worktreeId,proto3" json:"worktree_id,omitempty"`
	Summary    *DiagnosticSummary `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *UpdateDiagnosticSummary) Reset() {
	*x = UpdateDiagnosticSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiagnosticSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiagnosticSummary) ProtoMessage() {}

func (x *UpdateDiagnosticSummary) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiagnosticSummary.ProtoReflect.Descriptor instead.
func (*UpdateDiagnosticSummary) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{77}
}

func (x *UpdateDiagnosticSummary) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateDiagnosticSummary) GetWorktreeId() uint64 {
	if x != nil {
		return x.WorktreeId
	}
	return 0
}

func (x *UpdateDiagnosticSummary) GetSummary() *DiagnosticSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type DiagnosticSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path             string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	LanguageServerId uint64 `protobuf:"varint,2,opt,name=language_server_id,json=languageServerId,proto3" json:"language_server_id,omitempty"`
	ErrorCount       uint32 `protobuf:"varint,3,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	WarningCount     uint32 `protobuf:"varint,4,opt,name=warning_count,json=warningCount,proto3" json:"warning_count,omitempty"`
}

func (x *DiagnosticSummary) Reset() {
	*x = DiagnosticSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticSummary) ProtoMessage() {}

func (x *DiagnosticSummary) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticSummary.ProtoReflect.Descriptor instead.
func (*DiagnosticSummary) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{78}
}

func (x *DiagnosticSummary) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DiagnosticSummary) GetLanguageServerId() uint64 {
	if x != nil {
		return x.LanguageServerId
	}
	return 0
}

func (x *DiagnosticSummary) GetErrorCount() uint32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *DiagnosticSummary) GetWarningCount() uint32 {
	if x != nil {
		return x.WarningCount
	}
	return 0
}

type UpdateLanguageServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	LanguageServerId uint64 `protobuf:"varint,2,opt,name=language_server_id,json=languageServerId,proto3" json:"language_server_id,omitempty"`
	// Types that are assignable to Variant:
	//
	//	*UpdateLanguageServer_WorkStart
	//	*UpdateLanguageServer_WorkProgress
	//	*UpdateLanguageServer_WorkEnd
	//	*UpdateLanguageServer_DiskBasedDiagnosticsUpdating
	//	*UpdateLanguageServer_DiskBasedDiagnosticsUpdated
	Variant isUpdateLanguageServer_Variant `protobuf_oneof:"variant"`
}

func (x *UpdateLanguageServer) Reset() {
	*x = UpdateLanguageServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLanguageServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLanguageServer) ProtoMessage() {}

func (x *UpdateLanguageServer) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLanguageServer.ProtoReflect.Descriptor instead.
func (*UpdateLanguageServer) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{79}
}

func (x *UpdateLanguageServer) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateLanguageServer) GetLanguageServerId() uint64 {
	if x != nil {
		return x.LanguageServerId
	}
	return 0
}

func (m *UpdateLanguageServer) GetVariant() isUpdateLanguageServer_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *UpdateLanguageServer) GetWorkStart() *LspWorkStart {
	if x, ok := x.GetVariant().(*UpdateLanguageServer_WorkStart); ok {
		return x.WorkStart
	}
	return nil
}

func (x *UpdateLanguageServer) GetWorkProgress() *LspWorkProgress {
	if x, ok := x.GetVariant().(*UpdateLanguageServer_WorkProgress); ok {
		return x.WorkProgress
	}
	return nil
}

func (x *UpdateLanguageServer) GetWorkEnd() *LspWorkEnd {
	if x, ok := x.GetVariant().(*UpdateLanguageServer_WorkEnd); ok {
		return x.WorkEnd
	}
	return nil
}

func (x *UpdateLanguageServer) GetDiskBasedDiagnosticsUpdating() *LspDiskBasedDiagnosticsUpdating {
	if x, ok := x.GetVariant().(*UpdateLanguageServer_DiskBasedDiagnosticsUpdating); ok {
		return x.DiskBasedDiagnosticsUpdating
	}
	return nil
}

func (x *UpdateLanguageServer) GetDiskBasedDiagnosticsUpdated() *LspDiskBasedDiagnosticsUpdated {
	if x, ok := x.GetVariant().(*UpdateLanguageServer_DiskBasedDiagnosticsUpdated); ok {
		return x.DiskBasedDiagnosticsUpdated
	}
	return nil
}

type isUpdateLanguageServer_Variant interface {
	isUpdateLanguageServer_Variant()
}

type UpdateLanguageServer_WorkStart struct {
	WorkStart *LspWorkStart `protobuf:"bytes,3,opt,name=work_start,json=workStart,proto3,oneof"`
}

type UpdateLanguageServer_WorkProgress struct {
	WorkProgress *LspWorkProgress `protobuf:"bytes,4,opt,name=work_progress,json=workProgress,proto3,oneof"`
}

type UpdateLanguageServer_WorkEnd struct {
	WorkEnd *LspWorkEnd `protobuf:"bytes,5,opt,name=work_end,json=workEnd,proto3,oneof"`
}

type UpdateLanguageServer_DiskBasedDiagnosticsUpdating struct {
	DiskBasedDiagnosticsUpdating *LspDiskBasedDiagnosticsUpdating `protobuf:"bytes,6,opt,name=disk_based_diagnostics_updating,json=diskBasedDiagnosticsUpdating,proto3,oneof"`
}

type UpdateLanguageServer_DiskBasedDiagnosticsUpdated struct {
	DiskBasedDiagnosticsUpdated *LspDiskBasedDiagnosticsUpdated `protobuf:"bytes,7,opt,name=disk_based_diagnostics_updated,json=diskBasedDiagnosticsUpdated,proto3,oneof"`
}

func (*UpdateLanguageServer_WorkStart) isUpdateLanguageServer_Variant() {}

func (*UpdateLanguageServer_WorkProgress) isUpdateLanguageServer_Variant() {}

func (*UpdateLanguageServer_WorkEnd) isUpdateLanguageServer_Variant() {}

func (*UpdateLanguageServer_DiskBasedDiagnosticsUpdating) isUpdateLanguageServer_Variant() {}

func (*UpdateLanguageServer_DiskBasedDiagnosticsUpdated) isUpdateLanguageServer_Variant() {}

type LspWorkStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token         string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Title         *string `protobuf:"bytes,4,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Message       *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Percentage    *uint32 `protobuf:"varint,3,opt,name=percentage,proto3,oneof" json:"percentage,omitempty"`
	IsCancellable *bool   `protobuf:"varint,5,opt,name=is_cancellable,json=isCancellable,proto3,oneof" json:"is_cancellable,omitempty"`
}

func (x *LspWorkStart) Reset() {
	*x = LspWorkStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspWorkStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspWorkStart) ProtoMessage() {}

func (x *LspWorkStart) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspWorkStart.ProtoReflect.Descriptor instead.
func (*LspWorkStart) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{80}
}

func (x *LspWorkStart) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LspWorkStart) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *LspWorkStart) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *LspWorkStart) GetPercentage() uint32 {
	if x != nil && x.Percentage != nil {
		return *x.Percentage
	}
	return 0
}

func (x *LspWorkStart) GetIsCancellable() bool {
	if x != nil && x.IsCancellable != nil {
		return *x.IsCancellable
	}
	return false
}

type LspWorkProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token         string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Message       *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Percentage    *uint32 `protobuf:"varint,3,opt,name=percentage,proto3,oneof" json:"percentage,omitempty"`
	IsCancellable *bool   `protobuf:"varint,4,opt,name=is_cancellable,json=isCancellable,proto3,oneof" json:"is_cancellable,omitempty"`
}

func (x *LspWorkProgress) Reset() {
	*x = LspWorkProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspWorkProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspWorkProgress) ProtoMessage() {}

func (x *LspWorkProgress) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspWorkProgress.ProtoReflect.Descriptor instead.
func (*LspWorkProgress) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{81}
}

func (x *LspWorkProgress) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LspWorkProgress) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *LspWorkProgress) GetPercentage() uint32 {
	if x != nil && x.Percentage != nil {
		return *x.Percentage
	}
	return 0
}

func (x *LspWorkProgress) GetIsCancellable() bool {
	if x != nil && x.IsCancellable != nil {
		return *x.IsCancellable
	}
	return false
}

type LspWorkEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *LspWorkEnd) Reset() {
	*x = LspWorkEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspWorkEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspWorkEnd) ProtoMessage() {}

func (x *LspWorkEnd) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspWorkEnd.ProtoReflect.Descriptor instead.
func (*LspWorkEnd) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{82}
}

func (x *LspWorkEnd) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type LspDiskBasedDiagnosticsUpdating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LspDiskBasedDiagnosticsUpdating) Reset() {
	*x = LspDiskBasedDiagnosticsUpdating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspDiskBasedDiagnosticsUpdating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspDiskBasedDiagnosticsUpdating) ProtoMessage() {}

func (x *LspDiskBasedDiagnosticsUpdating) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspDiskBasedDiagnosticsUpdating.ProtoReflect.Descriptor instead.
func (*LspDiskBasedDiagnosticsUpdating) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{83}
}

type LspDiskBasedDiagnosticsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LspDiskBasedDiagnosticsUpdated) Reset() {
	*x = LspDiskBasedDiagnosticsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspDiskBasedDiagnosticsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspDiskBasedDiagnosticsUpdated) ProtoMessage() {}

func (x *LspDiskBasedDiagnosticsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspDiskBasedDiagnosticsUpdated.ProtoReflect.Descriptor instead.
func (*LspDiskBasedDiagnosticsUpdated) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{84}
}

type LanguageServerLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	LanguageServerId uint64 `protobuf:"varint,2,opt,name=language_server_id,json=languageServerId,proto3" json:"language_server_id,omitempty"`
	// Types that are assignable to LogType:
	//
	//	*LanguageServerLog_LogMessageType
	//	*LanguageServerLog_LogTrace
	LogType isLanguageServerLog_LogType `protobuf_oneof:"log_type"`
	Message string                      `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LanguageServerLog) Reset() {
	*x = LanguageServerLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageServerLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageServerLog) ProtoMessage() {}

func (x *LanguageServerLog) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageServerLog.ProtoReflect.Descriptor instead.
func (*LanguageServerLog) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{85}
}

func (x *LanguageServerLog) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LanguageServerLog) GetLanguageServerId() uint64 {
	if x != nil {
		return x.LanguageServerId
	}
	return 0
}

func (m *LanguageServerLog) GetLogType() isLanguageServerLog_LogType {
	if m != nil {
		return m.LogType
	}
	return nil
}

func (x *LanguageServerLog) GetLogMessageType() uint32 {
	if x, ok := x.GetLogType().(*LanguageServerLog_LogMessageType); ok {
		return x.LogMessageType
	}
	return 0
}

func (x *LanguageServerLog) GetLogTrace() *LspLogTrace {
	if x, ok := x.GetLogType().(*LanguageServerLog_LogTrace); ok {
		return x.LogTrace
	}
	return nil
}

func (x *LanguageServerLog) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type isLanguageServerLog_LogType interface {
	isLanguageServerLog_LogType()
}

type LanguageServerLog_LogMessageType struct {
	LogMessageType uint32 `protobuf:"varint,3,opt,name=log_message_type,json=logMessageType,proto3,oneof"`
}

type LanguageServerLog_LogTrace struct {
	LogTrace *LspLogTrace `protobuf:"bytes,4,opt,name=log_trace,json=logTrace,proto3,oneof"`
}

func (*LanguageServerLog_LogMessageType) isLanguageServerLog_LogType() {}

func (*LanguageServerLog_LogTrace) isLanguageServerLog_LogType() {}

type LspLogTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *string `protobuf:"bytes,1,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *LspLogTrace) Reset() {
	*x = LspLogTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspLogTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspLogTrace) ProtoMessage() {}

func (x *LspLogTrace) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspLogTrace.ProtoReflect.Descriptor instead.
func (*LspLogTrace) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{86}
}

func (x *LspLogTrace) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type ApplyCodeActionKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64   `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Kind      string   `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	BufferIds []uint64 `protobuf:"varint,3,rep,packed,name=buffer_ids,json=bufferIds,proto3" json:"buffer_ids,omitempty"`
}

func (x *ApplyCodeActionKind) Reset() {
	*x = ApplyCodeActionKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyCodeActionKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyCodeActionKind) ProtoMessage() {}

func (x *ApplyCodeActionKind) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyCodeActionKind.ProtoReflect.Descriptor instead.
func (*ApplyCodeActionKind) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{87}
}

func (x *ApplyCodeActionKind) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ApplyCodeActionKind) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ApplyCodeActionKind) GetBufferIds() []uint64 {
	if x != nil {
		return x.BufferIds
	}
	return nil
}

type ApplyCodeActionKindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *ProjectTransaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *ApplyCodeActionKindResponse) Reset() {
	*x = ApplyCodeActionKindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyCodeActionKindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyCodeActionKindResponse) ProtoMessage() {}

func (x *ApplyCodeActionKindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyCodeActionKindResponse.ProtoReflect.Descriptor instead.
func (*ApplyCodeActionKindResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{88}
}

func (x *ApplyCodeActionKindResponse) GetTransaction() *ProjectTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type RegisterBufferWithLanguageServers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64 `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
}

func (x *RegisterBufferWithLanguageServers) Reset() {
	*x = RegisterBufferWithLanguageServers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterBufferWithLanguageServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterBufferWithLanguageServers) ProtoMessage() {}

func (x *RegisterBufferWithLanguageServers) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterBufferWithLanguageServers.ProtoReflect.Descriptor instead.
func (*RegisterBufferWithLanguageServers) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{89}
}

func (x *RegisterBufferWithLanguageServers) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *RegisterBufferWithLanguageServers) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

type OpenBufferForSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Symbol    *Symbol `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *OpenBufferForSymbol) Reset() {
	*x = OpenBufferForSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenBufferForSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenBufferForSymbol) ProtoMessage() {}

func (x *OpenBufferForSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenBufferForSymbol.ProtoReflect.Descriptor instead.
func (*OpenBufferForSymbol) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{90}
}

func (x *OpenBufferForSymbol) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *OpenBufferForSymbol) GetSymbol() *Symbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

type OpenBufferForSymbolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferId uint64 `protobuf:"varint,1,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
}

func (x *OpenBufferForSymbolResponse) Reset() {
	*x = OpenBufferForSymbolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenBufferForSymbolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenBufferForSymbolResponse) ProtoMessage() {}

func (x *OpenBufferForSymbolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenBufferForSymbolResponse.ProtoReflect.Descriptor instead.
func (*OpenBufferForSymbolResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{91}
}

func (x *OpenBufferForSymbolResponse) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

type FormatBuffers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64        `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Trigger   FormatTrigger `protobuf:"varint,2,opt,name=trigger,proto3,enum=zed.messages.FormatTrigger" json:"trigger,omitempty"`
	BufferIds []uint64      `protobuf:"varint,3,rep,packed,name=buffer_ids,json=bufferIds,proto3" json:"buffer_ids,omitempty"`
}

func (x *FormatBuffers) Reset() {
	*x = FormatBuffers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatBuffers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatBuffers) ProtoMessage() {}

func (x *FormatBuffers) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatBuffers.ProtoReflect.Descriptor instead.
func (*FormatBuffers) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{92}
}

func (x *FormatBuffers) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *FormatBuffers) GetTrigger() FormatTrigger {
	if x != nil {
		return x.Trigger
	}
	return FormatTrigger_Save
}

func (x *FormatBuffers) GetBufferIds() []uint64 {
	if x != nil {
		return x.BufferIds
	}
	return nil
}

type FormatBuffersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *ProjectTransaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *FormatBuffersResponse) Reset() {
	*x = FormatBuffersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatBuffersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatBuffersResponse) ProtoMessage() {}

func (x *FormatBuffersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatBuffersResponse.ProtoReflect.Descriptor instead.
func (*FormatBuffersResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{93}
}

func (x *FormatBuffersResponse) GetTransaction() *ProjectTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type GetCompletions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor             `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,4,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *GetCompletions) Reset() {
	*x = GetCompletions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompletions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompletions) ProtoMessage() {}

func (x *GetCompletions) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompletions.ProtoReflect.Descriptor instead.
func (*GetCompletions) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{94}
}

func (x *GetCompletions) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetCompletions) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *GetCompletions) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GetCompletions) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type CancelLanguageServerWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Types that are assignable to Work:
	//
	//	*CancelLanguageServerWork_Buffers_
	//	*CancelLanguageServerWork_LanguageServerWork_
	Work isCancelLanguageServerWork_Work `protobuf_oneof:"work"`
}

func (x *CancelLanguageServerWork) Reset() {
	*x = CancelLanguageServerWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelLanguageServerWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelLanguageServerWork) ProtoMessage() {}

func (x *CancelLanguageServerWork) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelLanguageServerWork.ProtoReflect.Descriptor instead.
func (*CancelLanguageServerWork) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{95}
}

func (x *CancelLanguageServerWork) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (m *CancelLanguageServerWork) GetWork() isCancelLanguageServerWork_Work {
	if m != nil {
		return m.Work
	}
	return nil
}

func (x *CancelLanguageServerWork) GetBuffers() *CancelLanguageServerWork_Buffers {
	if x, ok := x.GetWork().(*CancelLanguageServerWork_Buffers_); ok {
		return x.Buffers
	}
	return nil
}

func (x *CancelLanguageServerWork) GetLanguageServerWork() *CancelLanguageServerWork_LanguageServerWork {
	if x, ok := x.GetWork().(*CancelLanguageServerWork_LanguageServerWork_); ok {
		return x.LanguageServerWork
	}
	return nil
}

type isCancelLanguageServerWork_Work interface {
	isCancelLanguageServerWork_Work()
}

type CancelLanguageServerWork_Buffers_ struct {
	Buffers *CancelLanguageServerWork_Buffers `protobuf:"bytes,2,opt,name=buffers,proto3,oneof"`
}

type CancelLanguageServerWork_LanguageServerWork_ struct {
	LanguageServerWork *CancelLanguageServerWork_LanguageServerWork `protobuf:"bytes,3,opt,name=language_server_work,json=languageServerWork,proto3,oneof"`
}

func (*CancelLanguageServerWork_Buffers_) isCancelLanguageServerWork_Work() {}

func (*CancelLanguageServerWork_LanguageServerWork_) isCancelLanguageServerWork_Work() {}

type LanguageServerPromptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Types that are assignable to Level:
	//
	//	*LanguageServerPromptRequest_Info_
	//	*LanguageServerPromptRequest_Warning_
	//	*LanguageServerPromptRequest_Critical_
	Level   isLanguageServerPromptRequest_Level `protobuf_oneof:"level"`
	Message string                              `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Actions []string                            `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions,omitempty"`
	LspName string                              `protobuf:"bytes,7,opt,name=lsp_name,json=lspName,proto3" json:"lsp_name,omitempty"`
}

func (x *LanguageServerPromptRequest) Reset() {
	*x = LanguageServerPromptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageServerPromptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageServerPromptRequest) ProtoMessage() {}

func (x *LanguageServerPromptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageServerPromptRequest.ProtoReflect.Descriptor instead.
func (*LanguageServerPromptRequest) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{96}
}

func (x *LanguageServerPromptRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (m *LanguageServerPromptRequest) GetLevel() isLanguageServerPromptRequest_Level {
	if m != nil {
		return m.Level
	}
	return nil
}

func (x *LanguageServerPromptRequest) GetInfo() *LanguageServerPromptRequest_Info {
	if x, ok := x.GetLevel().(*LanguageServerPromptRequest_Info_); ok {
		return x.Info
	}
	return nil
}

func (x *LanguageServerPromptRequest) GetWarning() *LanguageServerPromptRequest_Warning {
	if x, ok := x.GetLevel().(*LanguageServerPromptRequest_Warning_); ok {
		return x.Warning
	}
	return nil
}

func (x *LanguageServerPromptRequest) GetCritical() *LanguageServerPromptRequest_Critical {
	if x, ok := x.GetLevel().(*LanguageServerPromptRequest_Critical_); ok {
		return x.Critical
	}
	return nil
}

func (x *LanguageServerPromptRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LanguageServerPromptRequest) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *LanguageServerPromptRequest) GetLspName() string {
	if x != nil {
		return x.LspName
	}
	return ""
}

type isLanguageServerPromptRequest_Level interface {
	isLanguageServerPromptRequest_Level()
}

type LanguageServerPromptRequest_Info_ struct {
	Info *LanguageServerPromptRequest_Info `protobuf:"bytes,2,opt,name=info,proto3,oneof"`
}

type LanguageServerPromptRequest_Warning_ struct {
	Warning *LanguageServerPromptRequest_Warning `protobuf:"bytes,3,opt,name=warning,proto3,oneof"`
}

type LanguageServerPromptRequest_Critical_ struct {
	Critical *LanguageServerPromptRequest_Critical `protobuf:"bytes,4,opt,name=critical,proto3,oneof"`
}

func (*LanguageServerPromptRequest_Info_) isLanguageServerPromptRequest_Level() {}

func (*LanguageServerPromptRequest_Warning_) isLanguageServerPromptRequest_Level() {}

func (*LanguageServerPromptRequest_Critical_) isLanguageServerPromptRequest_Level() {}

type LanguageServerPromptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionResponse *uint64 `protobuf:"varint,1,opt,name=action_response,json=actionResponse,proto3,oneof" json:"action_response,omitempty"`
}

func (x *LanguageServerPromptResponse) Reset() {
	*x = LanguageServerPromptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageServerPromptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageServerPromptResponse) ProtoMessage() {}

func (x *LanguageServerPromptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageServerPromptResponse.ProtoReflect.Descriptor instead.
func (*LanguageServerPromptResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{97}
}

func (x *LanguageServerPromptResponse) GetActionResponse() uint64 {
	if x != nil && x.ActionResponse != nil {
		return *x.ActionResponse
	}
	return 0
}

type MultiLspQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,3,rep,name=version,proto3" json:"version,omitempty"`
	// Types that are assignable to Strategy:
	//
	//	*MultiLspQuery_All
	Strategy isMultiLspQuery_Strategy `protobuf_oneof:"strategy"`
	// Types that are assignable to Request:
	//
	//	*MultiLspQuery_GetHover
	//	*MultiLspQuery_GetCodeActions
	//	*MultiLspQuery_GetSignatureHelp
	//	*MultiLspQuery_GetCodeLens
	Request isMultiLspQuery_Request `protobuf_oneof:"request"`
}

func (x *MultiLspQuery) Reset() {
	*x = MultiLspQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLspQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLspQuery) ProtoMessage() {}

func (x *MultiLspQuery) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLspQuery.ProtoReflect.Descriptor instead.
func (*MultiLspQuery) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{98}
}

func (x *MultiLspQuery) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *MultiLspQuery) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *MultiLspQuery) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

func (m *MultiLspQuery) GetStrategy() isMultiLspQuery_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (x *MultiLspQuery) GetAll() *AllLanguageServers {
	if x, ok := x.GetStrategy().(*MultiLspQuery_All); ok {
		return x.All
	}
	return nil
}

func (m *MultiLspQuery) GetRequest() isMultiLspQuery_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *MultiLspQuery) GetGetHover() *GetHover {
	if x, ok := x.GetRequest().(*MultiLspQuery_GetHover); ok {
		return x.GetHover
	}
	return nil
}

func (x *MultiLspQuery) GetGetCodeActions() *GetCodeActions {
	if x, ok := x.GetRequest().(*MultiLspQuery_GetCodeActions); ok {
		return x.GetCodeActions
	}
	return nil
}

func (x *MultiLspQuery) GetGetSignatureHelp() *GetSignatureHelp {
	if x, ok := x.GetRequest().(*MultiLspQuery_GetSignatureHelp); ok {
		return x.GetSignatureHelp
	}
	return nil
}

func (x *MultiLspQuery) GetGetCodeLens() *GetCodeLens {
	if x, ok := x.GetRequest().(*MultiLspQuery_GetCodeLens); ok {
		return x.GetCodeLens
	}
	return nil
}

type isMultiLspQuery_Strategy interface {
	isMultiLspQuery_Strategy()
}

type MultiLspQuery_All struct {
	All *AllLanguageServers `protobuf:"bytes,4,opt,name=all,proto3,oneof"`
}

func (*MultiLspQuery_All) isMultiLspQuery_Strategy() {}

type isMultiLspQuery_Request interface {
	isMultiLspQuery_Request()
}

type MultiLspQuery_GetHover struct {
	GetHover *GetHover `protobuf:"bytes,5,opt,name=get_hover,json=getHover,proto3,oneof"`
}

type MultiLspQuery_GetCodeActions struct {
	GetCodeActions *GetCodeActions `protobuf:"bytes,6,opt,name=get_code_actions,json=getCodeActions,proto3,oneof"`
}

type MultiLspQuery_GetSignatureHelp struct {
	GetSignatureHelp *GetSignatureHelp `protobuf:"bytes,7,opt,name=get_signature_help,json=getSignatureHelp,proto3,oneof"`
}

type MultiLspQuery_GetCodeLens struct {
	GetCodeLens *GetCodeLens `protobuf:"bytes,8,opt,name=get_code_lens,json=getCodeLens,proto3,oneof"`
}

func (*MultiLspQuery_GetHover) isMultiLspQuery_Request() {}

func (*MultiLspQuery_GetCodeActions) isMultiLspQuery_Request() {}

func (*MultiLspQuery_GetSignatureHelp) isMultiLspQuery_Request() {}

func (*MultiLspQuery_GetCodeLens) isMultiLspQuery_Request() {}

type AllLanguageServers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllLanguageServers) Reset() {
	*x = AllLanguageServers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllLanguageServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllLanguageServers) ProtoMessage() {}

func (x *AllLanguageServers) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllLanguageServers.ProtoReflect.Descriptor instead.
func (*AllLanguageServers) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{99}
}

type RestartLanguageServers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64   `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferIds []uint64 `protobuf:"varint,2,rep,packed,name=buffer_ids,json=bufferIds,proto3" json:"buffer_ids,omitempty"`
}

func (x *RestartLanguageServers) Reset() {
	*x = RestartLanguageServers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartLanguageServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartLanguageServers) ProtoMessage() {}

func (x *RestartLanguageServers) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartLanguageServers.ProtoReflect.Descriptor instead.
func (*RestartLanguageServers) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{100}
}

func (x *RestartLanguageServers) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *RestartLanguageServers) GetBufferIds() []uint64 {
	if x != nil {
		return x.BufferIds
	}
	return nil
}

type StopLanguageServers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64   `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferIds []uint64 `protobuf:"varint,2,rep,packed,name=buffer_ids,json=bufferIds,proto3" json:"buffer_ids,omitempty"`
}

func (x *StopLanguageServers) Reset() {
	*x = StopLanguageServers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopLanguageServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopLanguageServers) ProtoMessage() {}

func (x *StopLanguageServers) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopLanguageServers.ProtoReflect.Descriptor instead.
func (*StopLanguageServers) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{101}
}

func (x *StopLanguageServers) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *StopLanguageServers) GetBufferIds() []uint64 {
	if x != nil {
		return x.BufferIds
	}
	return nil
}

type MultiLspQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*LspResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *MultiLspQueryResponse) Reset() {
	*x = MultiLspQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLspQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLspQueryResponse) ProtoMessage() {}

func (x *MultiLspQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLspQueryResponse.ProtoReflect.Descriptor instead.
func (*MultiLspQueryResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{102}
}

func (x *MultiLspQueryResponse) GetResponses() []*LspResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type LspResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*LspResponse_GetHoverResponse
	//	*LspResponse_GetCodeActionsResponse
	//	*LspResponse_GetSignatureHelpResponse
	//	*LspResponse_GetCodeLensResponse
	Response isLspResponse_Response `protobuf_oneof:"response"`
}

func (x *LspResponse) Reset() {
	*x = LspResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspResponse) ProtoMessage() {}

func (x *LspResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspResponse.ProtoReflect.Descriptor instead.
func (*LspResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{103}
}

func (m *LspResponse) GetResponse() isLspResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *LspResponse) GetGetHoverResponse() *GetHoverResponse {
	if x, ok := x.GetResponse().(*LspResponse_GetHoverResponse); ok {
		return x.GetHoverResponse
	}
	return nil
}

func (x *LspResponse) GetGetCodeActionsResponse() *GetCodeActionsResponse {
	if x, ok := x.GetResponse().(*LspResponse_GetCodeActionsResponse); ok {
		return x.GetCodeActionsResponse
	}
	return nil
}

func (x *LspResponse) GetGetSignatureHelpResponse() *GetSignatureHelpResponse {
	if x, ok := x.GetResponse().(*LspResponse_GetSignatureHelpResponse); ok {
		return x.GetSignatureHelpResponse
	}
	return nil
}

func (x *LspResponse) GetGetCodeLensResponse() *GetCodeLensResponse {
	if x, ok := x.GetResponse().(*LspResponse_GetCodeLensResponse); ok {
		return x.GetCodeLensResponse
	}
	return nil
}

type isLspResponse_Response interface {
	isLspResponse_Response()
}

type LspResponse_GetHoverResponse struct {
	GetHoverResponse *GetHoverResponse `protobuf:"bytes,1,opt,name=get_hover_response,json=getHoverResponse,proto3,oneof"`
}

type LspResponse_GetCodeActionsResponse struct {
	GetCodeActionsResponse *GetCodeActionsResponse `protobuf:"bytes,2,opt,name=get_code_actions_response,json=getCodeActionsResponse,proto3,oneof"`
}

type LspResponse_GetSignatureHelpResponse struct {
	GetSignatureHelpResponse *GetSignatureHelpResponse `protobuf:"bytes,3,opt,name=get_signature_help_response,json=getSignatureHelpResponse,proto3,oneof"`
}

type LspResponse_GetCodeLensResponse struct {
	GetCodeLensResponse *GetCodeLensResponse `protobuf:"bytes,4,opt,name=get_code_lens_response,json=getCodeLensResponse,proto3,oneof"`
}

func (*LspResponse_GetHoverResponse) isLspResponse_Response() {}

func (*LspResponse_GetCodeActionsResponse) isLspResponse_Response() {}

func (*LspResponse_GetSignatureHelpResponse) isLspResponse_Response() {}

func (*LspResponse_GetCodeLensResponse) isLspResponse_Response() {}

type LanguageServerIdForName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64 `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LanguageServerIdForName) Reset() {
	*x = LanguageServerIdForName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageServerIdForName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageServerIdForName) ProtoMessage() {}

func (x *LanguageServerIdForName) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageServerIdForName.ProtoReflect.Descriptor instead.
func (*LanguageServerIdForName) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{104}
}

func (x *LanguageServerIdForName) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LanguageServerIdForName) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *LanguageServerIdForName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LanguageServerIdForNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId *uint64 `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3,oneof" json:"server_id,omitempty"`
}

func (x *LanguageServerIdForNameResponse) Reset() {
	*x = LanguageServerIdForNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageServerIdForNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageServerIdForNameResponse) ProtoMessage() {}

func (x *LanguageServerIdForNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageServerIdForNameResponse.ProtoReflect.Descriptor instead.
func (*LanguageServerIdForNameResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{105}
}

func (x *LanguageServerIdForNameResponse) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

type LspExtRunnables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64  `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Position  *Anchor `protobuf:"bytes,3,opt,name=position,proto3,oneof" json:"position,omitempty"`
}

func (x *LspExtRunnables) Reset() {
	*x = LspExtRunnables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspExtRunnables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspExtRunnables) ProtoMessage() {}

func (x *LspExtRunnables) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspExtRunnables.ProtoReflect.Descriptor instead.
func (*LspExtRunnables) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{106}
}

func (x *LspExtRunnables) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LspExtRunnables) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *LspExtRunnables) GetPosition() *Anchor {
	if x != nil {
		return x.Position
	}
	return nil
}

type LspExtRunnablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runnables []*LspRunnable `protobuf:"bytes,1,rep,name=runnables,proto3" json:"runnables,omitempty"`
}

func (x *LspExtRunnablesResponse) Reset() {
	*x = LspExtRunnablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspExtRunnablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspExtRunnablesResponse) ProtoMessage() {}

func (x *LspExtRunnablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspExtRunnablesResponse.ProtoReflect.Descriptor instead.
func (*LspExtRunnablesResponse) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{107}
}

func (x *LspExtRunnablesResponse) GetRunnables() []*LspRunnable {
	if x != nil {
		return x.Runnables
	}
	return nil
}

type LspRunnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskTemplate []byte        `protobuf:"bytes,1,opt,name=task_template,json=taskTemplate,proto3" json:"task_template,omitempty"`
	Location     *LocationLink `protobuf:"bytes,2,opt,name=location,proto3,oneof" json:"location,omitempty"`
}

func (x *LspRunnable) Reset() {
	*x = LspRunnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspRunnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspRunnable) ProtoMessage() {}

func (x *LspRunnable) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspRunnable.ProtoReflect.Descriptor instead.
func (*LspRunnable) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{108}
}

func (x *LspRunnable) GetTaskTemplate() []byte {
	if x != nil {
		return x.TaskTemplate
	}
	return nil
}

func (x *LspRunnable) GetLocation() *LocationLink {
	if x != nil {
		return x.Location
	}
	return nil
}

type LspExtCancelFlycheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId         uint64 `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	LanguageServerId uint64 `protobuf:"varint,3,opt,name=language_server_id,json=languageServerId,proto3" json:"language_server_id,omitempty"`
}

func (x *LspExtCancelFlycheck) Reset() {
	*x = LspExtCancelFlycheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspExtCancelFlycheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspExtCancelFlycheck) ProtoMessage() {}

func (x *LspExtCancelFlycheck) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspExtCancelFlycheck.ProtoReflect.Descriptor instead.
func (*LspExtCancelFlycheck) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{109}
}

func (x *LspExtCancelFlycheck) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LspExtCancelFlycheck) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *LspExtCancelFlycheck) GetLanguageServerId() uint64 {
	if x != nil {
		return x.LanguageServerId
	}
	return 0
}

type LspExtRunFlycheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId         uint64 `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	LanguageServerId uint64 `protobuf:"varint,3,opt,name=language_server_id,json=languageServerId,proto3" json:"language_server_id,omitempty"`
	CurrentFileOnly  bool   `protobuf:"varint,4,opt,name=current_file_only,json=currentFileOnly,proto3" json:"current_file_only,omitempty"`
}

func (x *LspExtRunFlycheck) Reset() {
	*x = LspExtRunFlycheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspExtRunFlycheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspExtRunFlycheck) ProtoMessage() {}

func (x *LspExtRunFlycheck) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspExtRunFlycheck.ProtoReflect.Descriptor instead.
func (*LspExtRunFlycheck) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{110}
}

func (x *LspExtRunFlycheck) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LspExtRunFlycheck) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *LspExtRunFlycheck) GetLanguageServerId() uint64 {
	if x != nil {
		return x.LanguageServerId
	}
	return 0
}

func (x *LspExtRunFlycheck) GetCurrentFileOnly() bool {
	if x != nil {
		return x.CurrentFileOnly
	}
	return false
}

type LspExtClearFlycheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId         uint64 `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	LanguageServerId uint64 `protobuf:"varint,3,opt,name=language_server_id,json=languageServerId,proto3" json:"language_server_id,omitempty"`
}

func (x *LspExtClearFlycheck) Reset() {
	*x = LspExtClearFlycheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspExtClearFlycheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspExtClearFlycheck) ProtoMessage() {}

func (x *LspExtClearFlycheck) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspExtClearFlycheck.ProtoReflect.Descriptor instead.
func (*LspExtClearFlycheck) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{111}
}

func (x *LspExtClearFlycheck) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LspExtClearFlycheck) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *LspExtClearFlycheck) GetLanguageServerId() uint64 {
	if x != nil {
		return x.LanguageServerId
	}
	return 0
}

type ResolveState_LspResolveState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
	ServerId uint64  `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
}

func (x *ResolveState_LspResolveState) Reset() {
	*x = ResolveState_LspResolveState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveState_LspResolveState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveState_LspResolveState) ProtoMessage() {}

func (x *ResolveState_LspResolveState) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveState_LspResolveState.ProtoReflect.Descriptor instead.
func (*ResolveState_LspResolveState) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{62, 0}
}

func (x *ResolveState_LspResolveState) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *ResolveState_LspResolveState) GetServerId() uint64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type CancelLanguageServerWork_Buffers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferIds []uint64 `protobuf:"varint,2,rep,packed,name=buffer_ids,json=bufferIds,proto3" json:"buffer_ids,omitempty"`
}

func (x *CancelLanguageServerWork_Buffers) Reset() {
	*x = CancelLanguageServerWork_Buffers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelLanguageServerWork_Buffers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelLanguageServerWork_Buffers) ProtoMessage() {}

func (x *CancelLanguageServerWork_Buffers) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelLanguageServerWork_Buffers.ProtoReflect.Descriptor instead.
func (*CancelLanguageServerWork_Buffers) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{95, 0}
}

func (x *CancelLanguageServerWork_Buffers) GetBufferIds() []uint64 {
	if x != nil {
		return x.BufferIds
	}
	return nil
}

type CancelLanguageServerWork_LanguageServerWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LanguageServerId uint64  `protobuf:"varint,1,opt,name=language_server_id,json=languageServerId,proto3" json:"language_server_id,omitempty"`
	Token            *string `protobuf:"bytes,2,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (x *CancelLanguageServerWork_LanguageServerWork) Reset() {
	*x = CancelLanguageServerWork_LanguageServerWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelLanguageServerWork_LanguageServerWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelLanguageServerWork_LanguageServerWork) ProtoMessage() {}

func (x *CancelLanguageServerWork_LanguageServerWork) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelLanguageServerWork_LanguageServerWork.ProtoReflect.Descriptor instead.
func (*CancelLanguageServerWork_LanguageServerWork) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{95, 1}
}

func (x *CancelLanguageServerWork_LanguageServerWork) GetLanguageServerId() uint64 {
	if x != nil {
		return x.LanguageServerId
	}
	return 0
}

func (x *CancelLanguageServerWork_LanguageServerWork) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

type LanguageServerPromptRequest_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LanguageServerPromptRequest_Info) Reset() {
	*x = LanguageServerPromptRequest_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageServerPromptRequest_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageServerPromptRequest_Info) ProtoMessage() {}

func (x *LanguageServerPromptRequest_Info) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageServerPromptRequest_Info.ProtoReflect.Descriptor instead.
func (*LanguageServerPromptRequest_Info) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{96, 0}
}

type LanguageServerPromptRequest_Warning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LanguageServerPromptRequest_Warning) Reset() {
	*x = LanguageServerPromptRequest_Warning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageServerPromptRequest_Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageServerPromptRequest_Warning) ProtoMessage() {}

func (x *LanguageServerPromptRequest_Warning) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageServerPromptRequest_Warning.ProtoReflect.Descriptor instead.
func (*LanguageServerPromptRequest_Warning) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{96, 1}
}

type LanguageServerPromptRequest_Critical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LanguageServerPromptRequest_Critical) Reset() {
	*x = LanguageServerPromptRequest_Critical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lsp_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageServerPromptRequest_Critical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageServerPromptRequest_Critical) ProtoMessage() {}

func (x *LanguageServerPromptRequest_Critical) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageServerPromptRequest_Critical.ProtoReflect.Descriptor instead.
func (*LanguageServerPromptRequest_Critical) Descriptor() ([]byte, []int) {
	return file_lsp_proto_rawDescGZIP(), []int{96, 2}
}

var File_lsp_proto protoreflect.FileDescriptor

var file_lsp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6c, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22,
	0xbb, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xbb, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0a, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x7e, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0xc8, 0x01, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x25, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x52, 0x65, 0x61, 0x64, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10,
	0x02, 0x22, 0x48, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x4b, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0xed, 0x02, 0x0a, 0x06, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74, 0x66, 0x31, 0x36, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x55, 0x74, 0x66, 0x31, 0x36, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x0e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74, 0x66, 0x31, 0x36, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74, 0x66, 0x31, 0x36, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x55, 0x74, 0x66, 0x31, 0x36, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x55, 0x74, 0x66, 0x31, 0x36, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xd6,
	0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x38, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x12, 0x49, 0x6e, 0x6c, 0x61, 0x79,
	0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x6c, 0x61,
	0x79, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x0a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55,
	0x74, 0x66, 0x31, 0x36, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x81,
	0x01, 0x0a, 0x11, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x4d,
	0x61, 0x63, 0x72, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x19, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x7e, 0x0a, 0x0e, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x44,
	0x6f, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5c, 0x0a, 0x16, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x44,
	0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x77,
	0x65, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x77, 0x65, 0x62, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x77, 0x65, 0x62, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x22,
	0x56, 0x0a, 0x18, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x20, 0x4c, 0x73, 0x70, 0x45, 0x78,
	0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x86, 0x01, 0x0a,
	0x16, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x47, 0x6f, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x1e, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x47,
	0x6f, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x1e, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x26, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x45, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x05, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x11, 0x6f, 0x6c, 0x64,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x6f,
	0x6c, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6c, 0x73, 0x70, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0c, 0x6c, 0x73, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x73, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x11, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x57, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0d, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x10, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52,
	0x0e, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x3a, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x0c, 0x6f,
	0x6c, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x22, 0x2d, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x73, 0x70, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x10, 0x02, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c,
	0x73, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x65, 0x6e, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x26, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70,
	0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65,
	0x6c, 0x70, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x22, 0x8f, 0x02, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x46, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x22, 0x78, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd6, 0x01, 0x0a,
	0x14, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x41, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x0c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xb2, 0x01,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6e, 0x64, 0x22, 0x6f, 0x0a,
	0x0a, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x7f,
	0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5d, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7,
	0x01, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x02, 0x0a, 0x15, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x75, 0x6e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6f, 0x6e, 0x6c, 0x79, 0x55,
	0x6e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x01,
	0x0a, 0x10, 0x4f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x18, 0x4f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x01,
	0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a,
	0x1a, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd6, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x6c, 0x61, 0x79,
	0x48, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x74,
	0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x6c, 0x61,
	0x79, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x52, 0x07, 0x74, 0x6f,
	0x6f, 0x6c, 0x74, 0x69, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22,
	0x77, 0x0a, 0x0e, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x4d, 0x0a, 0x13, 0x49, 0x6e, 0x6c, 0x61,
	0x79, 0x48, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x22, 0x84, 0x03, 0x0a, 0x12, 0x49, 0x6e, 0x6c, 0x61,
	0x79, 0x48, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x52, 0x07,
	0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x55, 0x74, 0x66, 0x31, 0x36, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x46, 0x0a, 0x12, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x74, 0x66, 0x31,
	0x36, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x01, 0x52, 0x10, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x7b,
	0x0a, 0x10, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x74,
	0x69, 0x70, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x19,
	0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xa9, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x6c,
	0x73, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x4c, 0x73, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0f, 0x6c, 0x73, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x53, 0x0a, 0x0f, 0x4c, 0x73, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x22, 0xb1,
	0x01, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x6c, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6c, 0x73, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xc8, 0x03, 0x0a, 0x26, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x40, 0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x54, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x73,
	0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x6c, 0x73, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x10, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52,
	0x0c, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x22, 0xa9, 0x01,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04,
	0x68, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48,
	0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x18, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x69,
	0x6e, 0x74, 0x22, 0x32, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x6c,
	0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65,
	0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x73, 0x70, 0x4c, 0x65, 0x6e, 0x73, 0x22, 0x83, 0x01,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c,
	0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x6c,
	0x65, 0x6e, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6c, 0x65, 0x6e,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x65, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x15,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x02, 0x0a, 0x0a, 0x43, 0x6f,
	0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x26, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x73, 0x70,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6c,
	0x73, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x22, 0x2d, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x65, 0x6e, 0x73, 0x10, 0x02, 0x22, 0x6a, 0x0a, 0x0e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x69, 0x64, 0x22, 0x6a, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x94,
	0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x9b, 0x01, 0x0a, 0x11, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x95, 0x04, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70,
	0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70,
	0x57, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73,
	0x70, 0x57, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b,
	0x45, 0x6e, 0x64, 0x12, 0x76, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x44,
	0x69, 0x73, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x64,
	0x69, 0x73, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x73, 0x0a, 0x1e, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x1b, 0x64, 0x69, 0x73, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x64, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x0c,
	0x4c, 0x73, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0d, 0x69, 0x73, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x4c, 0x73, 0x70, 0x57, 0x6f, 0x72,
	0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0d, 0x69,
	0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69,
	0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x22, 0x0a,
	0x0a, 0x4c, 0x73, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x21, 0x0a, 0x1f, 0x4c, 0x73, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x61, 0x73, 0x65,
	0x64, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x22, 0x20, 0x0a, 0x1e, 0x4c, 0x73, 0x70, 0x44, 0x69, 0x73, 0x6b, 0x42,
	0x61, 0x73, 0x65, 0x64, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x11, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x67,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x4c, 0x6f, 0x67, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x0b, 0x4c, 0x73, 0x70, 0x4c, 0x6f, 0x67, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x67, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x21, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x13,
	0x4f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x22, 0x3a, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x6f,
	0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a,
	0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x22, 0x5b, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x03, 0x0a, 0x18,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x07, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x12,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x6f,
	0x72, 0x6b, 0x1a, 0x28, 0x0a, 0x07, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x73, 0x1a, 0x67, 0x0a, 0x12,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x6f,
	0x72, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x9a, 0x03,
	0x0a, 0x1b, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x50, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x73, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x73, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x06, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x0a, 0x07, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0x0a, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x42, 0x07, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x60, 0x0a, 0x1c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe4, 0x03, 0x0a,
	0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x73, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x09, 0x67, 0x65,
	0x74, 0x5f, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x01, 0x52, 0x08, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x0e, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x6c,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x48, 0x01, 0x52, 0x10, 0x67, 0x65, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x48, 0x01, 0x52,
	0x0b, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x16, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x22, 0x53, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x50, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c,
	0x73, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x4c, 0x73, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x8f, 0x03, 0x0a, 0x0b, 0x4c, 0x73, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f,
	0x68, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x1b, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x6c,
	0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x67, 0x65, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x17, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x46, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x1f, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x4c, 0x73, 0x70,
	0x45, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x17,
	0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x52, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x22, 0x7c, 0x0a, 0x0b, 0x4c, 0x73, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80,
	0x01, 0x0a, 0x14, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46,
	0x6c, 0x79, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x46,
	0x6c, 0x79, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x7f, 0x0a,
	0x13, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x6c, 0x79, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x2a, 0x29,
	0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x2a, 0x25, 0x0a, 0x0d, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x61,
	0x76, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x01,
	0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lsp_proto_rawDescOnce sync.Once
	file_lsp_proto_rawDescData = file_lsp_proto_rawDesc
)

func file_lsp_proto_rawDescGZIP() []byte {
	file_lsp_proto_rawDescOnce.Do(func() {
		file_lsp_proto_rawDescData = protoimpl.X.CompressGZIP(file_lsp_proto_rawDescData)
	})
	return file_lsp_proto_rawDescData
}

var file_lsp_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_lsp_proto_msgTypes = make([]protoimpl.MessageInfo, 118)
var file_lsp_proto_goTypes = []interface{}{
	(MarkupKind)(0),                                     // 0: zed.messages.MarkupKind
	(FormatTrigger)(0),                                  // 1: zed.messages.FormatTrigger
	(DocumentHighlight_Kind)(0),                         // 2: zed.messages.DocumentHighlight.Kind
	(Completion_Source)(0),                              // 3: zed.messages.Completion.Source
	(ResolveState_State)(0),                             // 4: zed.messages.ResolveState.State
	(CodeAction_Kind)(0),                                // 5: zed.messages.CodeAction.Kind
	(*GetDefinition)(nil),                               // 6: zed.messages.GetDefinition
	(*GetDefinitionResponse)(nil),                       // 7: zed.messages.GetDefinitionResponse
	(*GetDeclaration)(nil),                              // 8: zed.messages.GetDeclaration
	(*GetDeclarationResponse)(nil),                      // 9: zed.messages.GetDeclarationResponse
	(*GetTypeDefinition)(nil),                           // 10: zed.messages.GetTypeDefinition
	(*GetTypeDefinitionResponse)(nil),                   // 11: zed.messages.GetTypeDefinitionResponse
	(*GetImplementation)(nil),                           // 12: zed.messages.GetImplementation
	(*GetImplementationResponse)(nil),                   // 13: zed.messages.GetImplementationResponse
	(*GetReferences)(nil),                               // 14: zed.messages.GetReferences
	(*GetReferencesResponse)(nil),                       // 15: zed.messages.GetReferencesResponse
	(*GetDocumentHighlights)(nil),                       // 16: zed.messages.GetDocumentHighlights
	(*GetDocumentHighlightsResponse)(nil),               // 17: zed.messages.GetDocumentHighlightsResponse
	(*LocationLink)(nil),                                // 18: zed.messages.LocationLink
	(*DocumentHighlight)(nil),                           // 19: zed.messages.DocumentHighlight
	(*GetProjectSymbols)(nil),                           // 20: zed.messages.GetProjectSymbols
	(*GetProjectSymbolsResponse)(nil),                   // 21: zed.messages.GetProjectSymbolsResponse
	(*Symbol)(nil),                                      // 22: zed.messages.Symbol
	(*GetDocumentSymbols)(nil),                          // 23: zed.messages.GetDocumentSymbols
	(*GetDocumentSymbolsResponse)(nil),                  // 24: zed.messages.GetDocumentSymbolsResponse
	(*DocumentSymbol)(nil),                              // 25: zed.messages.DocumentSymbol
	(*InlayHints)(nil),                                  // 26: zed.messages.InlayHints
	(*InlayHintsResponse)(nil),                          // 27: zed.messages.InlayHintsResponse
	(*PointUtf16)(nil),                                  // 28: zed.messages.PointUtf16
	(*LspExtExpandMacro)(nil),                           // 29: zed.messages.LspExtExpandMacro
	(*LspExtExpandMacroResponse)(nil),                   // 30: zed.messages.LspExtExpandMacroResponse
	(*LspExtOpenDocs)(nil),                              // 31: zed.messages.LspExtOpenDocs
	(*LspExtOpenDocsResponse)(nil),                      // 32: zed.messages.LspExtOpenDocsResponse
	(*LspExtSwitchSourceHeader)(nil),                    // 33: zed.messages.LspExtSwitchSourceHeader
	(*LspExtSwitchSourceHeaderResponse)(nil),            // 34: zed.messages.LspExtSwitchSourceHeaderResponse
	(*LspExtGoToParentModule)(nil),                      // 35: zed.messages.LspExtGoToParentModule
	(*LspExtGoToParentModuleResponse)(nil),              // 36: zed.messages.LspExtGoToParentModuleResponse
	(*GetCompletionsResponse)(nil),                      // 37: zed.messages.GetCompletionsResponse
	(*ApplyCompletionAdditionalEdits)(nil),              // 38: zed.messages.ApplyCompletionAdditionalEdits
	(*ApplyCompletionAdditionalEditsResponse)(nil),      // 39: zed.messages.ApplyCompletionAdditionalEditsResponse
	(*Completion)(nil),                                  // 40: zed.messages.Completion
	(*GetCodeActions)(nil),                              // 41: zed.messages.GetCodeActions
	(*GetCodeActionsResponse)(nil),                      // 42: zed.messages.GetCodeActionsResponse
	(*GetSignatureHelp)(nil),                            // 43: zed.messages.GetSignatureHelp
	(*GetSignatureHelpResponse)(nil),                    // 44: zed.messages.GetSignatureHelpResponse
	(*SignatureHelp)(nil),                               // 45: zed.messages.SignatureHelp
	(*SignatureInformation)(nil),                        // 46: zed.messages.SignatureInformation
	(*Documentation)(nil),                               // 47: zed.messages.Documentation
	(*ParameterInformation)(nil),                        // 48: zed.messages.ParameterInformation
	(*LabelOffsets)(nil),                                // 49: zed.messages.LabelOffsets
	(*GetHover)(nil),                                    // 50: zed.messages.GetHover
	(*GetHoverResponse)(nil),                            // 51: zed.messages.GetHoverResponse
	(*HoverBlock)(nil),                                  // 52: zed.messages.HoverBlock
	(*ApplyCodeAction)(nil),                             // 53: zed.messages.ApplyCodeAction
	(*ApplyCodeActionResponse)(nil),                     // 54: zed.messages.ApplyCodeActionResponse
	(*PrepareRename)(nil),                               // 55: zed.messages.PrepareRename
	(*PrepareRenameResponse)(nil),                       // 56: zed.messages.PrepareRenameResponse
	(*PerformRename)(nil),                               // 57: zed.messages.PerformRename
	(*OnTypeFormatting)(nil),                            // 58: zed.messages.OnTypeFormatting
	(*OnTypeFormattingResponse)(nil),                    // 59: zed.messages.OnTypeFormattingResponse
	(*LinkedEditingRange)(nil),                          // 60: zed.messages.LinkedEditingRange
	(*LinkedEditingRangeResponse)(nil),                  // 61: zed.messages.LinkedEditingRangeResponse
	(*InlayHint)(nil),                                   // 62: zed.messages.InlayHint
	(*InlayHintLabel)(nil),                              // 63: zed.messages.InlayHintLabel
	(*InlayHintLabelParts)(nil),                         // 64: zed.messages.InlayHintLabelParts
	(*InlayHintLabelPart)(nil),                          // 65: zed.messages.InlayHintLabelPart
	(*InlayHintTooltip)(nil),                            // 66: zed.messages.InlayHintTooltip
	(*InlayHintLabelPartTooltip)(nil),                   // 67: zed.messages.InlayHintLabelPartTooltip
	(*ResolveState)(nil),                                // 68: zed.messages.ResolveState
	(*ResolveCompletionDocumentation)(nil),              // 69: zed.messages.ResolveCompletionDocumentation
	(*ResolveCompletionDocumentationResponse)(nil),      // 70: zed.messages.ResolveCompletionDocumentationResponse
	(*ResolveInlayHint)(nil),                            // 71: zed.messages.ResolveInlayHint
	(*ResolveInlayHintResponse)(nil),                    // 72: zed.messages.ResolveInlayHintResponse
	(*RefreshInlayHints)(nil),                           // 73: zed.messages.RefreshInlayHints
	(*CodeLens)(nil),                                    // 74: zed.messages.CodeLens
	(*GetCodeLens)(nil),                                 // 75: zed.messages.GetCodeLens
	(*GetCodeLensResponse)(nil),                         // 76: zed.messages.GetCodeLensResponse
	(*RefreshCodeLens)(nil),                             // 77: zed.messages.RefreshCodeLens
	(*MarkupContent)(nil),                               // 78: zed.messages.MarkupContent
	(*PerformRenameResponse)(nil),                       // 79: zed.messages.PerformRenameResponse
	(*CodeAction)(nil),                                  // 80: zed.messages.CodeAction
	(*LanguageServer)(nil),                              // 81: zed.messages.LanguageServer
	(*StartLanguageServer)(nil),                         // 82: zed.messages.StartLanguageServer
	(*UpdateDiagnosticSummary)(nil),                     // 83: zed.messages.UpdateDiagnosticSummary
	(*DiagnosticSummary)(nil),                           // 84: zed.messages.DiagnosticSummary
	(*UpdateLanguageServer)(nil),                        // 85: zed.messages.UpdateLanguageServer
	(*LspWorkStart)(nil),                                // 86: zed.messages.LspWorkStart
	(*LspWorkProgress)(nil),                             // 87: zed.messages.LspWorkProgress
	(*LspWorkEnd)(nil),                                  // 88: zed.messages.LspWorkEnd
	(*LspDiskBasedDiagnosticsUpdating)(nil),             // 89: zed.messages.LspDiskBasedDiagnosticsUpdating
	(*LspDiskBasedDiagnosticsUpdated)(nil),              // 90: zed.messages.LspDiskBasedDiagnosticsUpdated
	(*LanguageServerLog)(nil),                           // 91: zed.messages.LanguageServerLog
	(*LspLogTrace)(nil),                                 // 92: zed.messages.LspLogTrace
	(*ApplyCodeActionKind)(nil),                         // 93: zed.messages.ApplyCodeActionKind
	(*ApplyCodeActionKindResponse)(nil),                 // 94: zed.messages.ApplyCodeActionKindResponse
	(*RegisterBufferWithLanguageServers)(nil),           // 95: zed.messages.RegisterBufferWithLanguageServers
	(*OpenBufferForSymbol)(nil),                         // 96: zed.messages.OpenBufferForSymbol
	(*OpenBufferForSymbolResponse)(nil),                 // 97: zed.messages.OpenBufferForSymbolResponse
	(*FormatBuffers)(nil),                               // 98: zed.messages.FormatBuffers
	(*FormatBuffersResponse)(nil),                       // 99: zed.messages.FormatBuffersResponse
	(*GetCompletions)(nil),                              // 100: zed.messages.GetCompletions
	(*CancelLanguageServerWork)(nil),                    // 101: zed.messages.CancelLanguageServerWork
	(*LanguageServerPromptRequest)(nil),                 // 102: zed.messages.LanguageServerPromptRequest
	(*LanguageServerPromptResponse)(nil),                // 103: zed.messages.LanguageServerPromptResponse
	(*MultiLspQuery)(nil),                               // 104: zed.messages.MultiLspQuery
	(*AllLanguageServers)(nil),                          // 105: zed.messages.AllLanguageServers
	(*RestartLanguageServers)(nil),                      // 106: zed.messages.RestartLanguageServers
	(*StopLanguageServers)(nil),                         // 107: zed.messages.StopLanguageServers
	(*MultiLspQueryResponse)(nil),                       // 108: zed.messages.MultiLspQueryResponse
	(*LspResponse)(nil),                                 // 109: zed.messages.LspResponse
	(*LanguageServerIdForName)(nil),                     // 110: zed.messages.LanguageServerIdForName
	(*LanguageServerIdForNameResponse)(nil),             // 111: zed.messages.LanguageServerIdForNameResponse
	(*LspExtRunnables)(nil),                             // 112: zed.messages.LspExtRunnables
	(*LspExtRunnablesResponse)(nil),                     // 113: zed.messages.LspExtRunnablesResponse
	(*LspRunnable)(nil),                                 // 114: zed.messages.LspRunnable
	(*LspExtCancelFlycheck)(nil),                        // 115: zed.messages.LspExtCancelFlycheck
	(*LspExtRunFlycheck)(nil),                           // 116: zed.messages.LspExtRunFlycheck
	(*LspExtClearFlycheck)(nil),                         // 117: zed.messages.LspExtClearFlycheck
	(*ResolveState_LspResolveState)(nil),                // 118: zed.messages.ResolveState.LspResolveState
	(*CancelLanguageServerWork_Buffers)(nil),            // 119: zed.messages.CancelLanguageServerWork.Buffers
	(*CancelLanguageServerWork_LanguageServerWork)(nil), // 120: zed.messages.CancelLanguageServerWork.LanguageServerWork
	(*LanguageServerPromptRequest_Info)(nil),            // 121: zed.messages.LanguageServerPromptRequest.Info
	(*LanguageServerPromptRequest_Warning)(nil),         // 122: zed.messages.LanguageServerPromptRequest.Warning
	(*LanguageServerPromptRequest_Critical)(nil),        // 123: zed.messages.LanguageServerPromptRequest.Critical
	(*Anchor)(nil),                                      // 124: zed.messages.Anchor
	(*VectorClockEntry)(nil),                            // 125: zed.messages.VectorClockEntry
	(*Location)(nil),                                    // 126: zed.messages.Location
	(*Transaction)(nil),                                 // 127: zed.messages.Transaction
	(*ProjectTransaction)(nil),                          // 128: zed.messages.ProjectTransaction
	(*AnchorRange)(nil),                                 // 129: zed.messages.AnchorRange
}
var file_lsp_proto_depIdxs = []int32{
	124, // 0: zed.messages.GetDefinition.position:type_name -> zed.messages.Anchor
	125, // 1: zed.messages.GetDefinition.version:type_name -> zed.messages.VectorClockEntry
	18,  // 2: zed.messages.GetDefinitionResponse.links:type_name -> zed.messages.LocationLink
	124, // 3: zed.messages.GetDeclaration.position:type_name -> zed.messages.Anchor
	125, // 4: zed.messages.GetDeclaration.version:type_name -> zed.messages.VectorClockEntry
	18,  // 5: zed.messages.GetDeclarationResponse.links:type_name -> zed.messages.LocationLink
	124, // 6: zed.messages.GetTypeDefinition.position:type_name -> zed.messages.Anchor
	125, // 7: zed.messages.GetTypeDefinition.version:type_name -> zed.messages.VectorClockEntry
	18,  // 8: zed.messages.GetTypeDefinitionResponse.links:type_name -> zed.messages.LocationLink
	124, // 9: zed.messages.GetImplementation.position:type_name -> zed.messages.Anchor
	125, // 10: zed.messages.GetImplementation.version:type_name -> zed.messages.VectorClockEntry
	18,  // 11: zed.messages.GetImplementationResponse.links:type_name -> zed.messages.LocationLink
	124, // 12: zed.messages.GetReferences.position:type_name -> zed.messages.Anchor
	125, // 13: zed.messages.GetReferences.version:type_name -> zed.messages.VectorClockEntry
	126, // 14: zed.messages.GetReferencesResponse.locations:type_name -> zed.messages.Location
	124, // 15: zed.messages.GetDocumentHighlights.position:type_name -> zed.messages.Anchor
	125, // 16: zed.messages.GetDocumentHighlights.version:type_name -> zed.messages.VectorClockEntry
	19,  // 17: zed.messages.GetDocumentHighlightsResponse.highlights:type_name -> zed.messages.DocumentHighlight
	126, // 18: zed.messages.LocationLink.origin:type_name -> zed.messages.Location
	126, // 19: zed.messages.LocationLink.target:type_name -> zed.messages.Location
	2,   // 20: zed.messages.DocumentHighlight.kind:type_name -> zed.messages.DocumentHighlight.Kind
	124, // 21: zed.messages.DocumentHighlight.start:type_name -> zed.messages.Anchor
	124, // 22: zed.messages.DocumentHighlight.end:type_name -> zed.messages.Anchor
	22,  // 23: zed.messages.GetProjectSymbolsResponse.symbols:type_name -> zed.messages.Symbol
	28,  // 24: zed.messages.Symbol.start:type_name -> zed.messages.PointUtf16
	28,  // 25: zed.messages.Symbol.end:type_name -> zed.messages.PointUtf16
	125, // 26: zed.messages.GetDocumentSymbols.version:type_name -> zed.messages.VectorClockEntry
	25,  // 27: zed.messages.GetDocumentSymbolsResponse.symbols:type_name -> zed.messages.DocumentSymbol
	28,  // 28: zed.messages.DocumentSymbol.start:type_name -> zed.messages.PointUtf16
	28,  // 29: zed.messages.DocumentSymbol.end:type_name -> zed.messages.PointUtf16
	28,  // 30: zed.messages.DocumentSymbol.selection_start:type_name -> zed.messages.PointUtf16
	28,  // 31: zed.messages.DocumentSymbol.selection_end:type_name -> zed.messages.PointUtf16
	25,  // 32: zed.messages.DocumentSymbol.children:type_name -> zed.messages.DocumentSymbol
	124, // 33: zed.messages.InlayHints.start:type_name -> zed.messages.Anchor
	124, // 34: zed.messages.InlayHints.end:type_name -> zed.messages.Anchor
	125, // 35: zed.messages.InlayHints.version:type_name -> zed.messages.VectorClockEntry
	62,  // 36: zed.messages.InlayHintsResponse.hints:type_name -> zed.messages.InlayHint
	125, // 37: zed.messages.InlayHintsResponse.version:type_name -> zed.messages.VectorClockEntry
	124, // 38: zed.messages.LspExtExpandMacro.position:type_name -> zed.messages.Anchor
	124, // 39: zed.messages.LspExtOpenDocs.position:type_name -> zed.messages.Anchor
	124, // 40: zed.messages.LspExtGoToParentModule.position:type_name -> zed.messages.Anchor
	18,  // 41: zed.messages.LspExtGoToParentModuleResponse.links:type_name -> zed.messages.LocationLink
	40,  // 42: zed.messages.GetCompletionsResponse.completions:type_name -> zed.messages.Completion
	125, // 43: zed.messages.GetCompletionsResponse.version:type_name -> zed.messages.VectorClockEntry
	40,  // 44: zed.messages.ApplyCompletionAdditionalEdits.completion:type_name -> zed.messages.Completion
	127, // 45: zed.messages.ApplyCompletionAdditionalEditsResponse.transaction:type_name -> zed.messages.Transaction
	124, // 46: zed.messages.Completion.old_replace_start:type_name -> zed.messages.Anchor
	124, // 47: zed.messages.Completion.old_replace_end:type_name -> zed.messages.Anchor
	3,   // 48: zed.messages.Completion.source:type_name -> zed.messages.Completion.Source
	124, // 49: zed.messages.Completion.buffer_word_start:type_name -> zed.messages.Anchor
	124, // 50: zed.messages.Completion.buffer_word_end:type_name -> zed.messages.Anchor
	124, // 51: zed.messages.Completion.old_insert_start:type_name -> zed.messages.Anchor
	124, // 52: zed.messages.Completion.old_insert_end:type_name -> zed.messages.Anchor
	124, // 53: zed.messages.GetCodeActions.start:type_name -> zed.messages.Anchor
	124, // 54: zed.messages.GetCodeActions.end:type_name -> zed.messages.Anchor
	125, // 55: zed.messages.GetCodeActions.version:type_name -> zed.messages.VectorClockEntry
	80,  // 56: zed.messages.GetCodeActionsResponse.actions:type_name -> zed.messages.CodeAction
	125, // 57: zed.messages.GetCodeActionsResponse.version:type_name -> zed.messages.VectorClockEntry
	124, // 58: zed.messages.GetSignatureHelp.position:type_name -> zed.messages.Anchor
	125, // 59: zed.messages.GetSignatureHelp.version:type_name -> zed.messages.VectorClockEntry
	45,  // 60: zed.messages.GetSignatureHelpResponse.signature_help:type_name -> zed.messages.SignatureHelp
	46,  // 61: zed.messages.SignatureHelp.signatures:type_name -> zed.messages.SignatureInformation
	47,  // 62: zed.messages.SignatureInformation.documentation:type_name -> zed.messages.Documentation
	48,  // 63: zed.messages.SignatureInformation.parameters:type_name -> zed.messages.ParameterInformation
	78,  // 64: zed.messages.Documentation.markup_content:type_name -> zed.messages.MarkupContent
	49,  // 65: zed.messages.ParameterInformation.label_offsets:type_name -> zed.messages.LabelOffsets
	47,  // 66: zed.messages.ParameterInformation.documentation:type_name -> zed.messages.Documentation
	124, // 67: zed.messages.GetHover.position:type_name -> zed.messages.Anchor
	125, // 68: zed.messages.GetHover.version:type_name -> zed.messages.VectorClockEntry
	124, // 69: zed.messages.GetHoverResponse.start:type_name -> zed.messages.Anchor
	124, // 70: zed.messages.GetHoverResponse.end:type_name -> zed.messages.Anchor
	52,  // 71: zed.messages.GetHoverResponse.contents:type_name -> zed.messages.HoverBlock
	80,  // 72: zed.messages.ApplyCodeAction.action:type_name -> zed.messages.CodeAction
	128, // 73: zed.messages.ApplyCodeActionResponse.transaction:type_name -> zed.messages.ProjectTransaction
	124, // 74: zed.messages.PrepareRename.position:type_name -> zed.messages.Anchor
	125, // 75: zed.messages.PrepareRename.version:type_name -> zed.messages.VectorClockEntry
	124, // 76: zed.messages.PrepareRenameResponse.start:type_name -> zed.messages.Anchor
	124, // 77: zed.messages.PrepareRenameResponse.end:type_name -> zed.messages.Anchor
	125, // 78: zed.messages.PrepareRenameResponse.version:type_name -> zed.messages.VectorClockEntry
	124, // 79: zed.messages.PerformRename.position:type_name -> zed.messages.Anchor
	125, // 80: zed.messages.PerformRename.version:type_name -> zed.messages.VectorClockEntry
	124, // 81: zed.messages.OnTypeFormatting.position:type_name -> zed.messages.Anchor
	125, // 82: zed.messages.OnTypeFormatting.version:type_name -> zed.messages.VectorClockEntry
	127, // 83: zed.messages.OnTypeFormattingResponse.transaction:type_name -> zed.messages.Transaction
	124, // 84: zed.messages.LinkedEditingRange.position:type_name -> zed.messages.Anchor
	125, // 85: zed.messages.LinkedEditingRange.version:type_name -> zed.messages.VectorClockEntry
	129, // 86: zed.messages.LinkedEditingRangeResponse.items:type_name -> zed.messages.AnchorRange
	125, // 87: zed.messages.LinkedEditingRangeResponse.version:type_name -> zed.messages.VectorClockEntry
	124, // 88: zed.messages.InlayHint.position:type_name -> zed.messages.Anchor
	63,  // 89: zed.messages.InlayHint.label:type_name -> zed.messages.InlayHintLabel
	66,  // 90: zed.messages.InlayHint.tooltip:type_name -> zed.messages.InlayHintTooltip
	68,  // 91: zed.messages.InlayHint.resolve_state:type_name -> zed.messages.ResolveState
	64,  // 92: zed.messages.InlayHintLabel.label_parts:type_name -> zed.messages.InlayHintLabelParts
	65,  // 93: zed.messages.InlayHintLabelParts.parts:type_name -> zed.messages.InlayHintLabelPart
	67,  // 94: zed.messages.InlayHintLabelPart.tooltip:type_name -> zed.messages.InlayHintLabelPartTooltip
	28,  // 95: zed.messages.InlayHintLabelPart.location_range_start:type_name -> zed.messages.PointUtf16
	28,  // 96: zed.messages.InlayHintLabelPart.location_range_end:type_name -> zed.messages.PointUtf16
	78,  // 97: zed.messages.InlayHintTooltip.markup_content:type_name -> zed.messages.MarkupContent
	78,  // 98: zed.messages.InlayHintLabelPartTooltip.markup_content:type_name -> zed.messages.MarkupContent
	4,   // 99: zed.messages.ResolveState.state:type_name -> zed.messages.ResolveState.State
	118, // 100: zed.messages.ResolveState.lsp_resolve_state:type_name -> zed.messages.ResolveState.LspResolveState
	124, // 101: zed.messages.ResolveCompletionDocumentationResponse.old_replace_start:type_name -> zed.messages.Anchor
	124, // 102: zed.messages.ResolveCompletionDocumentationResponse.old_replace_end:type_name -> zed.messages.Anchor
	124, // 103: zed.messages.ResolveCompletionDocumentationResponse.old_insert_start:type_name -> zed.messages.Anchor
	124, // 104: zed.messages.ResolveCompletionDocumentationResponse.old_insert_end:type_name -> zed.messages.Anchor
	62,  // 105: zed.messages.ResolveInlayHint.hint:type_name -> zed.messages.InlayHint
	62,  // 106: zed.messages.ResolveInlayHintResponse.hint:type_name -> zed.messages.InlayHint
	125, // 107: zed.messages.GetCodeLens.version:type_name -> zed.messages.VectorClockEntry
	80,  // 108: zed.messages.GetCodeLensResponse.lens_actions:type_name -> zed.messages.CodeAction
	125, // 109: zed.messages.GetCodeLensResponse.version:type_name -> zed.messages.VectorClockEntry
	128, // 110: zed.messages.PerformRenameResponse.transaction:type_name -> zed.messages.ProjectTransaction
	124, // 111: zed.messages.CodeAction.start:type_name -> zed.messages.Anchor
	124, // 112: zed.messages.CodeAction.end:type_name -> zed.messages.Anchor
	5,   // 113: zed.messages.CodeAction.kind:type_name -> zed.messages.CodeAction.Kind
	81,  // 114: zed.messages.StartLanguageServer.server:type_name -> zed.messages.LanguageServer
	84,  // 115: zed.messages.UpdateDiagnosticSummary.summary:type_name -> zed.messages.DiagnosticSummary
	86,  // 116: zed.messages.UpdateLanguageServer.work_start:type_name -> zed.messages.LspWorkStart
	87,  // 117: zed.messages.UpdateLanguageServer.work_progress:type_name -> zed.messages.LspWorkProgress
	88,  // 118: zed.messages.UpdateLanguageServer.work_end:type_name -> zed.messages.LspWorkEnd
	89,  // 119: zed.messages.UpdateLanguageServer.disk_based_diagnostics_updating:type_name -> zed.messages.LspDiskBasedDiagnosticsUpdating
	90,  // 120: zed.messages.UpdateLanguageServer.disk_based_diagnostics_updated:type_name -> zed.messages.LspDiskBasedDiagnosticsUpdated
	92,  // 121: zed.messages.LanguageServerLog.log_trace:type_name -> zed.messages.LspLogTrace
	128, // 122: zed.messages.ApplyCodeActionKindResponse.transaction:type_name -> zed.messages.ProjectTransaction
	22,  // 123: zed.messages.OpenBufferForSymbol.symbol:type_name -> zed.messages.Symbol
	1,   // 124: zed.messages.FormatBuffers.trigger:type_name -> zed.messages.FormatTrigger
	128, // 125: zed.messages.FormatBuffersResponse.transaction:type_name -> zed.messages.ProjectTransaction
	124, // 126: zed.messages.GetCompletions.position:type_name -> zed.messages.Anchor
	125, // 127: zed.messages.GetCompletions.version:type_name -> zed.messages.VectorClockEntry
	119, // 128: zed.messages.CancelLanguageServerWork.buffers:type_name -> zed.messages.CancelLanguageServerWork.Buffers
	120, // 129: zed.messages.CancelLanguageServerWork.language_server_work:type_name -> zed.messages.CancelLanguageServerWork.LanguageServerWork
	121, // 130: zed.messages.LanguageServerPromptRequest.info:type_name -> zed.messages.LanguageServerPromptRequest.Info
	122, // 131: zed.messages.LanguageServerPromptRequest.warning:type_name -> zed.messages.LanguageServerPromptRequest.Warning
	123, // 132: zed.messages.LanguageServerPromptRequest.critical:type_name -> zed.messages.LanguageServerPromptRequest.Critical
	125, // 133: zed.messages.MultiLspQuery.version:type_name -> zed.messages.VectorClockEntry
	105, // 134: zed.messages.MultiLspQuery.all:type_name -> zed.messages.AllLanguageServers
	50,  // 135: zed.messages.MultiLspQuery.get_hover:type_name -> zed.messages.GetHover
	41,  // 136: zed.messages.MultiLspQuery.get_code_actions:type_name -> zed.messages.GetCodeActions
	43,  // 137: zed.messages.MultiLspQuery.get_signature_help:type_name -> zed.messages.GetSignatureHelp
	75,  // 138: zed.messages.MultiLspQuery.get_code_lens:type_name -> zed.messages.GetCodeLens
	109, // 139: zed.messages.MultiLspQueryResponse.responses:type_name -> zed.messages.LspResponse
	51,  // 140: zed.messages.LspResponse.get_hover_response:type_name -> zed.messages.GetHoverResponse
	42,  // 141: zed.messages.LspResponse.get_code_actions_response:type_name -> zed.messages.GetCodeActionsResponse
	44,  // 142: zed.messages.LspResponse.get_signature_help_response:type_name -> zed.messages.GetSignatureHelpResponse
	76,  // 143: zed.messages.LspResponse.get_code_lens_response:type_name -> zed.messages.GetCodeLensResponse
	124, // 144: zed.messages.LspExtRunnables.position:type_name -> zed.messages.Anchor
	114, // 145: zed.messages.LspExtRunnablesResponse.runnables:type_name -> zed.messages.LspRunnable
	18,  // 146: zed.messages.LspRunnable.location:type_name -> zed.messages.LocationLink
	147, // [147:147] is the sub-list for method output_type
	147, // [147:147] is the sub-list for method input_type
	147, // [147:147] is the sub-list for extension type_name
	147, // [147:147] is the sub-list for extension extendee
	0,   // [0:147] is the sub-list for field type_name
}

func init() { file_lsp_proto_init() }
func file_lsp_proto_init() {
	if File_lsp_proto != nil {
		return
	}
	file_core_proto_init()
	file_worktree_proto_init()
	file_buffer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lsp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefinitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeclaration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeclarationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTypeDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTypeDefinitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImplementation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImplementationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentHighlights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentHighlightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentHighlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectSymbols); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectSymbolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentSymbols); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentSymbolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlayHints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlayHintsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointUtf16); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspExtExpandMacro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspExtExpandMacroResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspExtOpenDocs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspExtOpenDocsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspExtSwitchSourceHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspExtSwitchSourceHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspExtGoToParentModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspExtGoToParentModuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompletionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyCompletionAdditionalEdits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyCompletionAdditionalEditsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Completion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeActionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignatureHelp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignatureHelpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureHelp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Documentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelOffsets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHoverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoverBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyCodeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyCodeActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareRename); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareRenameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformRename); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnTypeFormatting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnTypeFormattingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedEditingRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedEditingRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlayHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlayHintLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlayHintLabelParts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlayHintLabelPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlayHintTooltip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlayHintLabelPartTooltip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveCompletionDocumentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveCompletionDocumentationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveInlayHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveInlayHintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshInlayHints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeLens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeLens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeLensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshCodeLens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkupContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformRenameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartLanguageServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiagnosticSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLanguageServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspWorkStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspWorkProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspWorkEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspDiskBasedDiagnosticsUpdating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspDiskBasedDiagnosticsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageServerLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspLogTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyCodeActionKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyCodeActionKindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterBufferWithLanguageServers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenBufferForSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenBufferForSymbolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatBuffers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatBuffersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompletions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelLanguageServerWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageServerPromptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageServerPromptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiLspQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllLanguageServers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartLanguageServers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopLanguageServers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiLspQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageServerIdForName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageServerIdForNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspExtRunnables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspExtRunnablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspRunnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspExtCancelFlycheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspExtRunFlycheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LspExtClearFlycheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveState_LspResolveState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelLanguageServerWork_Buffers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelLanguageServerWork_LanguageServerWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageServerPromptRequest_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageServerPromptRequest_Warning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lsp_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageServerPromptRequest_Critical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lsp_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*Documentation_Value)(nil),
		(*Documentation_MarkupContent)(nil),
	}
	file_lsp_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*ParameterInformation_Simple)(nil),
		(*ParameterInformation_LabelOffsets)(nil),
	}
	file_lsp_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*InlayHintLabel_Value)(nil),
		(*InlayHintLabel_LabelParts)(nil),
	}
	file_lsp_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*InlayHintTooltip_Value)(nil),
		(*InlayHintTooltip_MarkupContent)(nil),
	}
	file_lsp_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*InlayHintLabelPartTooltip_Value)(nil),
		(*InlayHintLabelPartTooltip_MarkupContent)(nil),
	}
	file_lsp_proto_msgTypes[75].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[79].OneofWrappers = []interface{}{
		(*UpdateLanguageServer_WorkStart)(nil),
		(*UpdateLanguageServer_WorkProgress)(nil),
		(*UpdateLanguageServer_WorkEnd)(nil),
		(*UpdateLanguageServer_DiskBasedDiagnosticsUpdating)(nil),
		(*UpdateLanguageServer_DiskBasedDiagnosticsUpdated)(nil),
	}
	file_lsp_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[81].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[85].OneofWrappers = []interface{}{
		(*LanguageServerLog_LogMessageType)(nil),
		(*LanguageServerLog_LogTrace)(nil),
	}
	file_lsp_proto_msgTypes[86].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[95].OneofWrappers = []interface{}{
		(*CancelLanguageServerWork_Buffers_)(nil),
		(*CancelLanguageServerWork_LanguageServerWork_)(nil),
	}
	file_lsp_proto_msgTypes[96].OneofWrappers = []interface{}{
		(*LanguageServerPromptRequest_Info_)(nil),
		(*LanguageServerPromptRequest_Warning_)(nil),
		(*LanguageServerPromptRequest_Critical_)(nil),
	}
	file_lsp_proto_msgTypes[97].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[98].OneofWrappers = []interface{}{
		(*MultiLspQuery_All)(nil),
		(*MultiLspQuery_GetHover)(nil),
		(*MultiLspQuery_GetCodeActions)(nil),
		(*MultiLspQuery_GetSignatureHelp)(nil),
		(*MultiLspQuery_GetCodeLens)(nil),
	}
	file_lsp_proto_msgTypes[103].OneofWrappers = []interface{}{
		(*LspResponse_GetHoverResponse)(nil),
		(*LspResponse_GetCodeActionsResponse)(nil),
		(*LspResponse_GetSignatureHelpResponse)(nil),
		(*LspResponse_GetCodeLensResponse)(nil),
	}
	file_lsp_proto_msgTypes[105].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[106].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[108].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[112].OneofWrappers = []interface{}{}
	file_lsp_proto_msgTypes[114].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lsp_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   118,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lsp_proto_goTypes,
		DependencyIndexes: file_lsp_proto_depIdxs,
		EnumInfos:         file_lsp_proto_enumTypes,
		MessageInfos:      file_lsp_proto_msgTypes,
	}.Build()
	File_lsp_proto = out.File
	file_lsp_proto_rawDesc = nil
	file_lsp_proto_goTypes = nil
	file_lsp_proto_depIdxs = nil
}
