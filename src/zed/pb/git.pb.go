// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: git.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GitStatus int32

const (
	GitStatus_Added       GitStatus = 0
	GitStatus_Modified    GitStatus = 1
	GitStatus_Conflict    GitStatus = 2
	GitStatus_Deleted     GitStatus = 3
	GitStatus_Updated     GitStatus = 4
	GitStatus_TypeChanged GitStatus = 5
	GitStatus_Renamed     GitStatus = 6
	GitStatus_Copied      GitStatus = 7
	GitStatus_Unmodified  GitStatus = 8
)

// Enum value maps for GitStatus.
var (
	GitStatus_name = map[int32]string{
		0: "Added",
		1: "Modified",
		2: "Conflict",
		3: "Deleted",
		4: "Updated",
		5: "TypeChanged",
		6: "Renamed",
		7: "Copied",
		8: "Unmodified",
	}
	GitStatus_value = map[string]int32{
		"Added":       0,
		"Modified":    1,
		"Conflict":    2,
		"Deleted":     3,
		"Updated":     4,
		"TypeChanged": 5,
		"Renamed":     6,
		"Copied":      7,
		"Unmodified":  8,
	}
)

func (x GitStatus) Enum() *GitStatus {
	p := new(GitStatus)
	*p = x
	return p
}

func (x GitStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_git_proto_enumTypes[0].Descriptor()
}

func (GitStatus) Type() protoreflect.EnumType {
	return &file_git_proto_enumTypes[0]
}

func (x GitStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitStatus.Descriptor instead.
func (GitStatus) EnumDescriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{0}
}

type UpdateDiffBases_Mode int32

const (
	// No collaborator is using the unstaged diff.
	UpdateDiffBases_HEAD_ONLY UpdateDiffBases_Mode = 0
	// No collaborator is using the diff from HEAD.
	UpdateDiffBases_INDEX_ONLY UpdateDiffBases_Mode = 1
	// Both the unstaged and uncommitted diffs are demanded,
	// and the contents of the index and HEAD are the same for this path.
	UpdateDiffBases_INDEX_MATCHES_HEAD UpdateDiffBases_Mode = 2
	// Both the unstaged and uncommitted diffs are demanded,
	// and the contents of the index and HEAD differ for this path,
	// where None means the path doesn't exist in that state of the repo.
	UpdateDiffBases_INDEX_AND_HEAD UpdateDiffBases_Mode = 3
)

// Enum value maps for UpdateDiffBases_Mode.
var (
	UpdateDiffBases_Mode_name = map[int32]string{
		0: "HEAD_ONLY",
		1: "INDEX_ONLY",
		2: "INDEX_MATCHES_HEAD",
		3: "INDEX_AND_HEAD",
	}
	UpdateDiffBases_Mode_value = map[string]int32{
		"HEAD_ONLY":          0,
		"INDEX_ONLY":         1,
		"INDEX_MATCHES_HEAD": 2,
		"INDEX_AND_HEAD":     3,
	}
)

func (x UpdateDiffBases_Mode) Enum() *UpdateDiffBases_Mode {
	p := new(UpdateDiffBases_Mode)
	*p = x
	return p
}

func (x UpdateDiffBases_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateDiffBases_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_git_proto_enumTypes[1].Descriptor()
}

func (UpdateDiffBases_Mode) Type() protoreflect.EnumType {
	return &file_git_proto_enumTypes[1]
}

func (x UpdateDiffBases_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateDiffBases_Mode.Descriptor instead.
func (UpdateDiffBases_Mode) EnumDescriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{1, 0}
}

type OpenUncommittedDiffResponse_Mode int32

const (
	OpenUncommittedDiffResponse_INDEX_MATCHES_HEAD OpenUncommittedDiffResponse_Mode = 0
	OpenUncommittedDiffResponse_INDEX_AND_HEAD     OpenUncommittedDiffResponse_Mode = 1
)

// Enum value maps for OpenUncommittedDiffResponse_Mode.
var (
	OpenUncommittedDiffResponse_Mode_name = map[int32]string{
		0: "INDEX_MATCHES_HEAD",
		1: "INDEX_AND_HEAD",
	}
	OpenUncommittedDiffResponse_Mode_value = map[string]int32{
		"INDEX_MATCHES_HEAD": 0,
		"INDEX_AND_HEAD":     1,
	}
)

func (x OpenUncommittedDiffResponse_Mode) Enum() *OpenUncommittedDiffResponse_Mode {
	p := new(OpenUncommittedDiffResponse_Mode)
	*p = x
	return p
}

func (x OpenUncommittedDiffResponse_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenUncommittedDiffResponse_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_git_proto_enumTypes[2].Descriptor()
}

func (OpenUncommittedDiffResponse_Mode) Type() protoreflect.EnumType {
	return &file_git_proto_enumTypes[2]
}

func (x OpenUncommittedDiffResponse_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenUncommittedDiffResponse_Mode.Descriptor instead.
func (OpenUncommittedDiffResponse_Mode) EnumDescriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{5, 0}
}

type GitDiff_DiffType int32

const (
	GitDiff_HEAD_TO_WORKTREE GitDiff_DiffType = 0
	GitDiff_HEAD_TO_INDEX    GitDiff_DiffType = 1
)

// Enum value maps for GitDiff_DiffType.
var (
	GitDiff_DiffType_name = map[int32]string{
		0: "HEAD_TO_WORKTREE",
		1: "HEAD_TO_INDEX",
	}
	GitDiff_DiffType_value = map[string]int32{
		"HEAD_TO_WORKTREE": 0,
		"HEAD_TO_INDEX":    1,
	}
)

func (x GitDiff_DiffType) Enum() *GitDiff_DiffType {
	p := new(GitDiff_DiffType)
	*p = x
	return p
}

func (x GitDiff_DiffType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitDiff_DiffType) Descriptor() protoreflect.EnumDescriptor {
	return file_git_proto_enumTypes[3].Descriptor()
}

func (GitDiff_DiffType) Type() protoreflect.EnumType {
	return &file_git_proto_enumTypes[3]
}

func (x GitDiff_DiffType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitDiff_DiffType.Descriptor instead.
func (GitDiff_DiffType) EnumDescriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{21, 0}
}

type GitReset_ResetMode int32

const (
	GitReset_SOFT  GitReset_ResetMode = 0
	GitReset_MIXED GitReset_ResetMode = 1
)

// Enum value maps for GitReset_ResetMode.
var (
	GitReset_ResetMode_name = map[int32]string{
		0: "SOFT",
		1: "MIXED",
	}
	GitReset_ResetMode_value = map[string]int32{
		"SOFT":  0,
		"MIXED": 1,
	}
)

func (x GitReset_ResetMode) Enum() *GitReset_ResetMode {
	p := new(GitReset_ResetMode)
	*p = x
	return p
}

func (x GitReset_ResetMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitReset_ResetMode) Descriptor() protoreflect.EnumDescriptor {
	return file_git_proto_enumTypes[4].Descriptor()
}

func (GitReset_ResetMode) Type() protoreflect.EnumType {
	return &file_git_proto_enumTypes[4]
}

func (x GitReset_ResetMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitReset_ResetMode.Descriptor instead.
func (GitReset_ResetMode) EnumDescriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{31, 0}
}

type Push_PushOptions int32

const (
	Push_SET_UPSTREAM Push_PushOptions = 0
	Push_FORCE        Push_PushOptions = 1
)

// Enum value maps for Push_PushOptions.
var (
	Push_PushOptions_name = map[int32]string{
		0: "SET_UPSTREAM",
		1: "FORCE",
	}
	Push_PushOptions_value = map[string]int32{
		"SET_UPSTREAM": 0,
		"FORCE":        1,
	}
)

func (x Push_PushOptions) Enum() *Push_PushOptions {
	p := new(Push_PushOptions)
	*p = x
	return p
}

func (x Push_PushOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Push_PushOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_git_proto_enumTypes[5].Descriptor()
}

func (Push_PushOptions) Type() protoreflect.EnumType {
	return &file_git_proto_enumTypes[5]
}

func (x Push_PushOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Push_PushOptions.Descriptor instead.
func (Push_PushOptions) EnumDescriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{38, 0}
}

type GitBranchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branches []*Branch `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
}

func (x *GitBranchesResponse) Reset() {
	*x = GitBranchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitBranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitBranchesResponse) ProtoMessage() {}

func (x *GitBranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitBranchesResponse.ProtoReflect.Descriptor instead.
func (*GitBranchesResponse) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{0}
}

func (x *GitBranchesResponse) GetBranches() []*Branch {
	if x != nil {
		return x.Branches
	}
	return nil
}

type UpdateDiffBases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     uint64               `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId      uint64               `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	StagedText    *string              `protobuf:"bytes,3,opt,name=staged_text,json=stagedText,proto3,oneof" json:"staged_text,omitempty"`
	CommittedText *string              `protobuf:"bytes,4,opt,name=committed_text,json=committedText,proto3,oneof" json:"committed_text,omitempty"`
	Mode          UpdateDiffBases_Mode `protobuf:"varint,5,opt,name=mode,proto3,enum=zed.messages.UpdateDiffBases_Mode" json:"mode,omitempty"`
}

func (x *UpdateDiffBases) Reset() {
	*x = UpdateDiffBases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiffBases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiffBases) ProtoMessage() {}

func (x *UpdateDiffBases) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiffBases.ProtoReflect.Descriptor instead.
func (*UpdateDiffBases) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateDiffBases) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateDiffBases) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *UpdateDiffBases) GetStagedText() string {
	if x != nil && x.StagedText != nil {
		return *x.StagedText
	}
	return ""
}

func (x *UpdateDiffBases) GetCommittedText() string {
	if x != nil && x.CommittedText != nil {
		return *x.CommittedText
	}
	return ""
}

func (x *UpdateDiffBases) GetMode() UpdateDiffBases_Mode {
	if x != nil {
		return x.Mode
	}
	return UpdateDiffBases_HEAD_ONLY
}

type OpenUnstagedDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64 `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
}

func (x *OpenUnstagedDiff) Reset() {
	*x = OpenUnstagedDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenUnstagedDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenUnstagedDiff) ProtoMessage() {}

func (x *OpenUnstagedDiff) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenUnstagedDiff.ProtoReflect.Descriptor instead.
func (*OpenUnstagedDiff) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{2}
}

func (x *OpenUnstagedDiff) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *OpenUnstagedDiff) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

type OpenUnstagedDiffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StagedText *string `protobuf:"bytes,1,opt,name=staged_text,json=stagedText,proto3,oneof" json:"staged_text,omitempty"`
}

func (x *OpenUnstagedDiffResponse) Reset() {
	*x = OpenUnstagedDiffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenUnstagedDiffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenUnstagedDiffResponse) ProtoMessage() {}

func (x *OpenUnstagedDiffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenUnstagedDiffResponse.ProtoReflect.Descriptor instead.
func (*OpenUnstagedDiffResponse) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{3}
}

func (x *OpenUnstagedDiffResponse) GetStagedText() string {
	if x != nil && x.StagedText != nil {
		return *x.StagedText
	}
	return ""
}

type OpenUncommittedDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64 `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
}

func (x *OpenUncommittedDiff) Reset() {
	*x = OpenUncommittedDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenUncommittedDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenUncommittedDiff) ProtoMessage() {}

func (x *OpenUncommittedDiff) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenUncommittedDiff.ProtoReflect.Descriptor instead.
func (*OpenUncommittedDiff) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{4}
}

func (x *OpenUncommittedDiff) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *OpenUncommittedDiff) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

type OpenUncommittedDiffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StagedText    *string                          `protobuf:"bytes,1,opt,name=staged_text,json=stagedText,proto3,oneof" json:"staged_text,omitempty"`
	CommittedText *string                          `protobuf:"bytes,2,opt,name=committed_text,json=committedText,proto3,oneof" json:"committed_text,omitempty"`
	Mode          OpenUncommittedDiffResponse_Mode `protobuf:"varint,3,opt,name=mode,proto3,enum=zed.messages.OpenUncommittedDiffResponse_Mode" json:"mode,omitempty"`
}

func (x *OpenUncommittedDiffResponse) Reset() {
	*x = OpenUncommittedDiffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenUncommittedDiffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenUncommittedDiffResponse) ProtoMessage() {}

func (x *OpenUncommittedDiffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenUncommittedDiffResponse.ProtoReflect.Descriptor instead.
func (*OpenUncommittedDiffResponse) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{5}
}

func (x *OpenUncommittedDiffResponse) GetStagedText() string {
	if x != nil && x.StagedText != nil {
		return *x.StagedText
	}
	return ""
}

func (x *OpenUncommittedDiffResponse) GetCommittedText() string {
	if x != nil && x.CommittedText != nil {
		return *x.CommittedText
	}
	return ""
}

func (x *OpenUncommittedDiffResponse) GetMode() OpenUncommittedDiffResponse_Mode {
	if x != nil {
		return x.Mode
	}
	return OpenUncommittedDiffResponse_INDEX_MATCHES_HEAD
}

type SetIndexText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64  `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Path         string  `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Text         *string `protobuf:"bytes,5,opt,name=text,proto3,oneof" json:"text,omitempty"`
}

func (x *SetIndexText) Reset() {
	*x = SetIndexText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIndexText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIndexText) ProtoMessage() {}

func (x *SetIndexText) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIndexText.ProtoReflect.Descriptor instead.
func (*SetIndexText) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{6}
}

func (x *SetIndexText) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SetIndexText) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *SetIndexText) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SetIndexText) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type GetPermalinkToLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64 `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Selection *Range `protobuf:"bytes,3,opt,name=selection,proto3" json:"selection,omitempty"`
}

func (x *GetPermalinkToLine) Reset() {
	*x = GetPermalinkToLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPermalinkToLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermalinkToLine) ProtoMessage() {}

func (x *GetPermalinkToLine) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermalinkToLine.ProtoReflect.Descriptor instead.
func (*GetPermalinkToLine) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{7}
}

func (x *GetPermalinkToLine) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetPermalinkToLine) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *GetPermalinkToLine) GetSelection() *Range {
	if x != nil {
		return x.Selection
	}
	return nil
}

type GetPermalinkToLineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permalink string `protobuf:"bytes,1,opt,name=permalink,proto3" json:"permalink,omitempty"`
}

func (x *GetPermalinkToLineResponse) Reset() {
	*x = GetPermalinkToLineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPermalinkToLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermalinkToLineResponse) ProtoMessage() {}

func (x *GetPermalinkToLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermalinkToLineResponse.ProtoReflect.Descriptor instead.
func (*GetPermalinkToLineResponse) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{8}
}

func (x *GetPermalinkToLineResponse) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

type Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHead           bool           `protobuf:"varint,1,opt,name=is_head,json=isHead,proto3" json:"is_head,omitempty"`
	Name             string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UnixTimestamp    *uint64        `protobuf:"varint,3,opt,name=unix_timestamp,json=unixTimestamp,proto3,oneof" json:"unix_timestamp,omitempty"`
	Upstream         *GitUpstream   `protobuf:"bytes,4,opt,name=upstream,proto3,oneof" json:"upstream,omitempty"`
	MostRecentCommit *CommitSummary `protobuf:"bytes,5,opt,name=most_recent_commit,json=mostRecentCommit,proto3,oneof" json:"most_recent_commit,omitempty"`
}

func (x *Branch) Reset() {
	*x = Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Branch) ProtoMessage() {}

func (x *Branch) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Branch.ProtoReflect.Descriptor instead.
func (*Branch) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{9}
}

func (x *Branch) GetIsHead() bool {
	if x != nil {
		return x.IsHead
	}
	return false
}

func (x *Branch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Branch) GetUnixTimestamp() uint64 {
	if x != nil && x.UnixTimestamp != nil {
		return *x.UnixTimestamp
	}
	return 0
}

func (x *Branch) GetUpstream() *GitUpstream {
	if x != nil {
		return x.Upstream
	}
	return nil
}

func (x *Branch) GetMostRecentCommit() *CommitSummary {
	if x != nil {
		return x.MostRecentCommit
	}
	return nil
}

type GitUpstream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefName  string            `protobuf:"bytes,1,opt,name=ref_name,json=refName,proto3" json:"ref_name,omitempty"`
	Tracking *UpstreamTracking `protobuf:"bytes,2,opt,name=tracking,proto3,oneof" json:"tracking,omitempty"`
}

func (x *GitUpstream) Reset() {
	*x = GitUpstream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitUpstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitUpstream) ProtoMessage() {}

func (x *GitUpstream) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitUpstream.ProtoReflect.Descriptor instead.
func (*GitUpstream) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{10}
}

func (x *GitUpstream) GetRefName() string {
	if x != nil {
		return x.RefName
	}
	return ""
}

func (x *GitUpstream) GetTracking() *UpstreamTracking {
	if x != nil {
		return x.Tracking
	}
	return nil
}

type UpstreamTracking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ahead  uint64 `protobuf:"varint,1,opt,name=ahead,proto3" json:"ahead,omitempty"`
	Behind uint64 `protobuf:"varint,2,opt,name=behind,proto3" json:"behind,omitempty"`
}

func (x *UpstreamTracking) Reset() {
	*x = UpstreamTracking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamTracking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamTracking) ProtoMessage() {}

func (x *UpstreamTracking) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamTracking.ProtoReflect.Descriptor instead.
func (*UpstreamTracking) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{11}
}

func (x *UpstreamTracking) GetAhead() uint64 {
	if x != nil {
		return x.Ahead
	}
	return 0
}

func (x *UpstreamTracking) GetBehind() uint64 {
	if x != nil {
		return x.Behind
	}
	return 0
}

type CommitSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha             string `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	Subject         string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	CommitTimestamp int64  `protobuf:"varint,3,opt,name=commit_timestamp,json=commitTimestamp,proto3" json:"commit_timestamp,omitempty"`
}

func (x *CommitSummary) Reset() {
	*x = CommitSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitSummary) ProtoMessage() {}

func (x *CommitSummary) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitSummary.ProtoReflect.Descriptor instead.
func (*CommitSummary) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{12}
}

func (x *CommitSummary) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *CommitSummary) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CommitSummary) GetCommitTimestamp() int64 {
	if x != nil {
		return x.CommitTimestamp
	}
	return 0
}

type GitBranches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  uint64       `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Repository *ProjectPath `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *GitBranches) Reset() {
	*x = GitBranches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitBranches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitBranches) ProtoMessage() {}

func (x *GitBranches) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitBranches.ProtoReflect.Descriptor instead.
func (*GitBranches) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{13}
}

func (x *GitBranches) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GitBranches) GetRepository() *ProjectPath {
	if x != nil {
		return x.Repository
	}
	return nil
}

type UpdateGitBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  uint64       `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BranchName string       `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	Repository *ProjectPath `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *UpdateGitBranch) Reset() {
	*x = UpdateGitBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGitBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGitBranch) ProtoMessage() {}

func (x *UpdateGitBranch) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGitBranch.ProtoReflect.Descriptor instead.
func (*UpdateGitBranch) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateGitBranch) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateGitBranch) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *UpdateGitBranch) GetRepository() *ProjectPath {
	if x != nil {
		return x.Repository
	}
	return nil
}

type UpdateRepository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId             uint64         `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id                    uint64         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	AbsPath               string         `protobuf:"bytes,3,opt,name=abs_path,json=absPath,proto3" json:"abs_path,omitempty"`
	EntryIds              []uint64       `protobuf:"varint,4,rep,packed,name=entry_ids,json=entryIds,proto3" json:"entry_ids,omitempty"`
	BranchSummary         *Branch        `protobuf:"bytes,5,opt,name=branch_summary,json=branchSummary,proto3,oneof" json:"branch_summary,omitempty"`
	UpdatedStatuses       []*StatusEntry `protobuf:"bytes,6,rep,name=updated_statuses,json=updatedStatuses,proto3" json:"updated_statuses,omitempty"`
	RemovedStatuses       []string       `protobuf:"bytes,7,rep,name=removed_statuses,json=removedStatuses,proto3" json:"removed_statuses,omitempty"`
	CurrentMergeConflicts []string       `protobuf:"bytes,8,rep,name=current_merge_conflicts,json=currentMergeConflicts,proto3" json:"current_merge_conflicts,omitempty"`
	ScanId                uint64         `protobuf:"varint,9,opt,name=scan_id,json=scanId,proto3" json:"scan_id,omitempty"`
	IsLastUpdate          bool           `protobuf:"varint,10,opt,name=is_last_update,json=isLastUpdate,proto3" json:"is_last_update,omitempty"`
}

func (x *UpdateRepository) Reset() {
	*x = UpdateRepository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRepository) ProtoMessage() {}

func (x *UpdateRepository) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRepository.ProtoReflect.Descriptor instead.
func (*UpdateRepository) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateRepository) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateRepository) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRepository) GetAbsPath() string {
	if x != nil {
		return x.AbsPath
	}
	return ""
}

func (x *UpdateRepository) GetEntryIds() []uint64 {
	if x != nil {
		return x.EntryIds
	}
	return nil
}

func (x *UpdateRepository) GetBranchSummary() *Branch {
	if x != nil {
		return x.BranchSummary
	}
	return nil
}

func (x *UpdateRepository) GetUpdatedStatuses() []*StatusEntry {
	if x != nil {
		return x.UpdatedStatuses
	}
	return nil
}

func (x *UpdateRepository) GetRemovedStatuses() []string {
	if x != nil {
		return x.RemovedStatuses
	}
	return nil
}

func (x *UpdateRepository) GetCurrentMergeConflicts() []string {
	if x != nil {
		return x.CurrentMergeConflicts
	}
	return nil
}

func (x *UpdateRepository) GetScanId() uint64 {
	if x != nil {
		return x.ScanId
	}
	return 0
}

func (x *UpdateRepository) GetIsLastUpdate() bool {
	if x != nil {
		return x.IsLastUpdate
	}
	return false
}

type RemoveRepository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveRepository) Reset() {
	*x = RemoveRepository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRepository) ProtoMessage() {}

func (x *RemoveRepository) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRepository.ProtoReflect.Descriptor instead.
func (*RemoveRepository) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveRepository) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *RemoveRepository) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GitFileStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*GitFileStatus_Untracked_
	//	*GitFileStatus_Ignored_
	//	*GitFileStatus_Unmerged_
	//	*GitFileStatus_Tracked_
	Variant isGitFileStatus_Variant `protobuf_oneof:"variant"`
}

func (x *GitFileStatus) Reset() {
	*x = GitFileStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitFileStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitFileStatus) ProtoMessage() {}

func (x *GitFileStatus) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitFileStatus.ProtoReflect.Descriptor instead.
func (*GitFileStatus) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{17}
}

func (m *GitFileStatus) GetVariant() isGitFileStatus_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *GitFileStatus) GetUntracked() *GitFileStatus_Untracked {
	if x, ok := x.GetVariant().(*GitFileStatus_Untracked_); ok {
		return x.Untracked
	}
	return nil
}

func (x *GitFileStatus) GetIgnored() *GitFileStatus_Ignored {
	if x, ok := x.GetVariant().(*GitFileStatus_Ignored_); ok {
		return x.Ignored
	}
	return nil
}

func (x *GitFileStatus) GetUnmerged() *GitFileStatus_Unmerged {
	if x, ok := x.GetVariant().(*GitFileStatus_Unmerged_); ok {
		return x.Unmerged
	}
	return nil
}

func (x *GitFileStatus) GetTracked() *GitFileStatus_Tracked {
	if x, ok := x.GetVariant().(*GitFileStatus_Tracked_); ok {
		return x.Tracked
	}
	return nil
}

type isGitFileStatus_Variant interface {
	isGitFileStatus_Variant()
}

type GitFileStatus_Untracked_ struct {
	Untracked *GitFileStatus_Untracked `protobuf:"bytes,1,opt,name=untracked,proto3,oneof"`
}

type GitFileStatus_Ignored_ struct {
	Ignored *GitFileStatus_Ignored `protobuf:"bytes,2,opt,name=ignored,proto3,oneof"`
}

type GitFileStatus_Unmerged_ struct {
	Unmerged *GitFileStatus_Unmerged `protobuf:"bytes,3,opt,name=unmerged,proto3,oneof"`
}

type GitFileStatus_Tracked_ struct {
	Tracked *GitFileStatus_Tracked `protobuf:"bytes,4,opt,name=tracked,proto3,oneof"`
}

func (*GitFileStatus_Untracked_) isGitFileStatus_Variant() {}

func (*GitFileStatus_Ignored_) isGitFileStatus_Variant() {}

func (*GitFileStatus_Unmerged_) isGitFileStatus_Variant() {}

func (*GitFileStatus_Tracked_) isGitFileStatus_Variant() {}

type GitGetBranches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
}

func (x *GitGetBranches) Reset() {
	*x = GitGetBranches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitGetBranches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitGetBranches) ProtoMessage() {}

func (x *GitGetBranches) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitGetBranches.ProtoReflect.Descriptor instead.
func (*GitGetBranches) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{18}
}

func (x *GitGetBranches) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GitGetBranches) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

type GitCreateBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	BranchName   string `protobuf:"bytes,4,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
}

func (x *GitCreateBranch) Reset() {
	*x = GitCreateBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCreateBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCreateBranch) ProtoMessage() {}

func (x *GitCreateBranch) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCreateBranch.ProtoReflect.Descriptor instead.
func (*GitCreateBranch) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{19}
}

func (x *GitCreateBranch) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GitCreateBranch) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *GitCreateBranch) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type GitChangeBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	BranchName   string `protobuf:"bytes,4,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
}

func (x *GitChangeBranch) Reset() {
	*x = GitChangeBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitChangeBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitChangeBranch) ProtoMessage() {}

func (x *GitChangeBranch) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitChangeBranch.ProtoReflect.Descriptor instead.
func (*GitChangeBranch) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{20}
}

func (x *GitChangeBranch) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GitChangeBranch) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *GitChangeBranch) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type GitDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64           `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64           `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	DiffType     GitDiff_DiffType `protobuf:"varint,4,opt,name=diff_type,json=diffType,proto3,enum=zed.messages.GitDiff_DiffType" json:"diff_type,omitempty"`
}

func (x *GitDiff) Reset() {
	*x = GitDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitDiff) ProtoMessage() {}

func (x *GitDiff) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitDiff.ProtoReflect.Descriptor instead.
func (*GitDiff) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{21}
}

func (x *GitDiff) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GitDiff) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *GitDiff) GetDiffType() GitDiff_DiffType {
	if x != nil {
		return x.DiffType
	}
	return GitDiff_HEAD_TO_WORKTREE
}

type GitDiffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diff string `protobuf:"bytes,1,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *GitDiffResponse) Reset() {
	*x = GitDiffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitDiffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitDiffResponse) ProtoMessage() {}

func (x *GitDiffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitDiffResponse.ProtoReflect.Descriptor instead.
func (*GitDiffResponse) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{22}
}

func (x *GitDiffResponse) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

type GitInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AbsPath            string `protobuf:"bytes,2,opt,name=abs_path,json=absPath,proto3" json:"abs_path,omitempty"`
	FallbackBranchName string `protobuf:"bytes,3,opt,name=fallback_branch_name,json=fallbackBranchName,proto3" json:"fallback_branch_name,omitempty"`
}

func (x *GitInit) Reset() {
	*x = GitInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitInit) ProtoMessage() {}

func (x *GitInit) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitInit.ProtoReflect.Descriptor instead.
func (*GitInit) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{23}
}

func (x *GitInit) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GitInit) GetAbsPath() string {
	if x != nil {
		return x.AbsPath
	}
	return ""
}

func (x *GitInit) GetFallbackBranchName() string {
	if x != nil {
		return x.FallbackBranchName
	}
	return ""
}

type CheckForPushedCommits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
}

func (x *CheckForPushedCommits) Reset() {
	*x = CheckForPushedCommits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckForPushedCommits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckForPushedCommits) ProtoMessage() {}

func (x *CheckForPushedCommits) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckForPushedCommits.ProtoReflect.Descriptor instead.
func (*CheckForPushedCommits) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{24}
}

func (x *CheckForPushedCommits) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CheckForPushedCommits) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

type CheckForPushedCommitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PushedTo []string `protobuf:"bytes,1,rep,name=pushed_to,json=pushedTo,proto3" json:"pushed_to,omitempty"`
}

func (x *CheckForPushedCommitsResponse) Reset() {
	*x = CheckForPushedCommitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckForPushedCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckForPushedCommitsResponse) ProtoMessage() {}

func (x *CheckForPushedCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckForPushedCommitsResponse.ProtoReflect.Descriptor instead.
func (*CheckForPushedCommitsResponse) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{25}
}

func (x *CheckForPushedCommitsResponse) GetPushedTo() []string {
	if x != nil {
		return x.PushedTo
	}
	return nil
}

type GitShow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Commit       string `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *GitShow) Reset() {
	*x = GitShow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitShow) ProtoMessage() {}

func (x *GitShow) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitShow.ProtoReflect.Descriptor instead.
func (*GitShow) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{26}
}

func (x *GitShow) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GitShow) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *GitShow) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type GitCommitDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha             string `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	Message         string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CommitTimestamp int64  `protobuf:"varint,3,opt,name=commit_timestamp,json=commitTimestamp,proto3" json:"commit_timestamp,omitempty"`
	AuthorEmail     string `protobuf:"bytes,4,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	AuthorName      string `protobuf:"bytes,5,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
}

func (x *GitCommitDetails) Reset() {
	*x = GitCommitDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommitDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommitDetails) ProtoMessage() {}

func (x *GitCommitDetails) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommitDetails.ProtoReflect.Descriptor instead.
func (*GitCommitDetails) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{27}
}

func (x *GitCommitDetails) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *GitCommitDetails) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GitCommitDetails) GetCommitTimestamp() int64 {
	if x != nil {
		return x.CommitTimestamp
	}
	return 0
}

func (x *GitCommitDetails) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *GitCommitDetails) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

type LoadCommitDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Commit       string `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *LoadCommitDiff) Reset() {
	*x = LoadCommitDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCommitDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCommitDiff) ProtoMessage() {}

func (x *LoadCommitDiff) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCommitDiff.ProtoReflect.Descriptor instead.
func (*LoadCommitDiff) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{28}
}

func (x *LoadCommitDiff) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LoadCommitDiff) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *LoadCommitDiff) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type LoadCommitDiffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*CommitFile `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *LoadCommitDiffResponse) Reset() {
	*x = LoadCommitDiffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCommitDiffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCommitDiffResponse) ProtoMessage() {}

func (x *LoadCommitDiffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCommitDiffResponse.ProtoReflect.Descriptor instead.
func (*LoadCommitDiffResponse) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{29}
}

func (x *LoadCommitDiffResponse) GetFiles() []*CommitFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type CommitFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string  `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	OldText *string `protobuf:"bytes,2,opt,name=old_text,json=oldText,proto3,oneof" json:"old_text,omitempty"`
	NewText *string `protobuf:"bytes,3,opt,name=new_text,json=newText,proto3,oneof" json:"new_text,omitempty"`
}

func (x *CommitFile) Reset() {
	*x = CommitFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitFile) ProtoMessage() {}

func (x *CommitFile) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitFile.ProtoReflect.Descriptor instead.
func (*CommitFile) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{30}
}

func (x *CommitFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CommitFile) GetOldText() string {
	if x != nil && x.OldText != nil {
		return *x.OldText
	}
	return ""
}

func (x *CommitFile) GetNewText() string {
	if x != nil && x.NewText != nil {
		return *x.NewText
	}
	return ""
}

type GitReset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64             `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64             `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Commit       string             `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	Mode         GitReset_ResetMode `protobuf:"varint,5,opt,name=mode,proto3,enum=zed.messages.GitReset_ResetMode" json:"mode,omitempty"`
}

func (x *GitReset) Reset() {
	*x = GitReset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitReset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitReset) ProtoMessage() {}

func (x *GitReset) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitReset.ProtoReflect.Descriptor instead.
func (*GitReset) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{31}
}

func (x *GitReset) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GitReset) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *GitReset) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *GitReset) GetMode() GitReset_ResetMode {
	if x != nil {
		return x.Mode
	}
	return GitReset_SOFT
}

type GitCheckoutFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64   `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64   `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Commit       string   `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	Paths        []string `protobuf:"bytes,5,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *GitCheckoutFiles) Reset() {
	*x = GitCheckoutFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCheckoutFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCheckoutFiles) ProtoMessage() {}

func (x *GitCheckoutFiles) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCheckoutFiles.ProtoReflect.Descriptor instead.
func (*GitCheckoutFiles) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{32}
}

func (x *GitCheckoutFiles) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GitCheckoutFiles) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *GitCheckoutFiles) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *GitCheckoutFiles) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

// Move to `git.proto` once collab's min version is >=0.171.0.
type StatusEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoPath string `protobuf:"bytes,1,opt,name=repo_path,json=repoPath,proto3" json:"repo_path,omitempty"`
	// Can be removed once collab's min version is >=0.171.0.
	SimpleStatus GitStatus      `protobuf:"varint,2,opt,name=simple_status,json=simpleStatus,proto3,enum=zed.messages.GitStatus" json:"simple_status,omitempty"`
	Status       *GitFileStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StatusEntry) Reset() {
	*x = StatusEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusEntry) ProtoMessage() {}

func (x *StatusEntry) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusEntry.ProtoReflect.Descriptor instead.
func (*StatusEntry) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{33}
}

func (x *StatusEntry) GetRepoPath() string {
	if x != nil {
		return x.RepoPath
	}
	return ""
}

func (x *StatusEntry) GetSimpleStatus() GitStatus {
	if x != nil {
		return x.SimpleStatus
	}
	return GitStatus_Added
}

func (x *StatusEntry) GetStatus() *GitFileStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64   `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64   `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Paths        []string `protobuf:"bytes,4,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *Stage) Reset() {
	*x = Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{34}
}

func (x *Stage) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Stage) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *Stage) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type Unstage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64   `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64   `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Paths        []string `protobuf:"bytes,4,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *Unstage) Reset() {
	*x = Unstage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unstage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unstage) ProtoMessage() {}

func (x *Unstage) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unstage.ProtoReflect.Descriptor instead.
func (*Unstage) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{35}
}

func (x *Unstage) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Unstage) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *Unstage) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64                `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64                `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Name         *string               `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Email        *string               `protobuf:"bytes,5,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Message      string                `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Options      *Commit_CommitOptions `protobuf:"bytes,7,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{36}
}

func (x *Commit) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Commit) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *Commit) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Commit) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Commit) GetOptions() *Commit_CommitOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type OpenCommitMessageBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
}

func (x *OpenCommitMessageBuffer) Reset() {
	*x = OpenCommitMessageBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenCommitMessageBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCommitMessageBuffer) ProtoMessage() {}

func (x *OpenCommitMessageBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCommitMessageBuffer.ProtoReflect.Descriptor instead.
func (*OpenCommitMessageBuffer) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{37}
}

func (x *OpenCommitMessageBuffer) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *OpenCommitMessageBuffer) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

type Push struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64            `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64            `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	RemoteName   string            `protobuf:"bytes,4,opt,name=remote_name,json=remoteName,proto3" json:"remote_name,omitempty"`
	BranchName   string            `protobuf:"bytes,5,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	Options      *Push_PushOptions `protobuf:"varint,6,opt,name=options,proto3,enum=zed.messages.Push_PushOptions,oneof" json:"options,omitempty"`
	AskpassId    uint64            `protobuf:"varint,7,opt,name=askpass_id,json=askpassId,proto3" json:"askpass_id,omitempty"`
}

func (x *Push) Reset() {
	*x = Push{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Push) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Push) ProtoMessage() {}

func (x *Push) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Push.ProtoReflect.Descriptor instead.
func (*Push) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{38}
}

func (x *Push) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Push) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *Push) GetRemoteName() string {
	if x != nil {
		return x.RemoteName
	}
	return ""
}

func (x *Push) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *Push) GetOptions() Push_PushOptions {
	if x != nil && x.Options != nil {
		return *x.Options
	}
	return Push_SET_UPSTREAM
}

func (x *Push) GetAskpassId() uint64 {
	if x != nil {
		return x.AskpassId
	}
	return 0
}

type Fetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	AskpassId    uint64 `protobuf:"varint,4,opt,name=askpass_id,json=askpassId,proto3" json:"askpass_id,omitempty"`
}

func (x *Fetch) Reset() {
	*x = Fetch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fetch) ProtoMessage() {}

func (x *Fetch) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fetch.ProtoReflect.Descriptor instead.
func (*Fetch) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{39}
}

func (x *Fetch) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Fetch) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *Fetch) GetAskpassId() uint64 {
	if x != nil {
		return x.AskpassId
	}
	return 0
}

type GetRemotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64  `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	BranchName   *string `protobuf:"bytes,4,opt,name=branch_name,json=branchName,proto3,oneof" json:"branch_name,omitempty"`
}

func (x *GetRemotes) Reset() {
	*x = GetRemotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemotes) ProtoMessage() {}

func (x *GetRemotes) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemotes.ProtoReflect.Descriptor instead.
func (*GetRemotes) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{40}
}

func (x *GetRemotes) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetRemotes) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *GetRemotes) GetBranchName() string {
	if x != nil && x.BranchName != nil {
		return *x.BranchName
	}
	return ""
}

type GetRemotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remotes []*GetRemotesResponse_Remote `protobuf:"bytes,1,rep,name=remotes,proto3" json:"remotes,omitempty"`
}

func (x *GetRemotesResponse) Reset() {
	*x = GetRemotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemotesResponse) ProtoMessage() {}

func (x *GetRemotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemotesResponse.ProtoReflect.Descriptor instead.
func (*GetRemotesResponse) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{41}
}

func (x *GetRemotesResponse) GetRemotes() []*GetRemotesResponse_Remote {
	if x != nil {
		return x.Remotes
	}
	return nil
}

type Pull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	RemoteName   string `protobuf:"bytes,4,opt,name=remote_name,json=remoteName,proto3" json:"remote_name,omitempty"`
	BranchName   string `protobuf:"bytes,5,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	AskpassId    uint64 `protobuf:"varint,6,opt,name=askpass_id,json=askpassId,proto3" json:"askpass_id,omitempty"`
}

func (x *Pull) Reset() {
	*x = Pull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pull) ProtoMessage() {}

func (x *Pull) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pull.ProtoReflect.Descriptor instead.
func (*Pull) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{42}
}

func (x *Pull) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Pull) GetRepositoryId() uint64 {
	if x != nil {
		return x.RepositoryId
	}
	return 0
}

func (x *Pull) GetRemoteName() string {
	if x != nil {
		return x.RemoteName
	}
	return ""
}

func (x *Pull) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *Pull) GetAskpassId() uint64 {
	if x != nil {
		return x.AskpassId
	}
	return 0
}

type RemoteMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stdout string `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr string `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *RemoteMessageResponse) Reset() {
	*x = RemoteMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteMessageResponse) ProtoMessage() {}

func (x *RemoteMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteMessageResponse.ProtoReflect.Descriptor instead.
func (*RemoteMessageResponse) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{43}
}

func (x *RemoteMessageResponse) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *RemoteMessageResponse) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

type BlameBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	BufferId  uint64              `protobuf:"varint,2,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,3,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *BlameBuffer) Reset() {
	*x = BlameBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlameBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlameBuffer) ProtoMessage() {}

func (x *BlameBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlameBuffer.ProtoReflect.Descriptor instead.
func (*BlameBuffer) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{44}
}

func (x *BlameBuffer) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *BlameBuffer) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *BlameBuffer) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type BlameEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha                []byte  `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	StartLine          uint32  `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine            uint32  `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	OriginalLineNumber uint32  `protobuf:"varint,4,opt,name=original_line_number,json=originalLineNumber,proto3" json:"original_line_number,omitempty"`
	Author             *string `protobuf:"bytes,5,opt,name=author,proto3,oneof" json:"author,omitempty"`
	AuthorMail         *string `protobuf:"bytes,6,opt,name=author_mail,json=authorMail,proto3,oneof" json:"author_mail,omitempty"`
	AuthorTime         *int64  `protobuf:"varint,7,opt,name=author_time,json=authorTime,proto3,oneof" json:"author_time,omitempty"`
	AuthorTz           *string `protobuf:"bytes,8,opt,name=author_tz,json=authorTz,proto3,oneof" json:"author_tz,omitempty"`
	Committer          *string `protobuf:"bytes,9,opt,name=committer,proto3,oneof" json:"committer,omitempty"`
	CommitterMail      *string `protobuf:"bytes,10,opt,name=committer_mail,json=committerMail,proto3,oneof" json:"committer_mail,omitempty"`
	CommitterTime      *int64  `protobuf:"varint,11,opt,name=committer_time,json=committerTime,proto3,oneof" json:"committer_time,omitempty"`
	CommitterTz        *string `protobuf:"bytes,12,opt,name=committer_tz,json=committerTz,proto3,oneof" json:"committer_tz,omitempty"`
	Summary            *string `protobuf:"bytes,13,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
	Previous           *string `protobuf:"bytes,14,opt,name=previous,proto3,oneof" json:"previous,omitempty"`
	Filename           string  `protobuf:"bytes,15,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *BlameEntry) Reset() {
	*x = BlameEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlameEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlameEntry) ProtoMessage() {}

func (x *BlameEntry) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlameEntry.ProtoReflect.Descriptor instead.
func (*BlameEntry) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{45}
}

func (x *BlameEntry) GetSha() []byte {
	if x != nil {
		return x.Sha
	}
	return nil
}

func (x *BlameEntry) GetStartLine() uint32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *BlameEntry) GetEndLine() uint32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *BlameEntry) GetOriginalLineNumber() uint32 {
	if x != nil {
		return x.OriginalLineNumber
	}
	return 0
}

func (x *BlameEntry) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *BlameEntry) GetAuthorMail() string {
	if x != nil && x.AuthorMail != nil {
		return *x.AuthorMail
	}
	return ""
}

func (x *BlameEntry) GetAuthorTime() int64 {
	if x != nil && x.AuthorTime != nil {
		return *x.AuthorTime
	}
	return 0
}

func (x *BlameEntry) GetAuthorTz() string {
	if x != nil && x.AuthorTz != nil {
		return *x.AuthorTz
	}
	return ""
}

func (x *BlameEntry) GetCommitter() string {
	if x != nil && x.Committer != nil {
		return *x.Committer
	}
	return ""
}

func (x *BlameEntry) GetCommitterMail() string {
	if x != nil && x.CommitterMail != nil {
		return *x.CommitterMail
	}
	return ""
}

func (x *BlameEntry) GetCommitterTime() int64 {
	if x != nil && x.CommitterTime != nil {
		return *x.CommitterTime
	}
	return 0
}

func (x *BlameEntry) GetCommitterTz() string {
	if x != nil && x.CommitterTz != nil {
		return *x.CommitterTz
	}
	return ""
}

func (x *BlameEntry) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *BlameEntry) GetPrevious() string {
	if x != nil && x.Previous != nil {
		return *x.Previous
	}
	return ""
}

func (x *BlameEntry) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type CommitMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid     []byte `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CommitMessage) Reset() {
	*x = CommitMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMessage) ProtoMessage() {}

func (x *CommitMessage) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMessage.ProtoReflect.Descriptor instead.
func (*CommitMessage) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{46}
}

func (x *CommitMessage) GetOid() []byte {
	if x != nil {
		return x.Oid
	}
	return nil
}

func (x *CommitMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CommitPermalink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid       []byte `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Permalink string `protobuf:"bytes,2,opt,name=permalink,proto3" json:"permalink,omitempty"`
}

func (x *CommitPermalink) Reset() {
	*x = CommitPermalink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitPermalink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitPermalink) ProtoMessage() {}

func (x *CommitPermalink) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitPermalink.ProtoReflect.Descriptor instead.
func (*CommitPermalink) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{47}
}

func (x *CommitPermalink) GetOid() []byte {
	if x != nil {
		return x.Oid
	}
	return nil
}

func (x *CommitPermalink) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

type BlameBufferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlameResponse *BlameBufferResponse_BlameResponse `protobuf:"bytes,5,opt,name=blame_response,json=blameResponse,proto3,oneof" json:"blame_response,omitempty"`
}

func (x *BlameBufferResponse) Reset() {
	*x = BlameBufferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlameBufferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlameBufferResponse) ProtoMessage() {}

func (x *BlameBufferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlameBufferResponse.ProtoReflect.Descriptor instead.
func (*BlameBufferResponse) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{48}
}

func (x *BlameBufferResponse) GetBlameResponse() *BlameBufferResponse_BlameResponse {
	if x != nil {
		return x.BlameResponse
	}
	return nil
}

type GitFileStatus_Untracked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitFileStatus_Untracked) Reset() {
	*x = GitFileStatus_Untracked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitFileStatus_Untracked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitFileStatus_Untracked) ProtoMessage() {}

func (x *GitFileStatus_Untracked) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitFileStatus_Untracked.ProtoReflect.Descriptor instead.
func (*GitFileStatus_Untracked) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{17, 0}
}

type GitFileStatus_Ignored struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GitFileStatus_Ignored) Reset() {
	*x = GitFileStatus_Ignored{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitFileStatus_Ignored) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitFileStatus_Ignored) ProtoMessage() {}

func (x *GitFileStatus_Ignored) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitFileStatus_Ignored.ProtoReflect.Descriptor instead.
func (*GitFileStatus_Ignored) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{17, 1}
}

type GitFileStatus_Unmerged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstHead  GitStatus `protobuf:"varint,1,opt,name=first_head,json=firstHead,proto3,enum=zed.messages.GitStatus" json:"first_head,omitempty"`
	SecondHead GitStatus `protobuf:"varint,2,opt,name=second_head,json=secondHead,proto3,enum=zed.messages.GitStatus" json:"second_head,omitempty"`
}

func (x *GitFileStatus_Unmerged) Reset() {
	*x = GitFileStatus_Unmerged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitFileStatus_Unmerged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitFileStatus_Unmerged) ProtoMessage() {}

func (x *GitFileStatus_Unmerged) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitFileStatus_Unmerged.ProtoReflect.Descriptor instead.
func (*GitFileStatus_Unmerged) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{17, 2}
}

func (x *GitFileStatus_Unmerged) GetFirstHead() GitStatus {
	if x != nil {
		return x.FirstHead
	}
	return GitStatus_Added
}

func (x *GitFileStatus_Unmerged) GetSecondHead() GitStatus {
	if x != nil {
		return x.SecondHead
	}
	return GitStatus_Added
}

type GitFileStatus_Tracked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexStatus    GitStatus `protobuf:"varint,1,opt,name=index_status,json=indexStatus,proto3,enum=zed.messages.GitStatus" json:"index_status,omitempty"`
	WorktreeStatus GitStatus `protobuf:"varint,2,opt,name=worktree_status,json=worktreeStatus,proto3,enum=zed.messages.GitStatus" json:"worktree_status,omitempty"`
}

func (x *GitFileStatus_Tracked) Reset() {
	*x = GitFileStatus_Tracked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitFileStatus_Tracked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitFileStatus_Tracked) ProtoMessage() {}

func (x *GitFileStatus_Tracked) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitFileStatus_Tracked.ProtoReflect.Descriptor instead.
func (*GitFileStatus_Tracked) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{17, 3}
}

func (x *GitFileStatus_Tracked) GetIndexStatus() GitStatus {
	if x != nil {
		return x.IndexStatus
	}
	return GitStatus_Added
}

func (x *GitFileStatus_Tracked) GetWorktreeStatus() GitStatus {
	if x != nil {
		return x.WorktreeStatus
	}
	return GitStatus_Added
}

type Commit_CommitOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amend bool `protobuf:"varint,1,opt,name=amend,proto3" json:"amend,omitempty"`
}

func (x *Commit_CommitOptions) Reset() {
	*x = Commit_CommitOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit_CommitOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit_CommitOptions) ProtoMessage() {}

func (x *Commit_CommitOptions) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit_CommitOptions.ProtoReflect.Descriptor instead.
func (*Commit_CommitOptions) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{36, 0}
}

func (x *Commit_CommitOptions) GetAmend() bool {
	if x != nil {
		return x.Amend
	}
	return false
}

type GetRemotesResponse_Remote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRemotesResponse_Remote) Reset() {
	*x = GetRemotesResponse_Remote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRemotesResponse_Remote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRemotesResponse_Remote) ProtoMessage() {}

func (x *GetRemotesResponse_Remote) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRemotesResponse_Remote.ProtoReflect.Descriptor instead.
func (*GetRemotesResponse_Remote) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{41, 0}
}

func (x *GetRemotesResponse_Remote) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BlameBufferResponse_BlameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries   []*BlameEntry    `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	Messages  []*CommitMessage `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	RemoteUrl *string          `protobuf:"bytes,4,opt,name=remote_url,json=remoteUrl,proto3,oneof" json:"remote_url,omitempty"`
}

func (x *BlameBufferResponse_BlameResponse) Reset() {
	*x = BlameBufferResponse_BlameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_git_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlameBufferResponse_BlameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlameBufferResponse_BlameResponse) ProtoMessage() {}

func (x *BlameBufferResponse_BlameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_git_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlameBufferResponse_BlameResponse.ProtoReflect.Descriptor instead.
func (*BlameBufferResponse_BlameResponse) Descriptor() ([]byte, []int) {
	return file_git_proto_rawDescGZIP(), []int{48, 0}
}

func (x *BlameBufferResponse_BlameResponse) GetEntries() []*BlameEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *BlameBufferResponse_BlameResponse) GetMessages() []*CommitMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *BlameBufferResponse_BlameResponse) GetRemoteUrl() string {
	if x != nil && x.RemoteUrl != nil {
		return *x.RemoteUrl
	}
	return ""
}

var File_git_proto protoreflect.FileDescriptor

var file_git_proto_rawDesc = []byte{
	0x0a, 0x09, 0x67, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a, 0x13, 0x47, 0x69, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x22, 0xcd, 0x02, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x42,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x42, 0x61, 0x73, 0x65, 0x73, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x45, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x03, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x4e, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x50, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64,
	0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x51, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x6e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x32, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xa4, 0x02, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x0e, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x75, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x55, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x01, 0x52, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x12, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x02,
	0x52, 0x10, 0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x76, 0x0a, 0x0b,
	0x47, 0x69, 0x74, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0x40, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x68, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x68, 0x65, 0x61, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x62, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x22, 0x66, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x67,
	0x0a, 0x0b, 0x47, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xb6, 0x03, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x62,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x62,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x48, 0x00, 0x52, 0x0d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x73, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0x41, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xc7, 0x04, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x75, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x09, 0x75, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x08,
	0x75, 0x6e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x6e, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x75, 0x6e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x12, 0x3f, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x47, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x1a, 0x0b, 0x0a, 0x09, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x1a, 0x09,
	0x0a, 0x07, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x1a, 0x7c, 0x0a, 0x08, 0x55, 0x6e, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x38, 0x0a,
	0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x64, 0x1a, 0x87, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x40, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x0e,
	0x47, 0x69, 0x74, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x7c, 0x0a, 0x0f, 0x47, 0x69, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x7c, 0x0a, 0x0f, 0x47, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x22, 0xc5, 0x01, 0x0a, 0x07, 0x47, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x2e, 0x44,
	0x69, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x69, 0x66, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x33, 0x0a, 0x08, 0x44, 0x69, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x54, 0x52, 0x45,
	0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x10, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x25, 0x0a, 0x0f,
	0x47, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x69, 0x66, 0x66, 0x22, 0x75, 0x0a, 0x07, 0x47, 0x69, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x62, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x62, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x15, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x3c, 0x0a,
	0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x22, 0x6b, 0x0a, 0x07, 0x47,
	0x69, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xad, 0x01, 0x0a, 0x10, 0x47, 0x69, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x0e, 0x4c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x48, 0x0a, 0x16,
	0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x6c,
	0x64, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6e, 0x65,
	0x77, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x6c, 0x64,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x08, 0x47, 0x69, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0x20, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x58, 0x45,
	0x44, 0x10, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x47, 0x69,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x47, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x67, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22,
	0x69, 0x0a, 0x07, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xa9, 0x02, 0x0a, 0x06, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x02, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x25, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6d, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6d, 0x65, 0x6e,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x63, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xa8, 0x02, 0x0a, 0x04,
	0x50, 0x75, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61,
	0x73, 0x6b, 0x70, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x54, 0x5f, 0x55,
	0x50, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x10, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x70, 0x0a, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x70, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x8c, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x75, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x07, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73,
	0x1a, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb1,
	0x01, 0x0a, 0x04, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x73, 0x6b, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x70, 0x61, 0x73, 0x73, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x22, 0x47, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x0b,
	0x42, 0x6c, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xab, 0x05, 0x0a, 0x0a, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73,
	0x68, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x74, 0x7a, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x54, 0x7a, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x06, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x7a, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x7a, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6d,
	0x61, 0x69, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x74,
	0x7a, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x7a, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x22,
	0x3b, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x41, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x22,
	0xc3, 0x02, 0x0a, 0x13, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x62, 0x6c, 0x61, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42,
	0x6c, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x62, 0x6c, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x88, 0x01, 0x01, 0x1a, 0xb5, 0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x62, 0x6c, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x05, 0x2a, 0x86, 0x01, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x64, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x10, 0x07, 0x12, 0x0e,
	0x0a, 0x0a, 0x55, 0x6e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x08, 0x42, 0x06,
	0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_git_proto_rawDescOnce sync.Once
	file_git_proto_rawDescData = file_git_proto_rawDesc
)

func file_git_proto_rawDescGZIP() []byte {
	file_git_proto_rawDescOnce.Do(func() {
		file_git_proto_rawDescData = protoimpl.X.CompressGZIP(file_git_proto_rawDescData)
	})
	return file_git_proto_rawDescData
}

var file_git_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_git_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_git_proto_goTypes = []interface{}{
	(GitStatus)(0),                            // 0: zed.messages.GitStatus
	(UpdateDiffBases_Mode)(0),                 // 1: zed.messages.UpdateDiffBases.Mode
	(OpenUncommittedDiffResponse_Mode)(0),     // 2: zed.messages.OpenUncommittedDiffResponse.Mode
	(GitDiff_DiffType)(0),                     // 3: zed.messages.GitDiff.DiffType
	(GitReset_ResetMode)(0),                   // 4: zed.messages.GitReset.ResetMode
	(Push_PushOptions)(0),                     // 5: zed.messages.Push.PushOptions
	(*GitBranchesResponse)(nil),               // 6: zed.messages.GitBranchesResponse
	(*UpdateDiffBases)(nil),                   // 7: zed.messages.UpdateDiffBases
	(*OpenUnstagedDiff)(nil),                  // 8: zed.messages.OpenUnstagedDiff
	(*OpenUnstagedDiffResponse)(nil),          // 9: zed.messages.OpenUnstagedDiffResponse
	(*OpenUncommittedDiff)(nil),               // 10: zed.messages.OpenUncommittedDiff
	(*OpenUncommittedDiffResponse)(nil),       // 11: zed.messages.OpenUncommittedDiffResponse
	(*SetIndexText)(nil),                      // 12: zed.messages.SetIndexText
	(*GetPermalinkToLine)(nil),                // 13: zed.messages.GetPermalinkToLine
	(*GetPermalinkToLineResponse)(nil),        // 14: zed.messages.GetPermalinkToLineResponse
	(*Branch)(nil),                            // 15: zed.messages.Branch
	(*GitUpstream)(nil),                       // 16: zed.messages.GitUpstream
	(*UpstreamTracking)(nil),                  // 17: zed.messages.UpstreamTracking
	(*CommitSummary)(nil),                     // 18: zed.messages.CommitSummary
	(*GitBranches)(nil),                       // 19: zed.messages.GitBranches
	(*UpdateGitBranch)(nil),                   // 20: zed.messages.UpdateGitBranch
	(*UpdateRepository)(nil),                  // 21: zed.messages.UpdateRepository
	(*RemoveRepository)(nil),                  // 22: zed.messages.RemoveRepository
	(*GitFileStatus)(nil),                     // 23: zed.messages.GitFileStatus
	(*GitGetBranches)(nil),                    // 24: zed.messages.GitGetBranches
	(*GitCreateBranch)(nil),                   // 25: zed.messages.GitCreateBranch
	(*GitChangeBranch)(nil),                   // 26: zed.messages.GitChangeBranch
	(*GitDiff)(nil),                           // 27: zed.messages.GitDiff
	(*GitDiffResponse)(nil),                   // 28: zed.messages.GitDiffResponse
	(*GitInit)(nil),                           // 29: zed.messages.GitInit
	(*CheckForPushedCommits)(nil),             // 30: zed.messages.CheckForPushedCommits
	(*CheckForPushedCommitsResponse)(nil),     // 31: zed.messages.CheckForPushedCommitsResponse
	(*GitShow)(nil),                           // 32: zed.messages.GitShow
	(*GitCommitDetails)(nil),                  // 33: zed.messages.GitCommitDetails
	(*LoadCommitDiff)(nil),                    // 34: zed.messages.LoadCommitDiff
	(*LoadCommitDiffResponse)(nil),            // 35: zed.messages.LoadCommitDiffResponse
	(*CommitFile)(nil),                        // 36: zed.messages.CommitFile
	(*GitReset)(nil),                          // 37: zed.messages.GitReset
	(*GitCheckoutFiles)(nil),                  // 38: zed.messages.GitCheckoutFiles
	(*StatusEntry)(nil),                       // 39: zed.messages.StatusEntry
	(*Stage)(nil),                             // 40: zed.messages.Stage
	(*Unstage)(nil),                           // 41: zed.messages.Unstage
	(*Commit)(nil),                            // 42: zed.messages.Commit
	(*OpenCommitMessageBuffer)(nil),           // 43: zed.messages.OpenCommitMessageBuffer
	(*Push)(nil),                              // 44: zed.messages.Push
	(*Fetch)(nil),                             // 45: zed.messages.Fetch
	(*GetRemotes)(nil),                        // 46: zed.messages.GetRemotes
	(*GetRemotesResponse)(nil),                // 47: zed.messages.GetRemotesResponse
	(*Pull)(nil),                              // 48: zed.messages.Pull
	(*RemoteMessageResponse)(nil),             // 49: zed.messages.RemoteMessageResponse
	(*BlameBuffer)(nil),                       // 50: zed.messages.BlameBuffer
	(*BlameEntry)(nil),                        // 51: zed.messages.BlameEntry
	(*CommitMessage)(nil),                     // 52: zed.messages.CommitMessage
	(*CommitPermalink)(nil),                   // 53: zed.messages.CommitPermalink
	(*BlameBufferResponse)(nil),               // 54: zed.messages.BlameBufferResponse
	(*GitFileStatus_Untracked)(nil),           // 55: zed.messages.GitFileStatus.Untracked
	(*GitFileStatus_Ignored)(nil),             // 56: zed.messages.GitFileStatus.Ignored
	(*GitFileStatus_Unmerged)(nil),            // 57: zed.messages.GitFileStatus.Unmerged
	(*GitFileStatus_Tracked)(nil),             // 58: zed.messages.GitFileStatus.Tracked
	(*Commit_CommitOptions)(nil),              // 59: zed.messages.Commit.CommitOptions
	(*GetRemotesResponse_Remote)(nil),         // 60: zed.messages.GetRemotesResponse.Remote
	(*BlameBufferResponse_BlameResponse)(nil), // 61: zed.messages.BlameBufferResponse.BlameResponse
	(*Range)(nil),                             // 62: zed.messages.Range
	(*ProjectPath)(nil),                       // 63: zed.messages.ProjectPath
	(*VectorClockEntry)(nil),                  // 64: zed.messages.VectorClockEntry
}
var file_git_proto_depIdxs = []int32{
	15, // 0: zed.messages.GitBranchesResponse.branches:type_name -> zed.messages.Branch
	1,  // 1: zed.messages.UpdateDiffBases.mode:type_name -> zed.messages.UpdateDiffBases.Mode
	2,  // 2: zed.messages.OpenUncommittedDiffResponse.mode:type_name -> zed.messages.OpenUncommittedDiffResponse.Mode
	62, // 3: zed.messages.GetPermalinkToLine.selection:type_name -> zed.messages.Range
	16, // 4: zed.messages.Branch.upstream:type_name -> zed.messages.GitUpstream
	18, // 5: zed.messages.Branch.most_recent_commit:type_name -> zed.messages.CommitSummary
	17, // 6: zed.messages.GitUpstream.tracking:type_name -> zed.messages.UpstreamTracking
	63, // 7: zed.messages.GitBranches.repository:type_name -> zed.messages.ProjectPath
	63, // 8: zed.messages.UpdateGitBranch.repository:type_name -> zed.messages.ProjectPath
	15, // 9: zed.messages.UpdateRepository.branch_summary:type_name -> zed.messages.Branch
	39, // 10: zed.messages.UpdateRepository.updated_statuses:type_name -> zed.messages.StatusEntry
	55, // 11: zed.messages.GitFileStatus.untracked:type_name -> zed.messages.GitFileStatus.Untracked
	56, // 12: zed.messages.GitFileStatus.ignored:type_name -> zed.messages.GitFileStatus.Ignored
	57, // 13: zed.messages.GitFileStatus.unmerged:type_name -> zed.messages.GitFileStatus.Unmerged
	58, // 14: zed.messages.GitFileStatus.tracked:type_name -> zed.messages.GitFileStatus.Tracked
	3,  // 15: zed.messages.GitDiff.diff_type:type_name -> zed.messages.GitDiff.DiffType
	36, // 16: zed.messages.LoadCommitDiffResponse.files:type_name -> zed.messages.CommitFile
	4,  // 17: zed.messages.GitReset.mode:type_name -> zed.messages.GitReset.ResetMode
	0,  // 18: zed.messages.StatusEntry.simple_status:type_name -> zed.messages.GitStatus
	23, // 19: zed.messages.StatusEntry.status:type_name -> zed.messages.GitFileStatus
	59, // 20: zed.messages.Commit.options:type_name -> zed.messages.Commit.CommitOptions
	5,  // 21: zed.messages.Push.options:type_name -> zed.messages.Push.PushOptions
	60, // 22: zed.messages.GetRemotesResponse.remotes:type_name -> zed.messages.GetRemotesResponse.Remote
	64, // 23: zed.messages.BlameBuffer.version:type_name -> zed.messages.VectorClockEntry
	61, // 24: zed.messages.BlameBufferResponse.blame_response:type_name -> zed.messages.BlameBufferResponse.BlameResponse
	0,  // 25: zed.messages.GitFileStatus.Unmerged.first_head:type_name -> zed.messages.GitStatus
	0,  // 26: zed.messages.GitFileStatus.Unmerged.second_head:type_name -> zed.messages.GitStatus
	0,  // 27: zed.messages.GitFileStatus.Tracked.index_status:type_name -> zed.messages.GitStatus
	0,  // 28: zed.messages.GitFileStatus.Tracked.worktree_status:type_name -> zed.messages.GitStatus
	51, // 29: zed.messages.BlameBufferResponse.BlameResponse.entries:type_name -> zed.messages.BlameEntry
	52, // 30: zed.messages.BlameBufferResponse.BlameResponse.messages:type_name -> zed.messages.CommitMessage
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_git_proto_init() }
func file_git_proto_init() {
	if File_git_proto != nil {
		return
	}
	file_worktree_proto_init()
	file_buffer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_git_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitBranchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiffBases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenUnstagedDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenUnstagedDiffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenUncommittedDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenUncommittedDiffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIndexText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPermalinkToLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPermalinkToLineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitUpstream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamTracking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitBranches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGitBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRepository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRepository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitFileStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitGetBranches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCreateBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitChangeBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitDiffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckForPushedCommits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckForPushedCommitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitShow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommitDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCommitDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCommitDiffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitReset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCheckoutFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unstage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenCommitMessageBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Push); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fetch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlameBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlameEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitPermalink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlameBufferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitFileStatus_Untracked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitFileStatus_Ignored); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitFileStatus_Unmerged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitFileStatus_Tracked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit_CommitOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRemotesResponse_Remote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_git_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlameBufferResponse_BlameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_git_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_git_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_git_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_git_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_git_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_git_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_git_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_git_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*GitFileStatus_Untracked_)(nil),
		(*GitFileStatus_Ignored_)(nil),
		(*GitFileStatus_Unmerged_)(nil),
		(*GitFileStatus_Tracked_)(nil),
	}
	file_git_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_git_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_git_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_git_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_git_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_git_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_git_proto_msgTypes[55].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_git_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_git_proto_goTypes,
		DependencyIndexes: file_git_proto_depIdxs,
		EnumInfos:         file_git_proto_enumTypes,
		MessageInfos:      file_git_proto_msgTypes,
	}.Build()
	File_git_proto = out.File
	file_git_proto_rawDesc = nil
	file_git_proto_goTypes = nil
	file_git_proto_depIdxs = nil
}
