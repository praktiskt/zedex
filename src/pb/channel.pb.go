// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: channel.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChannelVisibility int32

const (
	ChannelVisibility_Public  ChannelVisibility = 0
	ChannelVisibility_Members ChannelVisibility = 1
)

// Enum value maps for ChannelVisibility.
var (
	ChannelVisibility_name = map[int32]string{
		0: "Public",
		1: "Members",
	}
	ChannelVisibility_value = map[string]int32{
		"Public":  0,
		"Members": 1,
	}
)

func (x ChannelVisibility) Enum() *ChannelVisibility {
	p := new(ChannelVisibility)
	*p = x
	return p
}

func (x ChannelVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_channel_proto_enumTypes[0].Descriptor()
}

func (ChannelVisibility) Type() protoreflect.EnumType {
	return &file_channel_proto_enumTypes[0]
}

func (x ChannelVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelVisibility.Descriptor instead.
func (ChannelVisibility) EnumDescriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{0}
}

type ChannelRole int32

const (
	ChannelRole_Admin  ChannelRole = 0
	ChannelRole_Member ChannelRole = 1
	ChannelRole_Guest  ChannelRole = 2
	ChannelRole_Banned ChannelRole = 3
	ChannelRole_Talker ChannelRole = 4
)

// Enum value maps for ChannelRole.
var (
	ChannelRole_name = map[int32]string{
		0: "Admin",
		1: "Member",
		2: "Guest",
		3: "Banned",
		4: "Talker",
	}
	ChannelRole_value = map[string]int32{
		"Admin":  0,
		"Member": 1,
		"Guest":  2,
		"Banned": 3,
		"Talker": 4,
	}
)

func (x ChannelRole) Enum() *ChannelRole {
	p := new(ChannelRole)
	*p = x
	return p
}

func (x ChannelRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelRole) Descriptor() protoreflect.EnumDescriptor {
	return file_channel_proto_enumTypes[1].Descriptor()
}

func (ChannelRole) Type() protoreflect.EnumType {
	return &file_channel_proto_enumTypes[1]
}

func (x ChannelRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelRole.Descriptor instead.
func (ChannelRole) EnumDescriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{1}
}

type ChannelMember_Kind int32

const (
	ChannelMember_Member  ChannelMember_Kind = 0
	ChannelMember_Invitee ChannelMember_Kind = 1
)

// Enum value maps for ChannelMember_Kind.
var (
	ChannelMember_Kind_name = map[int32]string{
		0: "Member",
		1: "Invitee",
	}
	ChannelMember_Kind_value = map[string]int32{
		"Member":  0,
		"Invitee": 1,
	}
)

func (x ChannelMember_Kind) Enum() *ChannelMember_Kind {
	p := new(ChannelMember_Kind)
	*p = x
	return p
}

func (x ChannelMember_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelMember_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_channel_proto_enumTypes[2].Descriptor()
}

func (ChannelMember_Kind) Type() protoreflect.EnumType {
	return &file_channel_proto_enumTypes[2]
}

func (x ChannelMember_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelMember_Kind.Descriptor instead.
func (ChannelMember_Kind) EnumDescriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{11, 0}
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Visibility ChannelVisibility `protobuf:"varint,3,opt,name=visibility,proto3,enum=zed.messages.ChannelVisibility" json:"visibility,omitempty"`
	ParentPath []uint64          `protobuf:"varint,5,rep,packed,name=parent_path,json=parentPath,proto3" json:"parent_path,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{0}
}

func (x *Channel) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Channel) GetVisibility() ChannelVisibility {
	if x != nil {
		return x.Visibility
	}
	return ChannelVisibility_Public
}

func (x *Channel) GetParentPath() []uint64 {
	if x != nil {
		return x.ParentPath
	}
	return nil
}

type UpdateChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels                    []*Channel              `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	DeleteChannels              []uint64                `protobuf:"varint,4,rep,packed,name=delete_channels,json=deleteChannels,proto3" json:"delete_channels,omitempty"`
	ChannelInvitations          []*Channel              `protobuf:"bytes,5,rep,name=channel_invitations,json=channelInvitations,proto3" json:"channel_invitations,omitempty"`
	RemoveChannelInvitations    []uint64                `protobuf:"varint,6,rep,packed,name=remove_channel_invitations,json=removeChannelInvitations,proto3" json:"remove_channel_invitations,omitempty"`
	ChannelParticipants         []*ChannelParticipants  `protobuf:"bytes,7,rep,name=channel_participants,json=channelParticipants,proto3" json:"channel_participants,omitempty"`
	LatestChannelMessageIds     []*ChannelMessageId     `protobuf:"bytes,8,rep,name=latest_channel_message_ids,json=latestChannelMessageIds,proto3" json:"latest_channel_message_ids,omitempty"`
	LatestChannelBufferVersions []*ChannelBufferVersion `protobuf:"bytes,9,rep,name=latest_channel_buffer_versions,json=latestChannelBufferVersions,proto3" json:"latest_channel_buffer_versions,omitempty"`
}

func (x *UpdateChannels) Reset() {
	*x = UpdateChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannels) ProtoMessage() {}

func (x *UpdateChannels) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannels.ProtoReflect.Descriptor instead.
func (*UpdateChannels) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateChannels) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *UpdateChannels) GetDeleteChannels() []uint64 {
	if x != nil {
		return x.DeleteChannels
	}
	return nil
}

func (x *UpdateChannels) GetChannelInvitations() []*Channel {
	if x != nil {
		return x.ChannelInvitations
	}
	return nil
}

func (x *UpdateChannels) GetRemoveChannelInvitations() []uint64 {
	if x != nil {
		return x.RemoveChannelInvitations
	}
	return nil
}

func (x *UpdateChannels) GetChannelParticipants() []*ChannelParticipants {
	if x != nil {
		return x.ChannelParticipants
	}
	return nil
}

func (x *UpdateChannels) GetLatestChannelMessageIds() []*ChannelMessageId {
	if x != nil {
		return x.LatestChannelMessageIds
	}
	return nil
}

func (x *UpdateChannels) GetLatestChannelBufferVersions() []*ChannelBufferVersion {
	if x != nil {
		return x.LatestChannelBufferVersions
	}
	return nil
}

type UpdateUserChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObservedChannelMessageId     []*ChannelMessageId     `protobuf:"bytes,1,rep,name=observed_channel_message_id,json=observedChannelMessageId,proto3" json:"observed_channel_message_id,omitempty"`
	ObservedChannelBufferVersion []*ChannelBufferVersion `protobuf:"bytes,2,rep,name=observed_channel_buffer_version,json=observedChannelBufferVersion,proto3" json:"observed_channel_buffer_version,omitempty"`
	ChannelMemberships           []*ChannelMembership    `protobuf:"bytes,3,rep,name=channel_memberships,json=channelMemberships,proto3" json:"channel_memberships,omitempty"`
}

func (x *UpdateUserChannels) Reset() {
	*x = UpdateUserChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserChannels) ProtoMessage() {}

func (x *UpdateUserChannels) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserChannels.ProtoReflect.Descriptor instead.
func (*UpdateUserChannels) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateUserChannels) GetObservedChannelMessageId() []*ChannelMessageId {
	if x != nil {
		return x.ObservedChannelMessageId
	}
	return nil
}

func (x *UpdateUserChannels) GetObservedChannelBufferVersion() []*ChannelBufferVersion {
	if x != nil {
		return x.ObservedChannelBufferVersion
	}
	return nil
}

func (x *UpdateUserChannels) GetChannelMemberships() []*ChannelMembership {
	if x != nil {
		return x.ChannelMemberships
	}
	return nil
}

type ChannelMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64      `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Role      ChannelRole `protobuf:"varint,2,opt,name=role,proto3,enum=zed.messages.ChannelRole" json:"role,omitempty"`
}

func (x *ChannelMembership) Reset() {
	*x = ChannelMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMembership) ProtoMessage() {}

func (x *ChannelMembership) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMembership.ProtoReflect.Descriptor instead.
func (*ChannelMembership) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelMembership) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelMembership) GetRole() ChannelRole {
	if x != nil {
		return x.Role
	}
	return ChannelRole_Admin
}

type ChannelMessageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MessageId uint64 `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *ChannelMessageId) Reset() {
	*x = ChannelMessageId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageId) ProtoMessage() {}

func (x *ChannelMessageId) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageId.ProtoReflect.Descriptor instead.
func (*ChannelMessageId) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{4}
}

func (x *ChannelMessageId) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelMessageId) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type ChannelPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64      `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Role      ChannelRole `protobuf:"varint,3,opt,name=role,proto3,enum=zed.messages.ChannelRole" json:"role,omitempty"`
}

func (x *ChannelPermission) Reset() {
	*x = ChannelPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPermission) ProtoMessage() {}

func (x *ChannelPermission) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPermission.ProtoReflect.Descriptor instead.
func (*ChannelPermission) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{5}
}

func (x *ChannelPermission) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelPermission) GetRole() ChannelRole {
	if x != nil {
		return x.Role
	}
	return ChannelRole_Admin
}

type ChannelParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId          uint64   `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ParticipantUserIds []uint64 `protobuf:"varint,2,rep,packed,name=participant_user_ids,json=participantUserIds,proto3" json:"participant_user_ids,omitempty"`
}

func (x *ChannelParticipants) Reset() {
	*x = ChannelParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelParticipants) ProtoMessage() {}

func (x *ChannelParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelParticipants.ProtoReflect.Descriptor instead.
func (*ChannelParticipants) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{6}
}

func (x *ChannelParticipants) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelParticipants) GetParticipantUserIds() []uint64 {
	if x != nil {
		return x.ParticipantUserIds
	}
	return nil
}

type JoinChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *JoinChannel) Reset() {
	*x = JoinChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannel) ProtoMessage() {}

func (x *JoinChannel) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannel.ProtoReflect.Descriptor instead.
func (*JoinChannel) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{7}
}

func (x *JoinChannel) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type DeleteChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *DeleteChannel) Reset() {
	*x = DeleteChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannel) ProtoMessage() {}

func (x *DeleteChannel) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannel.ProtoReflect.Descriptor instead.
func (*DeleteChannel) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteChannel) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type GetChannelMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Query     string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Limit     uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetChannelMembers) Reset() {
	*x = GetChannelMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelMembers) ProtoMessage() {}

func (x *GetChannelMembers) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelMembers.ProtoReflect.Descriptor instead.
func (*GetChannelMembers) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{9}
}

func (x *GetChannelMembers) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelMembers) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetChannelMembers) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetChannelMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*ChannelMember `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	Users   []*User          `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *GetChannelMembersResponse) Reset() {
	*x = GetChannelMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelMembersResponse) ProtoMessage() {}

func (x *GetChannelMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelMembersResponse.ProtoReflect.Descriptor instead.
func (*GetChannelMembersResponse) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{10}
}

func (x *GetChannelMembersResponse) GetMembers() []*ChannelMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GetChannelMembersResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type ChannelMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64             `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Kind   ChannelMember_Kind `protobuf:"varint,3,opt,name=kind,proto3,enum=zed.messages.ChannelMember_Kind" json:"kind,omitempty"`
	Role   ChannelRole        `protobuf:"varint,4,opt,name=role,proto3,enum=zed.messages.ChannelRole" json:"role,omitempty"`
}

func (x *ChannelMember) Reset() {
	*x = ChannelMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMember) ProtoMessage() {}

func (x *ChannelMember) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMember.ProtoReflect.Descriptor instead.
func (*ChannelMember) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{11}
}

func (x *ChannelMember) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChannelMember) GetKind() ChannelMember_Kind {
	if x != nil {
		return x.Kind
	}
	return ChannelMember_Member
}

func (x *ChannelMember) GetRole() ChannelRole {
	if x != nil {
		return x.Role
	}
	return ChannelRole_Admin
}

type SubscribeToChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeToChannels) Reset() {
	*x = SubscribeToChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToChannels) ProtoMessage() {}

func (x *SubscribeToChannels) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToChannels.ProtoReflect.Descriptor instead.
func (*SubscribeToChannels) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{12}
}

type CreateChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ParentId *uint64 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
}

func (x *CreateChannel) Reset() {
	*x = CreateChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannel) ProtoMessage() {}

func (x *CreateChannel) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannel.ProtoReflect.Descriptor instead.
func (*CreateChannel) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{13}
}

func (x *CreateChannel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateChannel) GetParentId() uint64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

type CreateChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel  *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	ParentId *uint64  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
}

func (x *CreateChannelResponse) Reset() {
	*x = CreateChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelResponse) ProtoMessage() {}

func (x *CreateChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelResponse.ProtoReflect.Descriptor instead.
func (*CreateChannelResponse) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{14}
}

func (x *CreateChannelResponse) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *CreateChannelResponse) GetParentId() uint64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

type InviteChannelMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64      `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    uint64      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Role      ChannelRole `protobuf:"varint,4,opt,name=role,proto3,enum=zed.messages.ChannelRole" json:"role,omitempty"`
}

func (x *InviteChannelMember) Reset() {
	*x = InviteChannelMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteChannelMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteChannelMember) ProtoMessage() {}

func (x *InviteChannelMember) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteChannelMember.ProtoReflect.Descriptor instead.
func (*InviteChannelMember) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{15}
}

func (x *InviteChannelMember) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *InviteChannelMember) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InviteChannelMember) GetRole() ChannelRole {
	if x != nil {
		return x.Role
	}
	return ChannelRole_Admin
}

type RemoveChannelMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RemoveChannelMember) Reset() {
	*x = RemoveChannelMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveChannelMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChannelMember) ProtoMessage() {}

func (x *RemoveChannelMember) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChannelMember.ProtoReflect.Descriptor instead.
func (*RemoveChannelMember) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveChannelMember) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *RemoveChannelMember) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SetChannelMemberRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64      `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    uint64      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Role      ChannelRole `protobuf:"varint,3,opt,name=role,proto3,enum=zed.messages.ChannelRole" json:"role,omitempty"`
}

func (x *SetChannelMemberRole) Reset() {
	*x = SetChannelMemberRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChannelMemberRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelMemberRole) ProtoMessage() {}

func (x *SetChannelMemberRole) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelMemberRole.ProtoReflect.Descriptor instead.
func (*SetChannelMemberRole) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{17}
}

func (x *SetChannelMemberRole) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *SetChannelMemberRole) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetChannelMemberRole) GetRole() ChannelRole {
	if x != nil {
		return x.Role
	}
	return ChannelRole_Admin
}

type SetChannelVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  uint64            `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Visibility ChannelVisibility `protobuf:"varint,2,opt,name=visibility,proto3,enum=zed.messages.ChannelVisibility" json:"visibility,omitempty"`
}

func (x *SetChannelVisibility) Reset() {
	*x = SetChannelVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChannelVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelVisibility) ProtoMessage() {}

func (x *SetChannelVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelVisibility.ProtoReflect.Descriptor instead.
func (*SetChannelVisibility) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{18}
}

func (x *SetChannelVisibility) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *SetChannelVisibility) GetVisibility() ChannelVisibility {
	if x != nil {
		return x.Visibility
	}
	return ChannelVisibility_Public
}

type RenameChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RenameChannel) Reset() {
	*x = RenameChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameChannel) ProtoMessage() {}

func (x *RenameChannel) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameChannel.ProtoReflect.Descriptor instead.
func (*RenameChannel) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{19}
}

func (x *RenameChannel) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *RenameChannel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RenameChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *RenameChannelResponse) Reset() {
	*x = RenameChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameChannelResponse) ProtoMessage() {}

func (x *RenameChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameChannelResponse.ProtoReflect.Descriptor instead.
func (*RenameChannelResponse) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{20}
}

func (x *RenameChannelResponse) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type JoinChannelChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *JoinChannelChat) Reset() {
	*x = JoinChannelChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinChannelChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannelChat) ProtoMessage() {}

func (x *JoinChannelChat) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannelChat.ProtoReflect.Descriptor instead.
func (*JoinChannelChat) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{21}
}

func (x *JoinChannelChat) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type JoinChannelChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*ChannelMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Done     bool              `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *JoinChannelChatResponse) Reset() {
	*x = JoinChannelChatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinChannelChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannelChatResponse) ProtoMessage() {}

func (x *JoinChannelChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannelChatResponse.ProtoReflect.Descriptor instead.
func (*JoinChannelChatResponse) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{22}
}

func (x *JoinChannelChatResponse) GetMessages() []*ChannelMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *JoinChannelChatResponse) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type LeaveChannelChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *LeaveChannelChat) Reset() {
	*x = LeaveChannelChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveChannelChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveChannelChat) ProtoMessage() {}

func (x *LeaveChannelChat) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveChannelChat.ProtoReflect.Descriptor instead.
func (*LeaveChannelChat) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{23}
}

func (x *LeaveChannelChat) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type SendChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId        uint64         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Body             string         `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Nonce            *Nonce         `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Mentions         []*ChatMention `protobuf:"bytes,4,rep,name=mentions,proto3" json:"mentions,omitempty"`
	ReplyToMessageId *uint64        `protobuf:"varint,5,opt,name=reply_to_message_id,json=replyToMessageId,proto3,oneof" json:"reply_to_message_id,omitempty"`
}

func (x *SendChannelMessage) Reset() {
	*x = SendChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChannelMessage) ProtoMessage() {}

func (x *SendChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChannelMessage.ProtoReflect.Descriptor instead.
func (*SendChannelMessage) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{24}
}

func (x *SendChannelMessage) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *SendChannelMessage) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *SendChannelMessage) GetNonce() *Nonce {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *SendChannelMessage) GetMentions() []*ChatMention {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *SendChannelMessage) GetReplyToMessageId() uint64 {
	if x != nil && x.ReplyToMessageId != nil {
		return *x.ReplyToMessageId
	}
	return 0
}

type RemoveChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MessageId uint64 `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *RemoveChannelMessage) Reset() {
	*x = RemoveChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChannelMessage) ProtoMessage() {}

func (x *RemoveChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChannelMessage.ProtoReflect.Descriptor instead.
func (*RemoveChannelMessage) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{25}
}

func (x *RemoveChannelMessage) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *RemoveChannelMessage) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type UpdateChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64         `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MessageId uint64         `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Nonce     *Nonce         `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Body      string         `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	Mentions  []*ChatMention `protobuf:"bytes,6,rep,name=mentions,proto3" json:"mentions,omitempty"`
}

func (x *UpdateChannelMessage) Reset() {
	*x = UpdateChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelMessage) ProtoMessage() {}

func (x *UpdateChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelMessage.ProtoReflect.Descriptor instead.
func (*UpdateChannelMessage) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateChannelMessage) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChannelMessage) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *UpdateChannelMessage) GetNonce() *Nonce {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *UpdateChannelMessage) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *UpdateChannelMessage) GetMentions() []*ChatMention {
	if x != nil {
		return x.Mentions
	}
	return nil
}

type AckChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MessageId uint64 `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *AckChannelMessage) Reset() {
	*x = AckChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckChannelMessage) ProtoMessage() {}

func (x *AckChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckChannelMessage.ProtoReflect.Descriptor instead.
func (*AckChannelMessage) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{27}
}

func (x *AckChannelMessage) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *AckChannelMessage) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type SendChannelMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *ChannelMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendChannelMessageResponse) Reset() {
	*x = SendChannelMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChannelMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChannelMessageResponse) ProtoMessage() {}

func (x *SendChannelMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChannelMessageResponse.ProtoReflect.Descriptor instead.
func (*SendChannelMessageResponse) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{28}
}

func (x *SendChannelMessageResponse) GetMessage() *ChannelMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type ChannelMessageSent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64          `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Message   *ChannelMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChannelMessageSent) Reset() {
	*x = ChannelMessageSent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessageSent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageSent) ProtoMessage() {}

func (x *ChannelMessageSent) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageSent.ProtoReflect.Descriptor instead.
func (*ChannelMessageSent) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{29}
}

func (x *ChannelMessageSent) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelMessageSent) GetMessage() *ChannelMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type ChannelMessageUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64          `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Message   *ChannelMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChannelMessageUpdate) Reset() {
	*x = ChannelMessageUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessageUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageUpdate) ProtoMessage() {}

func (x *ChannelMessageUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageUpdate.ProtoReflect.Descriptor instead.
func (*ChannelMessageUpdate) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{30}
}

func (x *ChannelMessageUpdate) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelMessageUpdate) GetMessage() *ChannelMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type GetChannelMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId       uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	BeforeMessageId uint64 `protobuf:"varint,2,opt,name=before_message_id,json=beforeMessageId,proto3" json:"before_message_id,omitempty"`
}

func (x *GetChannelMessages) Reset() {
	*x = GetChannelMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelMessages) ProtoMessage() {}

func (x *GetChannelMessages) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelMessages.ProtoReflect.Descriptor instead.
func (*GetChannelMessages) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{31}
}

func (x *GetChannelMessages) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetChannelMessages) GetBeforeMessageId() uint64 {
	if x != nil {
		return x.BeforeMessageId
	}
	return 0
}

type GetChannelMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*ChannelMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Done     bool              `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *GetChannelMessagesResponse) Reset() {
	*x = GetChannelMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelMessagesResponse) ProtoMessage() {}

func (x *GetChannelMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelMessagesResponse.ProtoReflect.Descriptor instead.
func (*GetChannelMessagesResponse) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{32}
}

func (x *GetChannelMessagesResponse) GetMessages() []*ChannelMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GetChannelMessagesResponse) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type GetChannelMessagesById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageIds []uint64 `protobuf:"varint,1,rep,packed,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
}

func (x *GetChannelMessagesById) Reset() {
	*x = GetChannelMessagesById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelMessagesById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelMessagesById) ProtoMessage() {}

func (x *GetChannelMessagesById) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelMessagesById.ProtoReflect.Descriptor instead.
func (*GetChannelMessagesById) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{33}
}

func (x *GetChannelMessagesById) GetMessageIds() []uint64 {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

type MoveChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	To        uint64 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *MoveChannel) Reset() {
	*x = MoveChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveChannel) ProtoMessage() {}

func (x *MoveChannel) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveChannel.ProtoReflect.Descriptor instead.
func (*MoveChannel) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{34}
}

func (x *MoveChannel) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MoveChannel) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

type JoinChannelBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *JoinChannelBuffer) Reset() {
	*x = JoinChannelBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinChannelBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannelBuffer) ProtoMessage() {}

func (x *JoinChannelBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannelBuffer.ProtoReflect.Descriptor instead.
func (*JoinChannelBuffer) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{35}
}

func (x *JoinChannelBuffer) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type ChannelBufferVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64              `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Version   []*VectorClockEntry `protobuf:"bytes,2,rep,name=version,proto3" json:"version,omitempty"`
	Epoch     uint64              `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ChannelBufferVersion) Reset() {
	*x = ChannelBufferVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelBufferVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelBufferVersion) ProtoMessage() {}

func (x *ChannelBufferVersion) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelBufferVersion.ProtoReflect.Descriptor instead.
func (*ChannelBufferVersion) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{36}
}

func (x *ChannelBufferVersion) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelBufferVersion) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ChannelBufferVersion) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type UpdateChannelBufferCollaborators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId     uint64          `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Collaborators []*Collaborator `protobuf:"bytes,2,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
}

func (x *UpdateChannelBufferCollaborators) Reset() {
	*x = UpdateChannelBufferCollaborators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelBufferCollaborators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelBufferCollaborators) ProtoMessage() {}

func (x *UpdateChannelBufferCollaborators) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelBufferCollaborators.ProtoReflect.Descriptor instead.
func (*UpdateChannelBufferCollaborators) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateChannelBufferCollaborators) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChannelBufferCollaborators) GetCollaborators() []*Collaborator {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

type UpdateChannelBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  uint64       `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Operations []*Operation `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *UpdateChannelBuffer) Reset() {
	*x = UpdateChannelBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelBuffer) ProtoMessage() {}

func (x *UpdateChannelBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelBuffer.ProtoReflect.Descriptor instead.
func (*UpdateChannelBuffer) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateChannelBuffer) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChannelBuffer) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type ChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Body             string         `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Timestamp        uint64         `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SenderId         uint64         `protobuf:"varint,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	Nonce            *Nonce         `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Mentions         []*ChatMention `protobuf:"bytes,6,rep,name=mentions,proto3" json:"mentions,omitempty"`
	ReplyToMessageId *uint64        `protobuf:"varint,7,opt,name=reply_to_message_id,json=replyToMessageId,proto3,oneof" json:"reply_to_message_id,omitempty"`
	EditedAt         *uint64        `protobuf:"varint,8,opt,name=edited_at,json=editedAt,proto3,oneof" json:"edited_at,omitempty"`
}

func (x *ChannelMessage) Reset() {
	*x = ChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessage) ProtoMessage() {}

func (x *ChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessage.ProtoReflect.Descriptor instead.
func (*ChannelMessage) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{39}
}

func (x *ChannelMessage) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelMessage) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *ChannelMessage) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ChannelMessage) GetSenderId() uint64 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

func (x *ChannelMessage) GetNonce() *Nonce {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ChannelMessage) GetMentions() []*ChatMention {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *ChannelMessage) GetReplyToMessageId() uint64 {
	if x != nil && x.ReplyToMessageId != nil {
		return *x.ReplyToMessageId
	}
	return 0
}

func (x *ChannelMessage) GetEditedAt() uint64 {
	if x != nil && x.EditedAt != nil {
		return *x.EditedAt
	}
	return 0
}

type ChatMention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range  *Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ChatMention) Reset() {
	*x = ChatMention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMention) ProtoMessage() {}

func (x *ChatMention) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMention.ProtoReflect.Descriptor instead.
func (*ChatMention) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{40}
}

func (x *ChatMention) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *ChatMention) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type RejoinChannelBuffers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buffers []*ChannelBufferVersion `protobuf:"bytes,1,rep,name=buffers,proto3" json:"buffers,omitempty"`
}

func (x *RejoinChannelBuffers) Reset() {
	*x = RejoinChannelBuffers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejoinChannelBuffers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejoinChannelBuffers) ProtoMessage() {}

func (x *RejoinChannelBuffers) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejoinChannelBuffers.ProtoReflect.Descriptor instead.
func (*RejoinChannelBuffers) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{41}
}

func (x *RejoinChannelBuffers) GetBuffers() []*ChannelBufferVersion {
	if x != nil {
		return x.Buffers
	}
	return nil
}

type RejoinChannelBuffersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buffers []*RejoinedChannelBuffer `protobuf:"bytes,1,rep,name=buffers,proto3" json:"buffers,omitempty"`
}

func (x *RejoinChannelBuffersResponse) Reset() {
	*x = RejoinChannelBuffersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejoinChannelBuffersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejoinChannelBuffersResponse) ProtoMessage() {}

func (x *RejoinChannelBuffersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejoinChannelBuffersResponse.ProtoReflect.Descriptor instead.
func (*RejoinChannelBuffersResponse) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{42}
}

func (x *RejoinChannelBuffersResponse) GetBuffers() []*RejoinedChannelBuffer {
	if x != nil {
		return x.Buffers
	}
	return nil
}

type AckBufferOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferId uint64              `protobuf:"varint,1,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	Epoch    uint64              `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Version  []*VectorClockEntry `protobuf:"bytes,3,rep,name=version,proto3" json:"version,omitempty"`
}

func (x *AckBufferOperation) Reset() {
	*x = AckBufferOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckBufferOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckBufferOperation) ProtoMessage() {}

func (x *AckBufferOperation) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckBufferOperation.ProtoReflect.Descriptor instead.
func (*AckBufferOperation) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{43}
}

func (x *AckBufferOperation) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *AckBufferOperation) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *AckBufferOperation) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

type JoinChannelBufferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferId      uint64          `protobuf:"varint,1,opt,name=buffer_id,json=bufferId,proto3" json:"buffer_id,omitempty"`
	ReplicaId     uint32          `protobuf:"varint,2,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	BaseText      string          `protobuf:"bytes,3,opt,name=base_text,json=baseText,proto3" json:"base_text,omitempty"`
	Operations    []*Operation    `protobuf:"bytes,4,rep,name=operations,proto3" json:"operations,omitempty"`
	Collaborators []*Collaborator `protobuf:"bytes,5,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	Epoch         uint64          `protobuf:"varint,6,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *JoinChannelBufferResponse) Reset() {
	*x = JoinChannelBufferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinChannelBufferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannelBufferResponse) ProtoMessage() {}

func (x *JoinChannelBufferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannelBufferResponse.ProtoReflect.Descriptor instead.
func (*JoinChannelBufferResponse) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{44}
}

func (x *JoinChannelBufferResponse) GetBufferId() uint64 {
	if x != nil {
		return x.BufferId
	}
	return 0
}

func (x *JoinChannelBufferResponse) GetReplicaId() uint32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *JoinChannelBufferResponse) GetBaseText() string {
	if x != nil {
		return x.BaseText
	}
	return ""
}

func (x *JoinChannelBufferResponse) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *JoinChannelBufferResponse) GetCollaborators() []*Collaborator {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

func (x *JoinChannelBufferResponse) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type RejoinedChannelBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId     uint64              `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Version       []*VectorClockEntry `protobuf:"bytes,2,rep,name=version,proto3" json:"version,omitempty"`
	Operations    []*Operation        `protobuf:"bytes,3,rep,name=operations,proto3" json:"operations,omitempty"`
	Collaborators []*Collaborator     `protobuf:"bytes,4,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
}

func (x *RejoinedChannelBuffer) Reset() {
	*x = RejoinedChannelBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejoinedChannelBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejoinedChannelBuffer) ProtoMessage() {}

func (x *RejoinedChannelBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejoinedChannelBuffer.ProtoReflect.Descriptor instead.
func (*RejoinedChannelBuffer) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{45}
}

func (x *RejoinedChannelBuffer) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *RejoinedChannelBuffer) GetVersion() []*VectorClockEntry {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *RejoinedChannelBuffer) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *RejoinedChannelBuffer) GetCollaborators() []*Collaborator {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

type LeaveChannelBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *LeaveChannelBuffer) Reset() {
	*x = LeaveChannelBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveChannelBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveChannelBuffer) ProtoMessage() {}

func (x *LeaveChannelBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveChannelBuffer.ProtoReflect.Descriptor instead.
func (*LeaveChannelBuffer) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{46}
}

func (x *LeaveChannelBuffer) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type RespondToChannelInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Accept    bool   `protobuf:"varint,2,opt,name=accept,proto3" json:"accept,omitempty"`
}

func (x *RespondToChannelInvite) Reset() {
	*x = RespondToChannelInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondToChannelInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondToChannelInvite) ProtoMessage() {}

func (x *RespondToChannelInvite) ProtoReflect() protoreflect.Message {
	mi := &file_channel_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondToChannelInvite.ProtoReflect.Descriptor instead.
func (*RespondToChannelInvite) Descriptor() ([]byte, []int) {
	return file_channel_proto_rawDescGZIP(), []int{47}
}

func (x *RespondToChannelInvite) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *RespondToChannelInvite) GetAccept() bool {
	if x != nil {
		return x.Accept
	}
	return false
}

var File_channel_proto protoreflect.FileDescriptor

var file_channel_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x0a, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x94, 0x04, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x12, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54,
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52,
	0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x1a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x17, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x67, 0x0a, 0x1e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x10,
	0x22, 0xb0, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x5d, 0x0a, 0x1b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x18, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x1f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x50, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x22, 0x61, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x50, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x66, 0x0a, 0x13, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x22, 0x2e, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x22, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x7c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22,
	0xae, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22,
	0x1f, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x10, 0x01,
	0x22, 0x15, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x53, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x78, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x22, 0x4d, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0x76, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x42, 0x0a, 0x0d, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48,
	0x0a, 0x15, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x30, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x17, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64,
	0x6f, 0x6e, 0x65, 0x22, 0x31, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x32, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x54,
	0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x64,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x51, 0x0a, 0x11, 0x41, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6b, 0x0a, 0x12, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64,
	0x6f, 0x6e, 0x65, 0x22, 0x39, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22, 0x3c,
	0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x11,
	0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0x85, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x83, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x6d,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcd, 0x02,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x32, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x51, 0x0a,
	0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x54, 0x0a, 0x14, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x64, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x22, 0x5d, 0x0a, 0x1c, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x07, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x6b, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x02, 0x0a, 0x19, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x37, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x22, 0xeb, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65,
	0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22,
	0x33, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x2a, 0x2c, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x10, 0x01, 0x2a, 0x47, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x54, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x10, 0x04, 0x42, 0x06, 0x5a, 0x04,
	0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_channel_proto_rawDescOnce sync.Once
	file_channel_proto_rawDescData = file_channel_proto_rawDesc
)

func file_channel_proto_rawDescGZIP() []byte {
	file_channel_proto_rawDescOnce.Do(func() {
		file_channel_proto_rawDescData = protoimpl.X.CompressGZIP(file_channel_proto_rawDescData)
	})
	return file_channel_proto_rawDescData
}

var file_channel_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_channel_proto_goTypes = []interface{}{
	(ChannelVisibility)(0),                   // 0: zed.messages.ChannelVisibility
	(ChannelRole)(0),                         // 1: zed.messages.ChannelRole
	(ChannelMember_Kind)(0),                  // 2: zed.messages.ChannelMember.Kind
	(*Channel)(nil),                          // 3: zed.messages.Channel
	(*UpdateChannels)(nil),                   // 4: zed.messages.UpdateChannels
	(*UpdateUserChannels)(nil),               // 5: zed.messages.UpdateUserChannels
	(*ChannelMembership)(nil),                // 6: zed.messages.ChannelMembership
	(*ChannelMessageId)(nil),                 // 7: zed.messages.ChannelMessageId
	(*ChannelPermission)(nil),                // 8: zed.messages.ChannelPermission
	(*ChannelParticipants)(nil),              // 9: zed.messages.ChannelParticipants
	(*JoinChannel)(nil),                      // 10: zed.messages.JoinChannel
	(*DeleteChannel)(nil),                    // 11: zed.messages.DeleteChannel
	(*GetChannelMembers)(nil),                // 12: zed.messages.GetChannelMembers
	(*GetChannelMembersResponse)(nil),        // 13: zed.messages.GetChannelMembersResponse
	(*ChannelMember)(nil),                    // 14: zed.messages.ChannelMember
	(*SubscribeToChannels)(nil),              // 15: zed.messages.SubscribeToChannels
	(*CreateChannel)(nil),                    // 16: zed.messages.CreateChannel
	(*CreateChannelResponse)(nil),            // 17: zed.messages.CreateChannelResponse
	(*InviteChannelMember)(nil),              // 18: zed.messages.InviteChannelMember
	(*RemoveChannelMember)(nil),              // 19: zed.messages.RemoveChannelMember
	(*SetChannelMemberRole)(nil),             // 20: zed.messages.SetChannelMemberRole
	(*SetChannelVisibility)(nil),             // 21: zed.messages.SetChannelVisibility
	(*RenameChannel)(nil),                    // 22: zed.messages.RenameChannel
	(*RenameChannelResponse)(nil),            // 23: zed.messages.RenameChannelResponse
	(*JoinChannelChat)(nil),                  // 24: zed.messages.JoinChannelChat
	(*JoinChannelChatResponse)(nil),          // 25: zed.messages.JoinChannelChatResponse
	(*LeaveChannelChat)(nil),                 // 26: zed.messages.LeaveChannelChat
	(*SendChannelMessage)(nil),               // 27: zed.messages.SendChannelMessage
	(*RemoveChannelMessage)(nil),             // 28: zed.messages.RemoveChannelMessage
	(*UpdateChannelMessage)(nil),             // 29: zed.messages.UpdateChannelMessage
	(*AckChannelMessage)(nil),                // 30: zed.messages.AckChannelMessage
	(*SendChannelMessageResponse)(nil),       // 31: zed.messages.SendChannelMessageResponse
	(*ChannelMessageSent)(nil),               // 32: zed.messages.ChannelMessageSent
	(*ChannelMessageUpdate)(nil),             // 33: zed.messages.ChannelMessageUpdate
	(*GetChannelMessages)(nil),               // 34: zed.messages.GetChannelMessages
	(*GetChannelMessagesResponse)(nil),       // 35: zed.messages.GetChannelMessagesResponse
	(*GetChannelMessagesById)(nil),           // 36: zed.messages.GetChannelMessagesById
	(*MoveChannel)(nil),                      // 37: zed.messages.MoveChannel
	(*JoinChannelBuffer)(nil),                // 38: zed.messages.JoinChannelBuffer
	(*ChannelBufferVersion)(nil),             // 39: zed.messages.ChannelBufferVersion
	(*UpdateChannelBufferCollaborators)(nil), // 40: zed.messages.UpdateChannelBufferCollaborators
	(*UpdateChannelBuffer)(nil),              // 41: zed.messages.UpdateChannelBuffer
	(*ChannelMessage)(nil),                   // 42: zed.messages.ChannelMessage
	(*ChatMention)(nil),                      // 43: zed.messages.ChatMention
	(*RejoinChannelBuffers)(nil),             // 44: zed.messages.RejoinChannelBuffers
	(*RejoinChannelBuffersResponse)(nil),     // 45: zed.messages.RejoinChannelBuffersResponse
	(*AckBufferOperation)(nil),               // 46: zed.messages.AckBufferOperation
	(*JoinChannelBufferResponse)(nil),        // 47: zed.messages.JoinChannelBufferResponse
	(*RejoinedChannelBuffer)(nil),            // 48: zed.messages.RejoinedChannelBuffer
	(*LeaveChannelBuffer)(nil),               // 49: zed.messages.LeaveChannelBuffer
	(*RespondToChannelInvite)(nil),           // 50: zed.messages.RespondToChannelInvite
	(*User)(nil),                             // 51: zed.messages.User
	(*Nonce)(nil),                            // 52: zed.messages.Nonce
	(*VectorClockEntry)(nil),                 // 53: zed.messages.VectorClockEntry
	(*Collaborator)(nil),                     // 54: zed.messages.Collaborator
	(*Operation)(nil),                        // 55: zed.messages.Operation
	(*Range)(nil),                            // 56: zed.messages.Range
}
var file_channel_proto_depIdxs = []int32{
	0,  // 0: zed.messages.Channel.visibility:type_name -> zed.messages.ChannelVisibility
	3,  // 1: zed.messages.UpdateChannels.channels:type_name -> zed.messages.Channel
	3,  // 2: zed.messages.UpdateChannels.channel_invitations:type_name -> zed.messages.Channel
	9,  // 3: zed.messages.UpdateChannels.channel_participants:type_name -> zed.messages.ChannelParticipants
	7,  // 4: zed.messages.UpdateChannels.latest_channel_message_ids:type_name -> zed.messages.ChannelMessageId
	39, // 5: zed.messages.UpdateChannels.latest_channel_buffer_versions:type_name -> zed.messages.ChannelBufferVersion
	7,  // 6: zed.messages.UpdateUserChannels.observed_channel_message_id:type_name -> zed.messages.ChannelMessageId
	39, // 7: zed.messages.UpdateUserChannels.observed_channel_buffer_version:type_name -> zed.messages.ChannelBufferVersion
	6,  // 8: zed.messages.UpdateUserChannels.channel_memberships:type_name -> zed.messages.ChannelMembership
	1,  // 9: zed.messages.ChannelMembership.role:type_name -> zed.messages.ChannelRole
	1,  // 10: zed.messages.ChannelPermission.role:type_name -> zed.messages.ChannelRole
	14, // 11: zed.messages.GetChannelMembersResponse.members:type_name -> zed.messages.ChannelMember
	51, // 12: zed.messages.GetChannelMembersResponse.users:type_name -> zed.messages.User
	2,  // 13: zed.messages.ChannelMember.kind:type_name -> zed.messages.ChannelMember.Kind
	1,  // 14: zed.messages.ChannelMember.role:type_name -> zed.messages.ChannelRole
	3,  // 15: zed.messages.CreateChannelResponse.channel:type_name -> zed.messages.Channel
	1,  // 16: zed.messages.InviteChannelMember.role:type_name -> zed.messages.ChannelRole
	1,  // 17: zed.messages.SetChannelMemberRole.role:type_name -> zed.messages.ChannelRole
	0,  // 18: zed.messages.SetChannelVisibility.visibility:type_name -> zed.messages.ChannelVisibility
	3,  // 19: zed.messages.RenameChannelResponse.channel:type_name -> zed.messages.Channel
	42, // 20: zed.messages.JoinChannelChatResponse.messages:type_name -> zed.messages.ChannelMessage
	52, // 21: zed.messages.SendChannelMessage.nonce:type_name -> zed.messages.Nonce
	43, // 22: zed.messages.SendChannelMessage.mentions:type_name -> zed.messages.ChatMention
	52, // 23: zed.messages.UpdateChannelMessage.nonce:type_name -> zed.messages.Nonce
	43, // 24: zed.messages.UpdateChannelMessage.mentions:type_name -> zed.messages.ChatMention
	42, // 25: zed.messages.SendChannelMessageResponse.message:type_name -> zed.messages.ChannelMessage
	42, // 26: zed.messages.ChannelMessageSent.message:type_name -> zed.messages.ChannelMessage
	42, // 27: zed.messages.ChannelMessageUpdate.message:type_name -> zed.messages.ChannelMessage
	42, // 28: zed.messages.GetChannelMessagesResponse.messages:type_name -> zed.messages.ChannelMessage
	53, // 29: zed.messages.ChannelBufferVersion.version:type_name -> zed.messages.VectorClockEntry
	54, // 30: zed.messages.UpdateChannelBufferCollaborators.collaborators:type_name -> zed.messages.Collaborator
	55, // 31: zed.messages.UpdateChannelBuffer.operations:type_name -> zed.messages.Operation
	52, // 32: zed.messages.ChannelMessage.nonce:type_name -> zed.messages.Nonce
	43, // 33: zed.messages.ChannelMessage.mentions:type_name -> zed.messages.ChatMention
	56, // 34: zed.messages.ChatMention.range:type_name -> zed.messages.Range
	39, // 35: zed.messages.RejoinChannelBuffers.buffers:type_name -> zed.messages.ChannelBufferVersion
	48, // 36: zed.messages.RejoinChannelBuffersResponse.buffers:type_name -> zed.messages.RejoinedChannelBuffer
	53, // 37: zed.messages.AckBufferOperation.version:type_name -> zed.messages.VectorClockEntry
	55, // 38: zed.messages.JoinChannelBufferResponse.operations:type_name -> zed.messages.Operation
	54, // 39: zed.messages.JoinChannelBufferResponse.collaborators:type_name -> zed.messages.Collaborator
	53, // 40: zed.messages.RejoinedChannelBuffer.version:type_name -> zed.messages.VectorClockEntry
	55, // 41: zed.messages.RejoinedChannelBuffer.operations:type_name -> zed.messages.Operation
	54, // 42: zed.messages.RejoinedChannelBuffer.collaborators:type_name -> zed.messages.Collaborator
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_channel_proto_init() }
func file_channel_proto_init() {
	if File_channel_proto != nil {
		return
	}
	file_core_proto_init()
	file_buffer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMessageId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteChannelMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveChannelMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChannelMemberRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChannelVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinChannelChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinChannelChatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveChannelChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChannelMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMessageSent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMessageUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelMessagesById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinChannelBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelBufferVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelBufferCollaborators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejoinChannelBuffers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejoinChannelBuffersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckBufferOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinChannelBufferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejoinedChannelBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveChannelBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondToChannelInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_channel_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_channel_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_channel_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_channel_proto_msgTypes[39].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_channel_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_channel_proto_goTypes,
		DependencyIndexes: file_channel_proto_depIdxs,
		EnumInfos:         file_channel_proto_enumTypes,
		MessageInfos:      file_channel_proto_msgTypes,
	}.Build()
	File_channel_proto = out.File
	file_channel_proto_rawDesc = nil
	file_channel_proto_goTypes = nil
	file_channel_proto_depIdxs = nil
}
